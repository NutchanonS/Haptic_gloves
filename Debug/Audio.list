
Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b468  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c0  0800b608  0800b608  0001b608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcc8  0800bcc8  00020288  2**0
                  CONTENTS
  4 .ARM          00000008  0800bcc8  0800bcc8  0001bcc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bcd0  0800bcd0  00020288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bcd0  0800bcd0  0001bcd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bcd4  0800bcd4  0001bcd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  0800bcd8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  20000288  0800bf60  00020288  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  0800bf60  00020618  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8cc  00000000  00000000  000202b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000218a  00000000  00000000  0002eb84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  00030d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b40  00000000  00000000  00031910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018579  00000000  00000000  00032450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe62  00000000  00000000  0004a9c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000960f3  00000000  00000000  0005a82b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f091e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004840  00000000  00000000  000f0970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000288 	.word	0x20000288
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b5f0 	.word	0x0800b5f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000028c 	.word	0x2000028c
 80001dc:	0800b5f0 	.word	0x0800b5f0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <Send_cmd>:
# define Version    0xFF
# define Cmd_Len    0x06
# define Feedback   0x00    //If need for Feedback: 0x01,  No Feedback: 0

void Send_cmd (uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
 8001012:	460b      	mov	r3, r1
 8001014:	71bb      	strb	r3, [r7, #6]
 8001016:	4613      	mov	r3, r2
 8001018:	717b      	strb	r3, [r7, #5]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	b29a      	uxth	r2, r3
 800101e:	79bb      	ldrb	r3, [r7, #6]
 8001020:	b29b      	uxth	r3, r3
 8001022:	4413      	add	r3, r2
 8001024:	b29a      	uxth	r2, r3
 8001026:	797b      	ldrb	r3, [r7, #5]
 8001028:	b29b      	uxth	r3, r3
 800102a:	4413      	add	r3, r2
 800102c:	b29b      	uxth	r3, r3
 800102e:	f203 1305 	addw	r3, r3, #261	; 0x105
 8001032:	82fb      	strh	r3, [r7, #22]
	Checksum = 0-Checksum;
 8001034:	8afb      	ldrh	r3, [r7, #22]
 8001036:	425b      	negs	r3, r3
 8001038:	82fb      	strh	r3, [r7, #22]

	uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 800103a:	237e      	movs	r3, #126	; 0x7e
 800103c:	733b      	strb	r3, [r7, #12]
 800103e:	23ff      	movs	r3, #255	; 0xff
 8001040:	737b      	strb	r3, [r7, #13]
 8001042:	2306      	movs	r3, #6
 8001044:	73bb      	strb	r3, [r7, #14]
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	73fb      	strb	r3, [r7, #15]
 800104a:	2300      	movs	r3, #0
 800104c:	743b      	strb	r3, [r7, #16]
 800104e:	79bb      	ldrb	r3, [r7, #6]
 8001050:	747b      	strb	r3, [r7, #17]
 8001052:	797b      	ldrb	r3, [r7, #5]
 8001054:	74bb      	strb	r3, [r7, #18]
 8001056:	8afb      	ldrh	r3, [r7, #22]
 8001058:	0a1b      	lsrs	r3, r3, #8
 800105a:	b29b      	uxth	r3, r3
 800105c:	b2db      	uxtb	r3, r3
 800105e:	74fb      	strb	r3, [r7, #19]
 8001060:	8afb      	ldrh	r3, [r7, #22]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	753b      	strb	r3, [r7, #20]
 8001066:	23ef      	movs	r3, #239	; 0xef
 8001068:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(DF_UART, CmdSequence, 10, HAL_MAX_DELAY);
 800106a:	f107 010c 	add.w	r1, r7, #12
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	220a      	movs	r2, #10
 8001074:	4803      	ldr	r0, [pc, #12]	; (8001084 <Send_cmd+0x7c>)
 8001076:	f004 fa5a 	bl	800552e <HAL_UART_Transmit>
}
 800107a:	bf00      	nop
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000340 	.word	0x20000340

08001088 <DF_Init>:
  HAL_Delay(200);
}


void DF_Init (uint8_t volume)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
	Send_cmd(0x3F, 0x00, Source);
 8001092:	2202      	movs	r2, #2
 8001094:	2100      	movs	r1, #0
 8001096:	203f      	movs	r0, #63	; 0x3f
 8001098:	f7ff ffb6 	bl	8001008 <Send_cmd>
	HAL_Delay(200);
 800109c:	20c8      	movs	r0, #200	; 0xc8
 800109e:	f001 fe63 	bl	8002d68 <HAL_Delay>
	Send_cmd(0x06, 0x00, volume);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	461a      	mov	r2, r3
 80010a6:	2100      	movs	r1, #0
 80010a8:	2006      	movs	r0, #6
 80010aa:	f7ff ffad 	bl	8001008 <Send_cmd>
	HAL_Delay(500);
 80010ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010b2:	f001 fe59 	bl	8002d68 <HAL_Delay>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <Adc_select_0>:
uint8_t result = 0x05;
int vol;
char volu[20];


void Adc_select_0(){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80010c6:	463b      	mov	r3, r7
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80010d6:	2301      	movs	r3, #1
 80010d8:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80010da:	2302      	movs	r3, #2
 80010dc:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010de:	463b      	mov	r3, r7
 80010e0:	4619      	mov	r1, r3
 80010e2:	4806      	ldr	r0, [pc, #24]	; (80010fc <Adc_select_0+0x3c>)
 80010e4:	f002 f828 	bl	8003138 <HAL_ADC_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <Adc_select_0+0x32>
	  {
	    Error_Handler();
 80010ee:	f000 ffa9 	bl	8002044 <Error_Handler>
	  }
}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200002a4 	.word	0x200002a4

08001100 <Adc_select_1>:
void Adc_select_1(){
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001106:	463b      	mov	r3, r7
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_1;
 8001112:	2301      	movs	r3, #1
 8001114:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001116:	2301      	movs	r3, #1
 8001118:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800111a:	2304      	movs	r3, #4
 800111c:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111e:	463b      	mov	r3, r7
 8001120:	4619      	mov	r1, r3
 8001122:	4806      	ldr	r0, [pc, #24]	; (800113c <Adc_select_1+0x3c>)
 8001124:	f002 f808 	bl	8003138 <HAL_ADC_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <Adc_select_1+0x32>
	  {
	    Error_Handler();
 800112e:	f000 ff89 	bl	8002044 <Error_Handler>
	  }
}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200002a4 	.word	0x200002a4

08001140 <Adc_select_4>:
void Adc_select_4(){
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001146:	463b      	mov	r3, r7
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_4;
 8001152:	2304      	movs	r3, #4
 8001154:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001156:	2301      	movs	r3, #1
 8001158:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800115a:	2304      	movs	r3, #4
 800115c:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	4806      	ldr	r0, [pc, #24]	; (800117c <Adc_select_4+0x3c>)
 8001164:	f001 ffe8 	bl	8003138 <HAL_ADC_ConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <Adc_select_4+0x32>
	  {
	    Error_Handler();
 800116e:	f000 ff69 	bl	8002044 <Error_Handler>
	  }
}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200002a4 	.word	0x200002a4

08001180 <Adc_select_6_poten>:
void Adc_select_6_poten(){
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001186:	463b      	mov	r3, r7
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_6;
 8001192:	2306      	movs	r3, #6
 8001194:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001196:	2301      	movs	r3, #1
 8001198:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800119a:	2304      	movs	r3, #4
 800119c:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800119e:	463b      	mov	r3, r7
 80011a0:	4619      	mov	r1, r3
 80011a2:	4806      	ldr	r0, [pc, #24]	; (80011bc <Adc_select_6_poten+0x3c>)
 80011a4:	f001 ffc8 	bl	8003138 <HAL_ADC_ConfigChannel>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <Adc_select_6_poten+0x32>
	  {
	    Error_Handler();
 80011ae:	f000 ff49 	bl	8002044 <Error_Handler>
	  }
}
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200002a4 	.word	0x200002a4

080011c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011c4:	b0c4      	sub	sp, #272	; 0x110
 80011c6:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c8:	f001 fd5c 	bl	8002c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011cc:	f000 fda2 	bl	8001d14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d0:	f000 fede 	bl	8001f90 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80011d4:	f000 fe88 	bl	8001ee8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80011d8:	f000 feb0 	bl	8001f3c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80011dc:	f000 fe04 	bl	8001de8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80011e0:	f000 fe54 	bl	8001e8c <MX_I2C1_Init>
  MPU6050_Init(&hi2c1);
 80011e4:	48c4      	ldr	r0, [pc, #784]	; (80014f8 <main+0x338>)
 80011e6:	f000 ff32 	bl	800204e <MPU6050_Init>
  /* USER CODE BEGIN 2 */
  DF_Init(10);
 80011ea:	200a      	movs	r0, #10
 80011ec:	f7ff ff4c 	bl	8001088 <DF_Init>
//  DF_PlayFromStart();
  uint8_t a = 0x01;
 80011f0:	2301      	movs	r3, #1
 80011f2:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
  Send_cmd(0x03,0x00, 0x05); //play
 80011f6:	2205      	movs	r2, #5
 80011f8:	2100      	movs	r1, #0
 80011fa:	2003      	movs	r0, #3
 80011fc:	f7ff ff04 	bl	8001008 <Send_cmd>
//  HAL_Delay(500);

	float Ax, Ay, Az, Gx, Gy, Gz;
	float Axmin[4] = {-0.34,0.46,0.61,0.09};  // คน, สวัสดี, อันตราย, เกรงใจ
 8001200:	4bbe      	ldr	r3, [pc, #760]	; (80014fc <main+0x33c>)
 8001202:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8001206:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001208:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float Axmax[4] = {0.42 ,1.1 ,1.17, 0.86};
 800120c:	4bbc      	ldr	r3, [pc, #752]	; (8001500 <main+0x340>)
 800120e:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8001212:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001214:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float Aymin[4] = {0.75,-0.14,0.06,0.52};
 8001218:	4bba      	ldr	r3, [pc, #744]	; (8001504 <main+0x344>)
 800121a:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 800121e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001220:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float Aymax[4] = {1.2 ,0.61 ,0.83,1.13};
 8001224:	4bb8      	ldr	r3, [pc, #736]	; (8001508 <main+0x348>)
 8001226:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800122a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800122c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float Azmin[4] = {-0.54,-1.15,-0.41,-0.41};
 8001230:	4bb6      	ldr	r3, [pc, #728]	; (800150c <main+0x34c>)
 8001232:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8001236:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001238:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float Azmax[4] = {0.18 ,-0.41 ,0.43 ,0.51};
 800123c:	4bb4      	ldr	r3, [pc, #720]	; (8001510 <main+0x350>)
 800123e:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001242:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001244:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	float V0min[4] = {0.52,0.54,0.42, 0.53};
 8001248:	4bb2      	ldr	r3, [pc, #712]	; (8001514 <main+0x354>)
 800124a:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800124e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001250:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float V0max[4] = {0.9,0.9,0.79,0.88};
 8001254:	4bb0      	ldr	r3, [pc, #704]	; (8001518 <main+0x358>)
 8001256:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800125a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800125c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float V1min[4] = {0.38,0.35,0.04,0.1};
 8001260:	4bae      	ldr	r3, [pc, #696]	; (800151c <main+0x35c>)
 8001262:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001266:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001268:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float V1max[4] = {0.83,0.81,0.41,0.52};
 800126c:	4bac      	ldr	r3, [pc, #688]	; (8001520 <main+0x360>)
 800126e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001272:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001274:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float V2min[4] = {0.35,0.38,0.13,0.15};
 8001278:	4baa      	ldr	r3, [pc, #680]	; (8001524 <main+0x364>)
 800127a:	f107 0420 	add.w	r4, r7, #32
 800127e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001280:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float V2max[4] = {0.75,0.78,0.52,0.53};
 8001284:	4ba8      	ldr	r3, [pc, #672]	; (8001528 <main+0x368>)
 8001286:	f107 0410 	add.w	r4, r7, #16
 800128a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800128c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  int oldvoice = 5;
 8001290:	2305      	movs	r3, #5
 8001292:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  int newvoice = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  int cou = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_UART_Transmit(&huart2,"first" ,sizeof("first"),HAL_MAX_DELAY);
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295
 80012a6:	2206      	movs	r2, #6
 80012a8:	49a0      	ldr	r1, [pc, #640]	; (800152c <main+0x36c>)
 80012aa:	48a1      	ldr	r0, [pc, #644]	; (8001530 <main+0x370>)
 80012ac:	f004 f93f 	bl	800552e <HAL_UART_Transmit>
  while (1)
  {
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 80012b0:	49a0      	ldr	r1, [pc, #640]	; (8001534 <main+0x374>)
 80012b2:	4891      	ldr	r0, [pc, #580]	; (80014f8 <main+0x338>)
 80012b4:	f000 ff24 	bl	8002100 <MPU6050_Read_All>

	  	Ax = MPU6050.Ax;
 80012b8:	4b9e      	ldr	r3, [pc, #632]	; (8001534 <main+0x374>)
 80012ba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f7ff fc99 	bl	8000bf8 <__aeabi_d2f>
 80012c6:	4603      	mov	r3, r0
 80012c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	  	Ay = MPU6050.Ay;
 80012cc:	4b99      	ldr	r3, [pc, #612]	; (8001534 <main+0x374>)
 80012ce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80012d2:	4610      	mov	r0, r2
 80012d4:	4619      	mov	r1, r3
 80012d6:	f7ff fc8f 	bl	8000bf8 <__aeabi_d2f>
 80012da:	4603      	mov	r3, r0
 80012dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	  	Az = MPU6050.Az;
 80012e0:	4b94      	ldr	r3, [pc, #592]	; (8001534 <main+0x374>)
 80012e2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7ff fc85 	bl	8000bf8 <__aeabi_d2f>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	  	Gx = MPU6050.Gx;
 80012f4:	4b8f      	ldr	r3, [pc, #572]	; (8001534 <main+0x374>)
 80012f6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80012fa:	4610      	mov	r0, r2
 80012fc:	4619      	mov	r1, r3
 80012fe:	f7ff fc7b 	bl	8000bf8 <__aeabi_d2f>
 8001302:	4603      	mov	r3, r0
 8001304:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  	Gy = MPU6050.Gy;
 8001308:	4b8a      	ldr	r3, [pc, #552]	; (8001534 <main+0x374>)
 800130a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff fc71 	bl	8000bf8 <__aeabi_d2f>
 8001316:	4603      	mov	r3, r0
 8001318:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	  	Gz = MPU6050.Gz;
 800131c:	4b85      	ldr	r3, [pc, #532]	; (8001534 <main+0x374>)
 800131e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001322:	4610      	mov	r0, r2
 8001324:	4619      	mov	r1, r3
 8001326:	f7ff fc67 	bl	8000bf8 <__aeabi_d2f>
 800132a:	4603      	mov	r3, r0
 800132c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

	  	Adc_select_0();
 8001330:	f7ff fec6 	bl	80010c0 <Adc_select_0>
	  	HAL_ADC_Start(&hadc1);
 8001334:	4880      	ldr	r0, [pc, #512]	; (8001538 <main+0x378>)
 8001336:	f001 fd7f 	bl	8002e38 <HAL_ADC_Start>
	  	HAL_ADC_PollForConversion(&hadc1, 1000);
 800133a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800133e:	487e      	ldr	r0, [pc, #504]	; (8001538 <main+0x378>)
 8001340:	f001 fe61 	bl	8003006 <HAL_ADC_PollForConversion>
	  	raw_value = (double)HAL_ADC_GetValue(&hadc1);
 8001344:	487c      	ldr	r0, [pc, #496]	; (8001538 <main+0x378>)
 8001346:	f001 fee9 	bl	800311c <HAL_ADC_GetValue>
 800134a:	4603      	mov	r3, r0
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f8e1 	bl	8000514 <__aeabi_ui2d>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4979      	ldr	r1, [pc, #484]	; (800153c <main+0x37c>)
 8001358:	e9c1 2300 	strd	r2, r3, [r1]
	  	Readvoltage[0] = raw_value*V/4095;
 800135c:	2303      	movs	r3, #3
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f8e8 	bl	8000534 <__aeabi_i2d>
 8001364:	4b75      	ldr	r3, [pc, #468]	; (800153c <main+0x37c>)
 8001366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136a:	f7ff f94d 	bl	8000608 <__aeabi_dmul>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	a35e      	add	r3, pc, #376	; (adr r3, 80014f0 <main+0x330>)
 8001378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137c:	f7ff fa6e 	bl	800085c <__aeabi_ddiv>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	496e      	ldr	r1, [pc, #440]	; (8001540 <main+0x380>)
 8001386:	e9c1 2300 	strd	r2, r3, [r1]
	  	ReadR[0] = ((V*R)/Readvoltage[0])-R;
 800138a:	2303      	movs	r3, #3
 800138c:	220a      	movs	r2, #10
 800138e:	fb02 f303 	mul.w	r3, r2, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff f8ce 	bl	8000534 <__aeabi_i2d>
 8001398:	4b69      	ldr	r3, [pc, #420]	; (8001540 <main+0x380>)
 800139a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139e:	f7ff fa5d 	bl	800085c <__aeabi_ddiv>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4614      	mov	r4, r2
 80013a8:	461d      	mov	r5, r3
 80013aa:	230a      	movs	r3, #10
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f8c1 	bl	8000534 <__aeabi_i2d>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4620      	mov	r0, r4
 80013b8:	4629      	mov	r1, r5
 80013ba:	f7fe ff6d 	bl	8000298 <__aeabi_dsub>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4960      	ldr	r1, [pc, #384]	; (8001544 <main+0x384>)
 80013c4:	e9c1 2300 	strd	r2, r3, [r1]
//	  	ReadR[0] = resist_to_percent(ReadR[0],30,105,0,100);
	  	sprintf(Resist,"read0=%f\t" , Readvoltage[0]);
 80013c8:	4b5d      	ldr	r3, [pc, #372]	; (8001540 <main+0x380>)
 80013ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ce:	495e      	ldr	r1, [pc, #376]	; (8001548 <main+0x388>)
 80013d0:	485e      	ldr	r0, [pc, #376]	; (800154c <main+0x38c>)
 80013d2:	f005 ffc7 	bl	8007364 <siprintf>
	  	HAL_UART_Transmit(&huart2,Resist ,sizeof(Resist),HAL_MAX_DELAY);
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
 80013da:	2214      	movs	r2, #20
 80013dc:	495b      	ldr	r1, [pc, #364]	; (800154c <main+0x38c>)
 80013de:	4854      	ldr	r0, [pc, #336]	; (8001530 <main+0x370>)
 80013e0:	f004 f8a5 	bl	800552e <HAL_UART_Transmit>
	  	HAL_ADC_Stop(&hadc1);
 80013e4:	4854      	ldr	r0, [pc, #336]	; (8001538 <main+0x378>)
 80013e6:	f001 fddb 	bl	8002fa0 <HAL_ADC_Stop>

	  	Adc_select_1();
 80013ea:	f7ff fe89 	bl	8001100 <Adc_select_1>
	  	HAL_ADC_Start(&hadc1);
 80013ee:	4852      	ldr	r0, [pc, #328]	; (8001538 <main+0x378>)
 80013f0:	f001 fd22 	bl	8002e38 <HAL_ADC_Start>
	  	HAL_ADC_PollForConversion(&hadc1, 1000);
 80013f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013f8:	484f      	ldr	r0, [pc, #316]	; (8001538 <main+0x378>)
 80013fa:	f001 fe04 	bl	8003006 <HAL_ADC_PollForConversion>
	  	raw_value = (double)HAL_ADC_GetValue(&hadc1);
 80013fe:	484e      	ldr	r0, [pc, #312]	; (8001538 <main+0x378>)
 8001400:	f001 fe8c 	bl	800311c <HAL_ADC_GetValue>
 8001404:	4603      	mov	r3, r0
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f884 	bl	8000514 <__aeabi_ui2d>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	494a      	ldr	r1, [pc, #296]	; (800153c <main+0x37c>)
 8001412:	e9c1 2300 	strd	r2, r3, [r1]
	  	Readvoltage[1] = raw_value*V/4095;
 8001416:	2303      	movs	r3, #3
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f88b 	bl	8000534 <__aeabi_i2d>
 800141e:	4b47      	ldr	r3, [pc, #284]	; (800153c <main+0x37c>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7ff f8f0 	bl	8000608 <__aeabi_dmul>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	a32f      	add	r3, pc, #188	; (adr r3, 80014f0 <main+0x330>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7ff fa11 	bl	800085c <__aeabi_ddiv>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4940      	ldr	r1, [pc, #256]	; (8001540 <main+0x380>)
 8001440:	e9c1 2302 	strd	r2, r3, [r1, #8]
	  	ReadR[1] = ((V*R)/Readvoltage[1])-R;
 8001444:	2303      	movs	r3, #3
 8001446:	220a      	movs	r2, #10
 8001448:	fb02 f303 	mul.w	r3, r2, r3
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff f871 	bl	8000534 <__aeabi_i2d>
 8001452:	4b3b      	ldr	r3, [pc, #236]	; (8001540 <main+0x380>)
 8001454:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001458:	f7ff fa00 	bl	800085c <__aeabi_ddiv>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4614      	mov	r4, r2
 8001462:	461d      	mov	r5, r3
 8001464:	230a      	movs	r3, #10
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f864 	bl	8000534 <__aeabi_i2d>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4620      	mov	r0, r4
 8001472:	4629      	mov	r1, r5
 8001474:	f7fe ff10 	bl	8000298 <__aeabi_dsub>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4931      	ldr	r1, [pc, #196]	; (8001544 <main+0x384>)
 800147e:	e9c1 2302 	strd	r2, r3, [r1, #8]
//	  	ReadR[1] = resist_to_percent(ReadR[1],27,48,0,100);
	  	sprintf(Resist,"read1=%f\t" , Readvoltage[1]);
 8001482:	4b2f      	ldr	r3, [pc, #188]	; (8001540 <main+0x380>)
 8001484:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001488:	4931      	ldr	r1, [pc, #196]	; (8001550 <main+0x390>)
 800148a:	4830      	ldr	r0, [pc, #192]	; (800154c <main+0x38c>)
 800148c:	f005 ff6a 	bl	8007364 <siprintf>
	  	HAL_UART_Transmit(&huart2,Resist ,sizeof(Resist),HAL_MAX_DELAY);
 8001490:	f04f 33ff 	mov.w	r3, #4294967295
 8001494:	2214      	movs	r2, #20
 8001496:	492d      	ldr	r1, [pc, #180]	; (800154c <main+0x38c>)
 8001498:	4825      	ldr	r0, [pc, #148]	; (8001530 <main+0x370>)
 800149a:	f004 f848 	bl	800552e <HAL_UART_Transmit>
	  	HAL_ADC_Stop(&hadc1);
 800149e:	4826      	ldr	r0, [pc, #152]	; (8001538 <main+0x378>)
 80014a0:	f001 fd7e 	bl	8002fa0 <HAL_ADC_Stop>

	  	Adc_select_4();
 80014a4:	f7ff fe4c 	bl	8001140 <Adc_select_4>
	  	HAL_ADC_Start(&hadc1);
 80014a8:	4823      	ldr	r0, [pc, #140]	; (8001538 <main+0x378>)
 80014aa:	f001 fcc5 	bl	8002e38 <HAL_ADC_Start>
	  	HAL_ADC_PollForConversion(&hadc1, 1000);
 80014ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014b2:	4821      	ldr	r0, [pc, #132]	; (8001538 <main+0x378>)
 80014b4:	f001 fda7 	bl	8003006 <HAL_ADC_PollForConversion>
	  	raw_value = (double)HAL_ADC_GetValue(&hadc1);
 80014b8:	481f      	ldr	r0, [pc, #124]	; (8001538 <main+0x378>)
 80014ba:	f001 fe2f 	bl	800311c <HAL_ADC_GetValue>
 80014be:	4603      	mov	r3, r0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f827 	bl	8000514 <__aeabi_ui2d>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	491c      	ldr	r1, [pc, #112]	; (800153c <main+0x37c>)
 80014cc:	e9c1 2300 	strd	r2, r3, [r1]
	  	Readvoltage[2] = raw_value*V/4095;
 80014d0:	2303      	movs	r3, #3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f82e 	bl	8000534 <__aeabi_i2d>
 80014d8:	4b18      	ldr	r3, [pc, #96]	; (800153c <main+0x37c>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	f7ff f893 	bl	8000608 <__aeabi_dmul>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	e034      	b.n	8001554 <main+0x394>
 80014ea:	bf00      	nop
 80014ec:	f3af 8000 	nop.w
 80014f0:	00000000 	.word	0x00000000
 80014f4:	40affe00 	.word	0x40affe00
 80014f8:	200002ec 	.word	0x200002ec
 80014fc:	0800b6d4 	.word	0x0800b6d4
 8001500:	0800b6e4 	.word	0x0800b6e4
 8001504:	0800b6f4 	.word	0x0800b6f4
 8001508:	0800b704 	.word	0x0800b704
 800150c:	0800b714 	.word	0x0800b714
 8001510:	0800b724 	.word	0x0800b724
 8001514:	0800b734 	.word	0x0800b734
 8001518:	0800b744 	.word	0x0800b744
 800151c:	0800b754 	.word	0x0800b754
 8001520:	0800b764 	.word	0x0800b764
 8001524:	0800b774 	.word	0x0800b774
 8001528:	0800b784 	.word	0x0800b784
 800152c:	0800b608 	.word	0x0800b608
 8001530:	20000384 	.word	0x20000384
 8001534:	200003c8 	.word	0x200003c8
 8001538:	200002a4 	.word	0x200002a4
 800153c:	20000420 	.word	0x20000420
 8001540:	20000428 	.word	0x20000428
 8001544:	20000440 	.word	0x20000440
 8001548:	0800b610 	.word	0x0800b610
 800154c:	20000000 	.word	0x20000000
 8001550:	0800b61c 	.word	0x0800b61c
 8001554:	4619      	mov	r1, r3
 8001556:	a38e      	add	r3, pc, #568	; (adr r3, 8001790 <main+0x5d0>)
 8001558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155c:	f7ff f97e 	bl	800085c <__aeabi_ddiv>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	498c      	ldr	r1, [pc, #560]	; (8001798 <main+0x5d8>)
 8001566:	e9c1 2304 	strd	r2, r3, [r1, #16]
	  	ReadR[2] = ((V*R)/Readvoltage[2])-R;
 800156a:	2303      	movs	r3, #3
 800156c:	220a      	movs	r2, #10
 800156e:	fb02 f303 	mul.w	r3, r2, r3
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ffde 	bl	8000534 <__aeabi_i2d>
 8001578:	4b87      	ldr	r3, [pc, #540]	; (8001798 <main+0x5d8>)
 800157a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800157e:	f7ff f96d 	bl	800085c <__aeabi_ddiv>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4614      	mov	r4, r2
 8001588:	461d      	mov	r5, r3
 800158a:	230a      	movs	r3, #10
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe ffd1 	bl	8000534 <__aeabi_i2d>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4620      	mov	r0, r4
 8001598:	4629      	mov	r1, r5
 800159a:	f7fe fe7d 	bl	8000298 <__aeabi_dsub>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	497e      	ldr	r1, [pc, #504]	; (800179c <main+0x5dc>)
 80015a4:	e9c1 2304 	strd	r2, r3, [r1, #16]
//	  	ReadR[2] = resist_to_percent(ReadR[2],30,60,0,100);
	  	sprintf(Resist,"read2=%f\t" ,Readvoltage[2]);
 80015a8:	4b7b      	ldr	r3, [pc, #492]	; (8001798 <main+0x5d8>)
 80015aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80015ae:	497c      	ldr	r1, [pc, #496]	; (80017a0 <main+0x5e0>)
 80015b0:	487c      	ldr	r0, [pc, #496]	; (80017a4 <main+0x5e4>)
 80015b2:	f005 fed7 	bl	8007364 <siprintf>
	  	HAL_UART_Transmit(&huart2,Resist ,sizeof(Resist),HAL_MAX_DELAY);
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ba:	2214      	movs	r2, #20
 80015bc:	4979      	ldr	r1, [pc, #484]	; (80017a4 <main+0x5e4>)
 80015be:	487a      	ldr	r0, [pc, #488]	; (80017a8 <main+0x5e8>)
 80015c0:	f003 ffb5 	bl	800552e <HAL_UART_Transmit>
	  	HAL_ADC_Stop(&hadc1);
 80015c4:	4879      	ldr	r0, [pc, #484]	; (80017ac <main+0x5ec>)
 80015c6:	f001 fceb 	bl	8002fa0 <HAL_ADC_Stop>

	  	Adc_select_6_poten();
 80015ca:	f7ff fdd9 	bl	8001180 <Adc_select_6_poten>
	  	HAL_ADC_Start(&hadc1);
 80015ce:	4877      	ldr	r0, [pc, #476]	; (80017ac <main+0x5ec>)
 80015d0:	f001 fc32 	bl	8002e38 <HAL_ADC_Start>
	  	HAL_ADC_PollForConversion(&hadc1, 1000);
 80015d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015d8:	4874      	ldr	r0, [pc, #464]	; (80017ac <main+0x5ec>)
 80015da:	f001 fd14 	bl	8003006 <HAL_ADC_PollForConversion>
	  	raw_value = (double)HAL_ADC_GetValue(&hadc1);
 80015de:	4873      	ldr	r0, [pc, #460]	; (80017ac <main+0x5ec>)
 80015e0:	f001 fd9c 	bl	800311c <HAL_ADC_GetValue>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7fe ff94 	bl	8000514 <__aeabi_ui2d>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	496f      	ldr	r1, [pc, #444]	; (80017b0 <main+0x5f0>)
 80015f2:	e9c1 2300 	strd	r2, r3, [r1]
	  	vol = raw_value*30/4095;
 80015f6:	4b6e      	ldr	r3, [pc, #440]	; (80017b0 <main+0x5f0>)
 80015f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	4b6c      	ldr	r3, [pc, #432]	; (80017b4 <main+0x5f4>)
 8001602:	f7ff f801 	bl	8000608 <__aeabi_dmul>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	a360      	add	r3, pc, #384	; (adr r3, 8001790 <main+0x5d0>)
 8001610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001614:	f7ff f922 	bl	800085c <__aeabi_ddiv>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4610      	mov	r0, r2
 800161e:	4619      	mov	r1, r3
 8001620:	f7ff faa2 	bl	8000b68 <__aeabi_d2iz>
 8001624:	4603      	mov	r3, r0
 8001626:	4a64      	ldr	r2, [pc, #400]	; (80017b8 <main+0x5f8>)
 8001628:	6013      	str	r3, [r2, #0]
	  	//sprintf(volu,"%d\r\n" , vol);
//	  	HAL_UART_Transmit(&huart2,volu ,sizeof(volu),HAL_MAX_DELAY);
	  	Send_cmd(0x06, 0x00, vol);
 800162a:	4b63      	ldr	r3, [pc, #396]	; (80017b8 <main+0x5f8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	461a      	mov	r2, r3
 8001632:	2100      	movs	r1, #0
 8001634:	2006      	movs	r0, #6
 8001636:	f7ff fce7 	bl	8001008 <Send_cmd>
	  	HAL_ADC_Stop(&hadc1);
 800163a:	485c      	ldr	r0, [pc, #368]	; (80017ac <main+0x5ec>)
 800163c:	f001 fcb0 	bl	8002fa0 <HAL_ADC_Stop>

	     if (Ax >= Axmin[0] && Ax <= Axmax[0] && Ay>=Aymin[0] && Ay <= Aymax[0] && Az >= Azmin[0] && Az <= Azmax[0]  && Readvoltage[0] >= V0min[0] && Readvoltage[0] <= V0max[0] && Readvoltage[1] >= V1min[0] && Readvoltage[1] <= V1max[0] && Readvoltage[2] >= V2min[0] && Readvoltage[2] <= V2max[0]) {
 8001640:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001644:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 8001648:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800164c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001650:	f2c0 80ba 	blt.w	80017c8 <main+0x608>
 8001654:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001658:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 800165c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001664:	f200 80b0 	bhi.w	80017c8 <main+0x608>
 8001668:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800166c:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8001670:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001678:	f2c0 80a6 	blt.w	80017c8 <main+0x608>
 800167c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001680:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8001684:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800168c:	f200 809c 	bhi.w	80017c8 <main+0x608>
 8001690:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001694:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8001698:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800169c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a0:	f2c0 8092 	blt.w	80017c8 <main+0x608>
 80016a4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80016a8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80016ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b4:	f200 8088 	bhi.w	80017c8 <main+0x608>
 80016b8:	4b37      	ldr	r3, [pc, #220]	; (8001798 <main+0x5d8>)
 80016ba:	e9d3 4500 	ldrd	r4, r5, [r3]
 80016be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe ff49 	bl	8000558 <__aeabi_f2d>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4620      	mov	r0, r4
 80016cc:	4629      	mov	r1, r5
 80016ce:	f7ff fa21 	bl	8000b14 <__aeabi_dcmpge>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d077      	beq.n	80017c8 <main+0x608>
 80016d8:	4b2f      	ldr	r3, [pc, #188]	; (8001798 <main+0x5d8>)
 80016da:	e9d3 4500 	ldrd	r4, r5, [r3]
 80016de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe ff39 	bl	8000558 <__aeabi_f2d>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4620      	mov	r0, r4
 80016ec:	4629      	mov	r1, r5
 80016ee:	f7ff fa07 	bl	8000b00 <__aeabi_dcmple>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d067      	beq.n	80017c8 <main+0x608>
 80016f8:	4b27      	ldr	r3, [pc, #156]	; (8001798 <main+0x5d8>)
 80016fa:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80016fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe ff29 	bl	8000558 <__aeabi_f2d>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4620      	mov	r0, r4
 800170c:	4629      	mov	r1, r5
 800170e:	f7ff fa01 	bl	8000b14 <__aeabi_dcmpge>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d057      	beq.n	80017c8 <main+0x608>
 8001718:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <main+0x5d8>)
 800171a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800171e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe ff19 	bl	8000558 <__aeabi_f2d>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4620      	mov	r0, r4
 800172c:	4629      	mov	r1, r5
 800172e:	f7ff f9e7 	bl	8000b00 <__aeabi_dcmple>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d047      	beq.n	80017c8 <main+0x608>
 8001738:	4b17      	ldr	r3, [pc, #92]	; (8001798 <main+0x5d8>)
 800173a:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe ff09 	bl	8000558 <__aeabi_f2d>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4620      	mov	r0, r4
 800174c:	4629      	mov	r1, r5
 800174e:	f7ff f9e1 	bl	8000b14 <__aeabi_dcmpge>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d037      	beq.n	80017c8 <main+0x608>
 8001758:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <main+0x5d8>)
 800175a:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe fef9 	bl	8000558 <__aeabi_f2d>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4620      	mov	r0, r4
 800176c:	4629      	mov	r1, r5
 800176e:	f7ff f9c7 	bl	8000b00 <__aeabi_dcmple>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d027      	beq.n	80017c8 <main+0x608>
	  	   sprintf(gesture,"คน \r\n");
 8001778:	4910      	ldr	r1, [pc, #64]	; (80017bc <main+0x5fc>)
 800177a:	4811      	ldr	r0, [pc, #68]	; (80017c0 <main+0x600>)
 800177c:	f005 fdf2 	bl	8007364 <siprintf>
	  	   newvoice =1;
 8001780:	2301      	movs	r3, #1
 8001782:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	  	   result = 0x01;
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <main+0x604>)
 8001788:	2201      	movs	r2, #1
 800178a:	701a      	strb	r2, [r3, #0]
 800178c:	e21e      	b.n	8001bcc <main+0xa0c>
 800178e:	bf00      	nop
 8001790:	00000000 	.word	0x00000000
 8001794:	40affe00 	.word	0x40affe00
 8001798:	20000428 	.word	0x20000428
 800179c:	20000440 	.word	0x20000440
 80017a0:	0800b628 	.word	0x0800b628
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000384 	.word	0x20000384
 80017ac:	200002a4 	.word	0x200002a4
 80017b0:	20000420 	.word	0x20000420
 80017b4:	403e0000 	.word	0x403e0000
 80017b8:	200005f8 	.word	0x200005f8
 80017bc:	0800b634 	.word	0x0800b634
 80017c0:	20000530 	.word	0x20000530
 80017c4:	20000014 	.word	0x20000014
	     }
	     else if (Ax >= Axmin[1] && Ax <= Axmax[1] && Ay>=Aymin[1] && Ay <= Aymax[1] && Az >= Azmin[1] && Az <= Azmax[1]  && Readvoltage[0] >= V0min[1] && Readvoltage[0] <= V0max[1] && Readvoltage[1] >= V1min[1] && Readvoltage[1] <= V1max[1] && Readvoltage[2] >= V2min[1] && Readvoltage[2] <= V2max[1] ){
 80017c8:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80017cc:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 80017d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d8:	f2c0 809a 	blt.w	8001910 <main+0x750>
 80017dc:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80017e0:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 80017e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ec:	f200 8090 	bhi.w	8001910 <main+0x750>
 80017f0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80017f4:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 80017f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001800:	f2c0 8086 	blt.w	8001910 <main+0x750>
 8001804:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001808:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 800180c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001814:	d87c      	bhi.n	8001910 <main+0x750>
 8001816:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800181a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800181e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001826:	db73      	blt.n	8001910 <main+0x750>
 8001828:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800182c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8001830:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001838:	d86a      	bhi.n	8001910 <main+0x750>
 800183a:	4b88      	ldr	r3, [pc, #544]	; (8001a5c <main+0x89c>)
 800183c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fe88 	bl	8000558 <__aeabi_f2d>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4620      	mov	r0, r4
 800184e:	4629      	mov	r1, r5
 8001850:	f7ff f960 	bl	8000b14 <__aeabi_dcmpge>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d05a      	beq.n	8001910 <main+0x750>
 800185a:	4b80      	ldr	r3, [pc, #512]	; (8001a5c <main+0x89c>)
 800185c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fe78 	bl	8000558 <__aeabi_f2d>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4620      	mov	r0, r4
 800186e:	4629      	mov	r1, r5
 8001870:	f7ff f946 	bl	8000b00 <__aeabi_dcmple>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d04a      	beq.n	8001910 <main+0x750>
 800187a:	4b78      	ldr	r3, [pc, #480]	; (8001a5c <main+0x89c>)
 800187c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fe68 	bl	8000558 <__aeabi_f2d>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4620      	mov	r0, r4
 800188e:	4629      	mov	r1, r5
 8001890:	f7ff f940 	bl	8000b14 <__aeabi_dcmpge>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d03a      	beq.n	8001910 <main+0x750>
 800189a:	4b70      	ldr	r3, [pc, #448]	; (8001a5c <main+0x89c>)
 800189c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80018a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fe58 	bl	8000558 <__aeabi_f2d>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4620      	mov	r0, r4
 80018ae:	4629      	mov	r1, r5
 80018b0:	f7ff f926 	bl	8000b00 <__aeabi_dcmple>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d02a      	beq.n	8001910 <main+0x750>
 80018ba:	4b68      	ldr	r3, [pc, #416]	; (8001a5c <main+0x89c>)
 80018bc:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe fe48 	bl	8000558 <__aeabi_f2d>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4620      	mov	r0, r4
 80018ce:	4629      	mov	r1, r5
 80018d0:	f7ff f920 	bl	8000b14 <__aeabi_dcmpge>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d01a      	beq.n	8001910 <main+0x750>
 80018da:	4b60      	ldr	r3, [pc, #384]	; (8001a5c <main+0x89c>)
 80018dc:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fe38 	bl	8000558 <__aeabi_f2d>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4620      	mov	r0, r4
 80018ee:	4629      	mov	r1, r5
 80018f0:	f7ff f906 	bl	8000b00 <__aeabi_dcmple>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00a      	beq.n	8001910 <main+0x750>
	  	   sprintf(gesture,"สวัสดี \r\n");
 80018fa:	4959      	ldr	r1, [pc, #356]	; (8001a60 <main+0x8a0>)
 80018fc:	4859      	ldr	r0, [pc, #356]	; (8001a64 <main+0x8a4>)
 80018fe:	f005 fd31 	bl	8007364 <siprintf>
	  	   newvoice =2;
 8001902:	2302      	movs	r3, #2
 8001904:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	  	   result = 0x04;
 8001908:	4b57      	ldr	r3, [pc, #348]	; (8001a68 <main+0x8a8>)
 800190a:	2204      	movs	r2, #4
 800190c:	701a      	strb	r2, [r3, #0]
 800190e:	e15d      	b.n	8001bcc <main+0xa0c>
	     }
	     else if (Ax >= Axmin[2] && Ax <= Axmax[2] && Ay>=Aymin[2] && Ay <= Aymax[2] && Az >= Azmin[2] && Az <= Azmax[2]  && Readvoltage[0] >= V0min[2] && Readvoltage[0] <= V0max[2] && Readvoltage[1] >= V1min[2] && Readvoltage[1] <= V1max[2] && Readvoltage[2] >= V2min[2] && Readvoltage[2] <= V2max[2] ){
 8001910:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8001914:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 8001918:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800191c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001920:	f2c0 80a6 	blt.w	8001a70 <main+0x8b0>
 8001924:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001928:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 800192c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001934:	f200 809c 	bhi.w	8001a70 <main+0x8b0>
 8001938:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800193c:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8001940:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001948:	f2c0 8092 	blt.w	8001a70 <main+0x8b0>
 800194c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001950:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8001954:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195c:	f200 8088 	bhi.w	8001a70 <main+0x8b0>
 8001960:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001964:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8001968:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800196c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001970:	db7e      	blt.n	8001a70 <main+0x8b0>
 8001972:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001976:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800197a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800197e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001982:	d875      	bhi.n	8001a70 <main+0x8b0>
 8001984:	4b35      	ldr	r3, [pc, #212]	; (8001a5c <main+0x89c>)
 8001986:	e9d3 4500 	ldrd	r4, r5, [r3]
 800198a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fde3 	bl	8000558 <__aeabi_f2d>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4620      	mov	r0, r4
 8001998:	4629      	mov	r1, r5
 800199a:	f7ff f8bb 	bl	8000b14 <__aeabi_dcmpge>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d065      	beq.n	8001a70 <main+0x8b0>
 80019a4:	4b2d      	ldr	r3, [pc, #180]	; (8001a5c <main+0x89c>)
 80019a6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80019aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fdd3 	bl	8000558 <__aeabi_f2d>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4620      	mov	r0, r4
 80019b8:	4629      	mov	r1, r5
 80019ba:	f7ff f8a1 	bl	8000b00 <__aeabi_dcmple>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d055      	beq.n	8001a70 <main+0x8b0>
 80019c4:	4b25      	ldr	r3, [pc, #148]	; (8001a5c <main+0x89c>)
 80019c6:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80019ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7fe fdc3 	bl	8000558 <__aeabi_f2d>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4620      	mov	r0, r4
 80019d8:	4629      	mov	r1, r5
 80019da:	f7ff f89b 	bl	8000b14 <__aeabi_dcmpge>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d045      	beq.n	8001a70 <main+0x8b0>
 80019e4:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <main+0x89c>)
 80019e6:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80019ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7fe fdb3 	bl	8000558 <__aeabi_f2d>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4620      	mov	r0, r4
 80019f8:	4629      	mov	r1, r5
 80019fa:	f7ff f881 	bl	8000b00 <__aeabi_dcmple>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d035      	beq.n	8001a70 <main+0x8b0>
 8001a04:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <main+0x89c>)
 8001a06:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fda3 	bl	8000558 <__aeabi_f2d>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4620      	mov	r0, r4
 8001a18:	4629      	mov	r1, r5
 8001a1a:	f7ff f87b 	bl	8000b14 <__aeabi_dcmpge>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d025      	beq.n	8001a70 <main+0x8b0>
 8001a24:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <main+0x89c>)
 8001a26:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fd93 	bl	8000558 <__aeabi_f2d>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4620      	mov	r0, r4
 8001a38:	4629      	mov	r1, r5
 8001a3a:	f7ff f861 	bl	8000b00 <__aeabi_dcmple>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d015      	beq.n	8001a70 <main+0x8b0>
	  	   sprintf(gesture,"อันตราย \r\n");
 8001a44:	4909      	ldr	r1, [pc, #36]	; (8001a6c <main+0x8ac>)
 8001a46:	4807      	ldr	r0, [pc, #28]	; (8001a64 <main+0x8a4>)
 8001a48:	f005 fc8c 	bl	8007364 <siprintf>
	  	   newvoice =3;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	  	   result = 0x02;
 8001a52:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <main+0x8a8>)
 8001a54:	2202      	movs	r2, #2
 8001a56:	701a      	strb	r2, [r3, #0]
 8001a58:	e0b8      	b.n	8001bcc <main+0xa0c>
 8001a5a:	bf00      	nop
 8001a5c:	20000428 	.word	0x20000428
 8001a60:	0800b640 	.word	0x0800b640
 8001a64:	20000530 	.word	0x20000530
 8001a68:	20000014 	.word	0x20000014
 8001a6c:	0800b658 	.word	0x0800b658
	     }

	     else if (Ax >= Axmin[3] && Ax <= Axmax[3] && Ay>=Aymin[3] && Ay <= Aymax[3] && Az >= Azmin[3] && Az <= Azmax[3]  && Readvoltage[0] >= V0min[3] && Readvoltage[0] <= V0max[3] && Readvoltage[1] >= V1min[3] && Readvoltage[1] <= V1max[3] && Readvoltage[2] >= V2min[3] && Readvoltage[2] <= V2max[3] ){
 8001a70:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001a74:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 8001a78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a80:	f2c0 809a 	blt.w	8001bb8 <main+0x9f8>
 8001a84:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001a88:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 8001a8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a94:	f200 8090 	bhi.w	8001bb8 <main+0x9f8>
 8001a98:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001a9c:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8001aa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa8:	f2c0 8086 	blt.w	8001bb8 <main+0x9f8>
 8001aac:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001ab0:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8001ab4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abc:	d87c      	bhi.n	8001bb8 <main+0x9f8>
 8001abe:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001ac2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8001ac6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ace:	db73      	blt.n	8001bb8 <main+0x9f8>
 8001ad0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001ad4:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8001ad8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae0:	d86a      	bhi.n	8001bb8 <main+0x9f8>
 8001ae2:	4b7d      	ldr	r3, [pc, #500]	; (8001cd8 <main+0xb18>)
 8001ae4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe fd34 	bl	8000558 <__aeabi_f2d>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4620      	mov	r0, r4
 8001af6:	4629      	mov	r1, r5
 8001af8:	f7ff f80c 	bl	8000b14 <__aeabi_dcmpge>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d05a      	beq.n	8001bb8 <main+0x9f8>
 8001b02:	4b75      	ldr	r3, [pc, #468]	; (8001cd8 <main+0xb18>)
 8001b04:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fd24 	bl	8000558 <__aeabi_f2d>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4620      	mov	r0, r4
 8001b16:	4629      	mov	r1, r5
 8001b18:	f7fe fff2 	bl	8000b00 <__aeabi_dcmple>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d04a      	beq.n	8001bb8 <main+0x9f8>
 8001b22:	4b6d      	ldr	r3, [pc, #436]	; (8001cd8 <main+0xb18>)
 8001b24:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fd14 	bl	8000558 <__aeabi_f2d>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4620      	mov	r0, r4
 8001b36:	4629      	mov	r1, r5
 8001b38:	f7fe ffec 	bl	8000b14 <__aeabi_dcmpge>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d03a      	beq.n	8001bb8 <main+0x9f8>
 8001b42:	4b65      	ldr	r3, [pc, #404]	; (8001cd8 <main+0xb18>)
 8001b44:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fd04 	bl	8000558 <__aeabi_f2d>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4620      	mov	r0, r4
 8001b56:	4629      	mov	r1, r5
 8001b58:	f7fe ffd2 	bl	8000b00 <__aeabi_dcmple>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d02a      	beq.n	8001bb8 <main+0x9f8>
 8001b62:	4b5d      	ldr	r3, [pc, #372]	; (8001cd8 <main+0xb18>)
 8001b64:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe fcf4 	bl	8000558 <__aeabi_f2d>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4620      	mov	r0, r4
 8001b76:	4629      	mov	r1, r5
 8001b78:	f7fe ffcc 	bl	8000b14 <__aeabi_dcmpge>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d01a      	beq.n	8001bb8 <main+0x9f8>
 8001b82:	4b55      	ldr	r3, [pc, #340]	; (8001cd8 <main+0xb18>)
 8001b84:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fce4 	bl	8000558 <__aeabi_f2d>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4620      	mov	r0, r4
 8001b96:	4629      	mov	r1, r5
 8001b98:	f7fe ffb2 	bl	8000b00 <__aeabi_dcmple>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00a      	beq.n	8001bb8 <main+0x9f8>
	  	   sprintf(gesture,"เกรงใจ \r\n");
 8001ba2:	494e      	ldr	r1, [pc, #312]	; (8001cdc <main+0xb1c>)
 8001ba4:	484e      	ldr	r0, [pc, #312]	; (8001ce0 <main+0xb20>)
 8001ba6:	f005 fbdd 	bl	8007364 <siprintf>
	  	   newvoice =4;
 8001baa:	2304      	movs	r3, #4
 8001bac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	  	   result = 0x03;
 8001bb0:	4b4c      	ldr	r3, [pc, #304]	; (8001ce4 <main+0xb24>)
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	701a      	strb	r2, [r3, #0]
 8001bb6:	e009      	b.n	8001bcc <main+0xa0c>
	     }
	     else {
	  	   sprintf(gesture,"อ่อน \r\n");
 8001bb8:	494b      	ldr	r1, [pc, #300]	; (8001ce8 <main+0xb28>)
 8001bba:	4849      	ldr	r0, [pc, #292]	; (8001ce0 <main+0xb20>)
 8001bbc:	f005 fbd2 	bl	8007364 <siprintf>
	  	   newvoice =5;
 8001bc0:	2305      	movs	r3, #5
 8001bc2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	  	   result = 0x05;
 8001bc6:	4b47      	ldr	r3, [pc, #284]	; (8001ce4 <main+0xb24>)
 8001bc8:	2205      	movs	r2, #5
 8001bca:	701a      	strb	r2, [r3, #0]
	     }
	 sprintf(val,"Ax=%.2f\t  Ay=%.2f\t Az=%.2f\t %d\t",Ax,Ay,Az,result);
 8001bcc:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8001bd0:	f7fe fcc2 	bl	8000558 <__aeabi_f2d>
 8001bd4:	4680      	mov	r8, r0
 8001bd6:	4689      	mov	r9, r1
 8001bd8:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8001bdc:	f7fe fcbc 	bl	8000558 <__aeabi_f2d>
 8001be0:	4604      	mov	r4, r0
 8001be2:	460d      	mov	r5, r1
 8001be4:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001be8:	f7fe fcb6 	bl	8000558 <__aeabi_f2d>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	493c      	ldr	r1, [pc, #240]	; (8001ce4 <main+0xb24>)
 8001bf2:	7809      	ldrb	r1, [r1, #0]
 8001bf4:	9104      	str	r1, [sp, #16]
 8001bf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001bfa:	e9cd 4500 	strd	r4, r5, [sp]
 8001bfe:	4642      	mov	r2, r8
 8001c00:	464b      	mov	r3, r9
 8001c02:	493a      	ldr	r1, [pc, #232]	; (8001cec <main+0xb2c>)
 8001c04:	483a      	ldr	r0, [pc, #232]	; (8001cf0 <main+0xb30>)
 8001c06:	f005 fbad 	bl	8007364 <siprintf>
	 HAL_UART_Transmit(&huart2,val,strlen((char*)val),HAL_MAX_DELAY);
 8001c0a:	4839      	ldr	r0, [pc, #228]	; (8001cf0 <main+0xb30>)
 8001c0c:	f7fe fae8 	bl	80001e0 <strlen>
 8001c10:	4603      	mov	r3, r0
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	f04f 33ff 	mov.w	r3, #4294967295
 8001c18:	4935      	ldr	r1, [pc, #212]	; (8001cf0 <main+0xb30>)
 8001c1a:	4836      	ldr	r0, [pc, #216]	; (8001cf4 <main+0xb34>)
 8001c1c:	f003 fc87 	bl	800552e <HAL_UART_Transmit>
	  //----------------------------------------------------------//
	  Send_cmd(0x42, 0, 0);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2100      	movs	r1, #0
 8001c24:	2042      	movs	r0, #66	; 0x42
 8001c26:	f7ff f9ef 	bl	8001008 <Send_cmd>
	  HAL_UART_Receive(&huart1,urtrx,sizeof(urtrx),HAL_MAX_DELAY);
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2e:	220a      	movs	r2, #10
 8001c30:	4931      	ldr	r1, [pc, #196]	; (8001cf8 <main+0xb38>)
 8001c32:	4832      	ldr	r0, [pc, #200]	; (8001cfc <main+0xb3c>)
 8001c34:	f003 fd0d 	bl	8005652 <HAL_UART_Receive>
	  sprintf(buf,"%d\r\n",urtrx[7]);
 8001c38:	4b2f      	ldr	r3, [pc, #188]	; (8001cf8 <main+0xb38>)
 8001c3a:	79db      	ldrb	r3, [r3, #7]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4930      	ldr	r1, [pc, #192]	; (8001d00 <main+0xb40>)
 8001c40:	4830      	ldr	r0, [pc, #192]	; (8001d04 <main+0xb44>)
 8001c42:	f005 fb8f 	bl	8007364 <siprintf>
	  if(buf[0] == '0' && newvoice != oldvoice ){ //not play yet && newvoice != oldvoice
 8001c46:	4b2f      	ldr	r3, [pc, #188]	; (8001d04 <main+0xb44>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b30      	cmp	r3, #48	; 0x30
 8001c4c:	d12b      	bne.n	8001ca6 <main+0xae6>
 8001c4e:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d025      	beq.n	8001ca6 <main+0xae6>
		  sprintf(buf,"%d\r\n",result);
 8001c5a:	4b22      	ldr	r3, [pc, #136]	; (8001ce4 <main+0xb24>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	4927      	ldr	r1, [pc, #156]	; (8001d00 <main+0xb40>)
 8001c62:	4828      	ldr	r0, [pc, #160]	; (8001d04 <main+0xb44>)
 8001c64:	f005 fb7e 	bl	8007364 <siprintf>
//		  HAL_UART_Transmit(&huart2,buf,sizeof(buf),HAL_MAX_DELAY);
		  Send_cmd(0x03,0x00, result);
 8001c68:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <main+0xb24>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	2100      	movs	r1, #0
 8001c70:	2003      	movs	r0, #3
 8001c72:	f7ff f9c9 	bl	8001008 <Send_cmd>
		  cou++;
 8001c76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		  sprintf(couu,"0 ,%d\r\n" ,cou);
 8001c80:	463b      	mov	r3, r7
 8001c82:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001c86:	4920      	ldr	r1, [pc, #128]	; (8001d08 <main+0xb48>)
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f005 fb6b 	bl	8007364 <siprintf>
		  HAL_UART_Transmit(&huart2,couu ,sizeof(couu),HAL_MAX_DELAY);
 8001c8e:	4639      	mov	r1, r7
 8001c90:	f04f 33ff 	mov.w	r3, #4294967295
 8001c94:	220f      	movs	r2, #15
 8001c96:	4817      	ldr	r0, [pc, #92]	; (8001cf4 <main+0xb34>)
 8001c98:	f003 fc49 	bl	800552e <HAL_UART_Transmit>
		  oldvoice = newvoice;
 8001c9c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001ca0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001ca4:	e012      	b.n	8001ccc <main+0xb0c>
	  }
	  else if (buf[0] == '1'){ //playing
 8001ca6:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <main+0xb44>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b31      	cmp	r3, #49	; 0x31
 8001cac:	d107      	bne.n	8001cbe <main+0xafe>
		  HAL_UART_Transmit(&huart2,"1\r\n" ,sizeof("1\r\n"),HAL_MAX_DELAY);
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	4915      	ldr	r1, [pc, #84]	; (8001d0c <main+0xb4c>)
 8001cb6:	480f      	ldr	r0, [pc, #60]	; (8001cf4 <main+0xb34>)
 8001cb8:	f003 fc39 	bl	800552e <HAL_UART_Transmit>
 8001cbc:	e006      	b.n	8001ccc <main+0xb0c>
	  }
	  else {
		  HAL_UART_Transmit(&huart2,"0\r\n" ,sizeof("0\r\n"),HAL_MAX_DELAY);
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc2:	2204      	movs	r2, #4
 8001cc4:	4912      	ldr	r1, [pc, #72]	; (8001d10 <main+0xb50>)
 8001cc6:	480b      	ldr	r0, [pc, #44]	; (8001cf4 <main+0xb34>)
 8001cc8:	f003 fc31 	bl	800552e <HAL_UART_Transmit>
	}
	  HAL_Delay(1500);
 8001ccc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001cd0:	f001 f84a 	bl	8002d68 <HAL_Delay>
  {
 8001cd4:	f7ff baec 	b.w	80012b0 <main+0xf0>
 8001cd8:	20000428 	.word	0x20000428
 8001cdc:	0800b674 	.word	0x0800b674
 8001ce0:	20000530 	.word	0x20000530
 8001ce4:	20000014 	.word	0x20000014
 8001ce8:	0800b68c 	.word	0x0800b68c
 8001cec:	0800b69c 	.word	0x0800b69c
 8001cf0:	20000468 	.word	0x20000468
 8001cf4:	20000384 	.word	0x20000384
 8001cf8:	2000045c 	.word	0x2000045c
 8001cfc:	20000340 	.word	0x20000340
 8001d00:	0800b6bc 	.word	0x0800b6bc
 8001d04:	20000458 	.word	0x20000458
 8001d08:	0800b6c4 	.word	0x0800b6c4
 8001d0c:	0800b6cc 	.word	0x0800b6cc
 8001d10:	0800b6d0 	.word	0x0800b6d0

08001d14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b094      	sub	sp, #80	; 0x50
 8001d18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d1a:	f107 0320 	add.w	r3, r7, #32
 8001d1e:	2230      	movs	r2, #48	; 0x30
 8001d20:	2100      	movs	r1, #0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f004 fc96 	bl	8006654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d28:	f107 030c 	add.w	r3, r7, #12
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	4b28      	ldr	r3, [pc, #160]	; (8001de0 <SystemClock_Config+0xcc>)
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	4a27      	ldr	r2, [pc, #156]	; (8001de0 <SystemClock_Config+0xcc>)
 8001d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d46:	6413      	str	r3, [r2, #64]	; 0x40
 8001d48:	4b25      	ldr	r3, [pc, #148]	; (8001de0 <SystemClock_Config+0xcc>)
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d54:	2300      	movs	r3, #0
 8001d56:	607b      	str	r3, [r7, #4]
 8001d58:	4b22      	ldr	r3, [pc, #136]	; (8001de4 <SystemClock_Config+0xd0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a21      	ldr	r2, [pc, #132]	; (8001de4 <SystemClock_Config+0xd0>)
 8001d5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	4b1f      	ldr	r3, [pc, #124]	; (8001de4 <SystemClock_Config+0xd0>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d70:	2302      	movs	r3, #2
 8001d72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d74:	2301      	movs	r3, #1
 8001d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d78:	2310      	movs	r3, #16
 8001d7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d80:	2300      	movs	r3, #0
 8001d82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001d84:	2310      	movs	r3, #16
 8001d86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d88:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001d8c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d8e:	2304      	movs	r3, #4
 8001d90:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d92:	2304      	movs	r3, #4
 8001d94:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d96:	f107 0320 	add.w	r3, r7, #32
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f002 fee2 	bl	8004b64 <HAL_RCC_OscConfig>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001da6:	f000 f94d 	bl	8002044 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001daa:	230f      	movs	r3, #15
 8001dac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dae:	2302      	movs	r3, #2
 8001db0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	2102      	movs	r1, #2
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f003 f944 	bl	8005054 <HAL_RCC_ClockConfig>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001dd2:	f000 f937 	bl	8002044 <Error_Handler>
  }
}
 8001dd6:	bf00      	nop
 8001dd8:	3750      	adds	r7, #80	; 0x50
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40007000 	.word	0x40007000

08001de8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001dee:	463b      	mov	r3, r7
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001dfa:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <MX_ADC1_Init+0x98>)
 8001dfc:	4a21      	ldr	r2, [pc, #132]	; (8001e84 <MX_ADC1_Init+0x9c>)
 8001dfe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e00:	4b1f      	ldr	r3, [pc, #124]	; (8001e80 <MX_ADC1_Init+0x98>)
 8001e02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e06:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e08:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <MX_ADC1_Init+0x98>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001e0e:	4b1c      	ldr	r3, [pc, #112]	; (8001e80 <MX_ADC1_Init+0x98>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e14:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <MX_ADC1_Init+0x98>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e1a:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <MX_ADC1_Init+0x98>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e22:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <MX_ADC1_Init+0x98>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e28:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <MX_ADC1_Init+0x98>)
 8001e2a:	4a17      	ldr	r2, [pc, #92]	; (8001e88 <MX_ADC1_Init+0xa0>)
 8001e2c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e2e:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <MX_ADC1_Init+0x98>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <MX_ADC1_Init+0x98>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e3a:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <MX_ADC1_Init+0x98>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e42:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <MX_ADC1_Init+0x98>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e48:	480d      	ldr	r0, [pc, #52]	; (8001e80 <MX_ADC1_Init+0x98>)
 8001e4a:	f000 ffb1 	bl	8002db0 <HAL_ADC_Init>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001e54:	f000 f8f6 	bl	8002044 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e64:	463b      	mov	r3, r7
 8001e66:	4619      	mov	r1, r3
 8001e68:	4805      	ldr	r0, [pc, #20]	; (8001e80 <MX_ADC1_Init+0x98>)
 8001e6a:	f001 f965 	bl	8003138 <HAL_ADC_ConfigChannel>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001e74:	f000 f8e6 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e78:	bf00      	nop
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	200002a4 	.word	0x200002a4
 8001e84:	40012000 	.word	0x40012000
 8001e88:	0f000001 	.word	0x0f000001

08001e8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <MX_I2C1_Init+0x50>)
 8001e92:	4a13      	ldr	r2, [pc, #76]	; (8001ee0 <MX_I2C1_Init+0x54>)
 8001e94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e96:	4b11      	ldr	r3, [pc, #68]	; (8001edc <MX_I2C1_Init+0x50>)
 8001e98:	4a12      	ldr	r2, [pc, #72]	; (8001ee4 <MX_I2C1_Init+0x58>)
 8001e9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e9c:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <MX_I2C1_Init+0x50>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <MX_I2C1_Init+0x50>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <MX_I2C1_Init+0x50>)
 8001eaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001eae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001eb0:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <MX_I2C1_Init+0x50>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001eb6:	4b09      	ldr	r3, [pc, #36]	; (8001edc <MX_I2C1_Init+0x50>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ebc:	4b07      	ldr	r3, [pc, #28]	; (8001edc <MX_I2C1_Init+0x50>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <MX_I2C1_Init+0x50>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ec8:	4804      	ldr	r0, [pc, #16]	; (8001edc <MX_I2C1_Init+0x50>)
 8001eca:	f001 fe8b 	bl	8003be4 <HAL_I2C_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ed4:	f000 f8b6 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	200002ec 	.word	0x200002ec
 8001ee0:	40005400 	.word	0x40005400
 8001ee4:	000186a0 	.word	0x000186a0

08001ee8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001eec:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <MX_USART1_UART_Init+0x4c>)
 8001eee:	4a12      	ldr	r2, [pc, #72]	; (8001f38 <MX_USART1_UART_Init+0x50>)
 8001ef0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001ef2:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <MX_USART1_UART_Init+0x4c>)
 8001ef4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ef8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <MX_USART1_UART_Init+0x4c>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f00:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <MX_USART1_UART_Init+0x4c>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f06:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <MX_USART1_UART_Init+0x4c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f0c:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <MX_USART1_UART_Init+0x4c>)
 8001f0e:	220c      	movs	r2, #12
 8001f10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f12:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <MX_USART1_UART_Init+0x4c>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <MX_USART1_UART_Init+0x4c>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f1e:	4805      	ldr	r0, [pc, #20]	; (8001f34 <MX_USART1_UART_Init+0x4c>)
 8001f20:	f003 fab8 	bl	8005494 <HAL_UART_Init>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f2a:	f000 f88b 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000340 	.word	0x20000340
 8001f38:	40011000 	.word	0x40011000

08001f3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f40:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <MX_USART2_UART_Init+0x4c>)
 8001f42:	4a12      	ldr	r2, [pc, #72]	; (8001f8c <MX_USART2_UART_Init+0x50>)
 8001f44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <MX_USART2_UART_Init+0x4c>)
 8001f48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <MX_USART2_UART_Init+0x4c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <MX_USART2_UART_Init+0x4c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <MX_USART2_UART_Init+0x4c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f60:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <MX_USART2_UART_Init+0x4c>)
 8001f62:	220c      	movs	r2, #12
 8001f64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f66:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <MX_USART2_UART_Init+0x4c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <MX_USART2_UART_Init+0x4c>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f72:	4805      	ldr	r0, [pc, #20]	; (8001f88 <MX_USART2_UART_Init+0x4c>)
 8001f74:	f003 fa8e 	bl	8005494 <HAL_UART_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f7e:	f000 f861 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000384 	.word	0x20000384
 8001f8c:	40004400 	.word	0x40004400

08001f90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08a      	sub	sp, #40	; 0x28
 8001f94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f96:	f107 0314 	add.w	r3, r7, #20
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	609a      	str	r2, [r3, #8]
 8001fa2:	60da      	str	r2, [r3, #12]
 8001fa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	4b24      	ldr	r3, [pc, #144]	; (800203c <MX_GPIO_Init+0xac>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a23      	ldr	r2, [pc, #140]	; (800203c <MX_GPIO_Init+0xac>)
 8001fb0:	f043 0304 	orr.w	r3, r3, #4
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b21      	ldr	r3, [pc, #132]	; (800203c <MX_GPIO_Init+0xac>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	; (800203c <MX_GPIO_Init+0xac>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a1c      	ldr	r2, [pc, #112]	; (800203c <MX_GPIO_Init+0xac>)
 8001fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b1a      	ldr	r3, [pc, #104]	; (800203c <MX_GPIO_Init+0xac>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	4b16      	ldr	r3, [pc, #88]	; (800203c <MX_GPIO_Init+0xac>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	4a15      	ldr	r2, [pc, #84]	; (800203c <MX_GPIO_Init+0xac>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6313      	str	r3, [r2, #48]	; 0x30
 8001fee:	4b13      	ldr	r3, [pc, #76]	; (800203c <MX_GPIO_Init+0xac>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	607b      	str	r3, [r7, #4]
 8001ffe:	4b0f      	ldr	r3, [pc, #60]	; (800203c <MX_GPIO_Init+0xac>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a0e      	ldr	r2, [pc, #56]	; (800203c <MX_GPIO_Init+0xac>)
 8002004:	f043 0302 	orr.w	r3, r3, #2
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b0c      	ldr	r3, [pc, #48]	; (800203c <MX_GPIO_Init+0xac>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	607b      	str	r3, [r7, #4]
 8002014:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002016:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800201a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800201c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002026:	f107 0314 	add.w	r3, r7, #20
 800202a:	4619      	mov	r1, r3
 800202c:	4804      	ldr	r0, [pc, #16]	; (8002040 <MX_GPIO_Init+0xb0>)
 800202e:	f001 fc55 	bl	80038dc <HAL_GPIO_Init>

}
 8002032:	bf00      	nop
 8002034:	3728      	adds	r7, #40	; 0x28
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40023800 	.word	0x40023800
 8002040:	40020800 	.word	0x40020800

08002044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002048:	b672      	cpsid	i
}
 800204a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800204c:	e7fe      	b.n	800204c <Error_Handler+0x8>

0800204e <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b088      	sub	sp, #32
 8002052:	af04      	add	r7, sp, #16
 8002054:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002056:	2364      	movs	r3, #100	; 0x64
 8002058:	9302      	str	r3, [sp, #8]
 800205a:	2301      	movs	r3, #1
 800205c:	9301      	str	r3, [sp, #4]
 800205e:	f107 030f 	add.w	r3, r7, #15
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	2301      	movs	r3, #1
 8002066:	2275      	movs	r2, #117	; 0x75
 8002068:	21d0      	movs	r1, #208	; 0xd0
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f001 fff8 	bl	8004060 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	2b68      	cmp	r3, #104	; 0x68
 8002074:	d13d      	bne.n	80020f2 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800207a:	2364      	movs	r3, #100	; 0x64
 800207c:	9302      	str	r3, [sp, #8]
 800207e:	2301      	movs	r3, #1
 8002080:	9301      	str	r3, [sp, #4]
 8002082:	f107 030e 	add.w	r3, r7, #14
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	2301      	movs	r3, #1
 800208a:	226b      	movs	r2, #107	; 0x6b
 800208c:	21d0      	movs	r1, #208	; 0xd0
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f001 feec 	bl	8003e6c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8002094:	2307      	movs	r3, #7
 8002096:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002098:	2364      	movs	r3, #100	; 0x64
 800209a:	9302      	str	r3, [sp, #8]
 800209c:	2301      	movs	r3, #1
 800209e:	9301      	str	r3, [sp, #4]
 80020a0:	f107 030e 	add.w	r3, r7, #14
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	2301      	movs	r3, #1
 80020a8:	2219      	movs	r2, #25
 80020aa:	21d0      	movs	r1, #208	; 0xd0
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f001 fedd 	bl	8003e6c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80020b2:	2300      	movs	r3, #0
 80020b4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80020b6:	2364      	movs	r3, #100	; 0x64
 80020b8:	9302      	str	r3, [sp, #8]
 80020ba:	2301      	movs	r3, #1
 80020bc:	9301      	str	r3, [sp, #4]
 80020be:	f107 030e 	add.w	r3, r7, #14
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	2301      	movs	r3, #1
 80020c6:	221c      	movs	r2, #28
 80020c8:	21d0      	movs	r1, #208	; 0xd0
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f001 fece 	bl	8003e6c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80020d0:	2300      	movs	r3, #0
 80020d2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80020d4:	2364      	movs	r3, #100	; 0x64
 80020d6:	9302      	str	r3, [sp, #8]
 80020d8:	2301      	movs	r3, #1
 80020da:	9301      	str	r3, [sp, #4]
 80020dc:	f107 030e 	add.w	r3, r7, #14
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	2301      	movs	r3, #1
 80020e4:	221b      	movs	r2, #27
 80020e6:	21d0      	movs	r1, #208	; 0xd0
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f001 febf 	bl	8003e6c <HAL_I2C_Mem_Write>
        return 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e000      	b.n	80020f4 <MPU6050_Init+0xa6>
    }
    return 1;
 80020f2:	2301      	movs	r3, #1
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	0000      	movs	r0, r0
	...

08002100 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8002100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002104:	b094      	sub	sp, #80	; 0x50
 8002106:	af04      	add	r7, sp, #16
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800210c:	2364      	movs	r3, #100	; 0x64
 800210e:	9302      	str	r3, [sp, #8]
 8002110:	230e      	movs	r3, #14
 8002112:	9301      	str	r3, [sp, #4]
 8002114:	f107 0308 	add.w	r3, r7, #8
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	2301      	movs	r3, #1
 800211c:	223b      	movs	r2, #59	; 0x3b
 800211e:	21d0      	movs	r1, #208	; 0xd0
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f001 ff9d 	bl	8004060 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8002126:	7a3b      	ldrb	r3, [r7, #8]
 8002128:	021b      	lsls	r3, r3, #8
 800212a:	b21a      	sxth	r2, r3
 800212c:	7a7b      	ldrb	r3, [r7, #9]
 800212e:	b21b      	sxth	r3, r3
 8002130:	4313      	orrs	r3, r2
 8002132:	b21a      	sxth	r2, r3
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8002138:	7abb      	ldrb	r3, [r7, #10]
 800213a:	021b      	lsls	r3, r3, #8
 800213c:	b21a      	sxth	r2, r3
 800213e:	7afb      	ldrb	r3, [r7, #11]
 8002140:	b21b      	sxth	r3, r3
 8002142:	4313      	orrs	r3, r2
 8002144:	b21a      	sxth	r2, r3
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800214a:	7b3b      	ldrb	r3, [r7, #12]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	b21a      	sxth	r2, r3
 8002150:	7b7b      	ldrb	r3, [r7, #13]
 8002152:	b21b      	sxth	r3, r3
 8002154:	4313      	orrs	r3, r2
 8002156:	b21a      	sxth	r2, r3
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 800215c:	7bbb      	ldrb	r3, [r7, #14]
 800215e:	021b      	lsls	r3, r3, #8
 8002160:	b21a      	sxth	r2, r3
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	b21b      	sxth	r3, r3
 8002166:	4313      	orrs	r3, r2
 8002168:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 800216a:	7c3b      	ldrb	r3, [r7, #16]
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	b21a      	sxth	r2, r3
 8002170:	7c7b      	ldrb	r3, [r7, #17]
 8002172:	b21b      	sxth	r3, r3
 8002174:	4313      	orrs	r3, r2
 8002176:	b21a      	sxth	r2, r3
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 800217c:	7cbb      	ldrb	r3, [r7, #18]
 800217e:	021b      	lsls	r3, r3, #8
 8002180:	b21a      	sxth	r2, r3
 8002182:	7cfb      	ldrb	r3, [r7, #19]
 8002184:	b21b      	sxth	r3, r3
 8002186:	4313      	orrs	r3, r2
 8002188:	b21a      	sxth	r2, r3
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 800218e:	7d3b      	ldrb	r3, [r7, #20]
 8002190:	021b      	lsls	r3, r3, #8
 8002192:	b21a      	sxth	r2, r3
 8002194:	7d7b      	ldrb	r3, [r7, #21]
 8002196:	b21b      	sxth	r3, r3
 8002198:	4313      	orrs	r3, r2
 800219a:	b21a      	sxth	r2, r3
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe f9c4 	bl	8000534 <__aeabi_i2d>
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	4bbd      	ldr	r3, [pc, #756]	; (80024a8 <MPU6050_Read_All+0x3a8>)
 80021b2:	f7fe fb53 	bl	800085c <__aeabi_ddiv>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	6839      	ldr	r1, [r7, #0]
 80021bc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe f9b4 	bl	8000534 <__aeabi_i2d>
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	4bb5      	ldr	r3, [pc, #724]	; (80024a8 <MPU6050_Read_All+0x3a8>)
 80021d2:	f7fe fb43 	bl	800085c <__aeabi_ddiv>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	6839      	ldr	r1, [r7, #0]
 80021dc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe f9a4 	bl	8000534 <__aeabi_i2d>
 80021ec:	a3a8      	add	r3, pc, #672	; (adr r3, 8002490 <MPU6050_Read_All+0x390>)
 80021ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f2:	f7fe fb33 	bl	800085c <__aeabi_ddiv>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	6839      	ldr	r1, [r7, #0]
 80021fc:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8002200:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002204:	ee07 3a90 	vmov	s15, r3
 8002208:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800220c:	eddf 6aa7 	vldr	s13, [pc, #668]	; 80024ac <MPU6050_Read_All+0x3ac>
 8002210:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002214:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80024b0 <MPU6050_Read_All+0x3b0>
 8002218:	ee77 7a87 	vadd.f32	s15, s15, s14
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe f983 	bl	8000534 <__aeabi_i2d>
 800222e:	a39a      	add	r3, pc, #616	; (adr r3, 8002498 <MPU6050_Read_All+0x398>)
 8002230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002234:	f7fe fb12 	bl	800085c <__aeabi_ddiv>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	6839      	ldr	r1, [r7, #0]
 800223e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe f973 	bl	8000534 <__aeabi_i2d>
 800224e:	a392      	add	r3, pc, #584	; (adr r3, 8002498 <MPU6050_Read_All+0x398>)
 8002250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002254:	f7fe fb02 	bl	800085c <__aeabi_ddiv>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	6839      	ldr	r1, [r7, #0]
 800225e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe f963 	bl	8000534 <__aeabi_i2d>
 800226e:	a38a      	add	r3, pc, #552	; (adr r3, 8002498 <MPU6050_Read_All+0x398>)
 8002270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002274:	f7fe faf2 	bl	800085c <__aeabi_ddiv>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	6839      	ldr	r1, [r7, #0]
 800227e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8002282:	f000 fd65 	bl	8002d50 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	4b8a      	ldr	r3, [pc, #552]	; (80024b4 <MPU6050_Read_All+0x3b4>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe f940 	bl	8000514 <__aeabi_ui2d>
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	4b87      	ldr	r3, [pc, #540]	; (80024b8 <MPU6050_Read_All+0x3b8>)
 800229a:	f7fe fadf 	bl	800085c <__aeabi_ddiv>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80022a6:	f000 fd53 	bl	8002d50 <HAL_GetTick>
 80022aa:	4603      	mov	r3, r0
 80022ac:	4a81      	ldr	r2, [pc, #516]	; (80024b4 <MPU6050_Read_All+0x3b4>)
 80022ae:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022b6:	461a      	mov	r2, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022be:	fb03 f202 	mul.w	r2, r3, r2
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80022c8:	4619      	mov	r1, r3
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80022d0:	fb01 f303 	mul.w	r3, r1, r3
 80022d4:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe f92c 	bl	8000534 <__aeabi_i2d>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	ec43 2b10 	vmov	d0, r2, r3
 80022e4:	f008 ffdb 	bl	800b29e <sqrt>
 80022e8:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	f04f 0300 	mov.w	r3, #0
 80022f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022f8:	f7fe fbee 	bl	8000ad8 <__aeabi_dcmpeq>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d11f      	bne.n	8002342 <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002308:	4618      	mov	r0, r3
 800230a:	f7fe f913 	bl	8000534 <__aeabi_i2d>
 800230e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002312:	f7fe faa3 	bl	800085c <__aeabi_ddiv>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	ec43 2b17 	vmov	d7, r2, r3
 800231e:	eeb0 0a47 	vmov.f32	s0, s14
 8002322:	eef0 0a67 	vmov.f32	s1, s15
 8002326:	f008 fe0f 	bl	800af48 <atan>
 800232a:	ec51 0b10 	vmov	r0, r1, d0
 800232e:	a35c      	add	r3, pc, #368	; (adr r3, 80024a0 <MPU6050_Read_All+0x3a0>)
 8002330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002334:	f7fe f968 	bl	8000608 <__aeabi_dmul>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002340:	e005      	b.n	800234e <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	f04f 0300 	mov.w	r3, #0
 800234a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002354:	425b      	negs	r3, r3
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe f8ec 	bl	8000534 <__aeabi_i2d>
 800235c:	4682      	mov	sl, r0
 800235e:	468b      	mov	fp, r1
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe f8e4 	bl	8000534 <__aeabi_i2d>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	ec43 2b11 	vmov	d1, r2, r3
 8002374:	ec4b ab10 	vmov	d0, sl, fp
 8002378:	f008 ff8f 	bl	800b29a <atan2>
 800237c:	ec51 0b10 	vmov	r0, r1, d0
 8002380:	a347      	add	r3, pc, #284	; (adr r3, 80024a0 <MPU6050_Read_All+0x3a0>)
 8002382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002386:	f7fe f93f 	bl	8000608 <__aeabi_dmul>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	4b49      	ldr	r3, [pc, #292]	; (80024bc <MPU6050_Read_All+0x3bc>)
 8002398:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800239c:	f7fe fba6 	bl	8000aec <__aeabi_dcmplt>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00a      	beq.n	80023bc <MPU6050_Read_All+0x2bc>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	4b43      	ldr	r3, [pc, #268]	; (80024c0 <MPU6050_Read_All+0x3c0>)
 80023b2:	f7fe fbb9 	bl	8000b28 <__aeabi_dcmpgt>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d114      	bne.n	80023e6 <MPU6050_Read_All+0x2e6>
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	4b3f      	ldr	r3, [pc, #252]	; (80024c0 <MPU6050_Read_All+0x3c0>)
 80023c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80023c6:	f7fe fbaf 	bl	8000b28 <__aeabi_dcmpgt>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d015      	beq.n	80023fc <MPU6050_Read_All+0x2fc>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	4b38      	ldr	r3, [pc, #224]	; (80024bc <MPU6050_Read_All+0x3bc>)
 80023dc:	f7fe fb86 	bl	8000aec <__aeabi_dcmplt>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 80023e6:	4937      	ldr	r1, [pc, #220]	; (80024c4 <MPU6050_Read_All+0x3c4>)
 80023e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023ec:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80023f0:	6839      	ldr	r1, [r7, #0]
 80023f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023f6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80023fa:	e014      	b.n	8002426 <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002402:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002406:	eeb0 1a47 	vmov.f32	s2, s14
 800240a:	eef0 1a67 	vmov.f32	s3, s15
 800240e:	ed97 0b06 	vldr	d0, [r7, #24]
 8002412:	482c      	ldr	r0, [pc, #176]	; (80024c4 <MPU6050_Read_All+0x3c4>)
 8002414:	f000 f85a 	bl	80024cc <Kalman_getAngle>
 8002418:	eeb0 7a40 	vmov.f32	s14, s0
 800241c:	eef0 7a60 	vmov.f32	s15, s1
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800242c:	4690      	mov	r8, r2
 800242e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	4b22      	ldr	r3, [pc, #136]	; (80024c0 <MPU6050_Read_All+0x3c0>)
 8002438:	4640      	mov	r0, r8
 800243a:	4649      	mov	r1, r9
 800243c:	f7fe fb74 	bl	8000b28 <__aeabi_dcmpgt>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d008      	beq.n	8002458 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800244c:	4614      	mov	r4, r2
 800244e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800245e:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002462:	eeb0 1a47 	vmov.f32	s2, s14
 8002466:	eef0 1a67 	vmov.f32	s3, s15
 800246a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800246e:	4816      	ldr	r0, [pc, #88]	; (80024c8 <MPU6050_Read_All+0x3c8>)
 8002470:	f000 f82c 	bl	80024cc <Kalman_getAngle>
 8002474:	eeb0 7a40 	vmov.f32	s14, s0
 8002478:	eef0 7a60 	vmov.f32	s15, s1
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 8002482:	bf00      	nop
 8002484:	3740      	adds	r7, #64	; 0x40
 8002486:	46bd      	mov	sp, r7
 8002488:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800248c:	f3af 8000 	nop.w
 8002490:	00000000 	.word	0x00000000
 8002494:	40cc2900 	.word	0x40cc2900
 8002498:	00000000 	.word	0x00000000
 800249c:	40606000 	.word	0x40606000
 80024a0:	1a63c1f8 	.word	0x1a63c1f8
 80024a4:	404ca5dc 	.word	0x404ca5dc
 80024a8:	40d00000 	.word	0x40d00000
 80024ac:	43aa0000 	.word	0x43aa0000
 80024b0:	42121eb8 	.word	0x42121eb8
 80024b4:	200005fc 	.word	0x200005fc
 80024b8:	408f4000 	.word	0x408f4000
 80024bc:	c0568000 	.word	0xc0568000
 80024c0:	40568000 	.word	0x40568000
 80024c4:	20000060 	.word	0x20000060
 80024c8:	20000018 	.word	0x20000018

080024cc <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80024cc:	b5b0      	push	{r4, r5, r7, lr}
 80024ce:	b096      	sub	sp, #88	; 0x58
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	61f8      	str	r0, [r7, #28]
 80024d4:	ed87 0b04 	vstr	d0, [r7, #16]
 80024d8:	ed87 1b02 	vstr	d1, [r7, #8]
 80024dc:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80024e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024ea:	f7fd fed5 	bl	8000298 <__aeabi_dsub>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80024fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002500:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002504:	f7fe f880 	bl	8000608 <__aeabi_dmul>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4620      	mov	r0, r4
 800250e:	4629      	mov	r1, r5
 8002510:	f7fd fec4 	bl	800029c <__adddf3>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	69f9      	ldr	r1, [r7, #28]
 800251a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800252a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800252e:	f7fe f86b 	bl	8000608 <__aeabi_dmul>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4610      	mov	r0, r2
 8002538:	4619      	mov	r1, r3
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002540:	f7fd feaa 	bl	8000298 <__aeabi_dsub>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002552:	f7fd fea1 	bl	8000298 <__aeabi_dsub>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4610      	mov	r0, r2
 800255c:	4619      	mov	r1, r3
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002564:	f7fd fe9a 	bl	800029c <__adddf3>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4610      	mov	r0, r2
 800256e:	4619      	mov	r1, r3
 8002570:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002574:	f7fe f848 	bl	8000608 <__aeabi_dmul>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4620      	mov	r0, r4
 800257e:	4629      	mov	r1, r5
 8002580:	f7fd fe8c 	bl	800029c <__adddf3>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	69f9      	ldr	r1, [r7, #28]
 800258a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800259a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800259e:	f7fe f833 	bl	8000608 <__aeabi_dmul>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4620      	mov	r0, r4
 80025a8:	4629      	mov	r1, r5
 80025aa:	f7fd fe75 	bl	8000298 <__aeabi_dsub>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	69f9      	ldr	r1, [r7, #28]
 80025b4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80025c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025c8:	f7fe f81e 	bl	8000608 <__aeabi_dmul>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4620      	mov	r0, r4
 80025d2:	4629      	mov	r1, r5
 80025d4:	f7fd fe60 	bl	8000298 <__aeabi_dsub>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	69f9      	ldr	r1, [r7, #28]
 80025de:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80025ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025f2:	f7fe f809 	bl	8000608 <__aeabi_dmul>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4620      	mov	r0, r4
 80025fc:	4629      	mov	r1, r5
 80025fe:	f7fd fe4d 	bl	800029c <__adddf3>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	69f9      	ldr	r1, [r7, #28]
 8002608:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002618:	f7fd fe40 	bl	800029c <__adddf3>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800262a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800262e:	f7fe f915 	bl	800085c <__aeabi_ddiv>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002640:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002644:	f7fe f90a 	bl	800085c <__aeabi_ddiv>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002656:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800265a:	f7fd fe1d 	bl	8000298 <__aeabi_dsub>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800266c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002670:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002674:	f7fd ffc8 	bl	8000608 <__aeabi_dmul>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4620      	mov	r0, r4
 800267e:	4629      	mov	r1, r5
 8002680:	f7fd fe0c 	bl	800029c <__adddf3>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	69f9      	ldr	r1, [r7, #28]
 800268a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002694:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002698:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800269c:	f7fd ffb4 	bl	8000608 <__aeabi_dmul>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4620      	mov	r0, r4
 80026a6:	4629      	mov	r1, r5
 80026a8:	f7fd fdf8 	bl	800029c <__adddf3>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	69f9      	ldr	r1, [r7, #28]
 80026b2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80026bc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80026c6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80026d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80026d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80026d8:	f7fd ff96 	bl	8000608 <__aeabi_dmul>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4620      	mov	r0, r4
 80026e2:	4629      	mov	r1, r5
 80026e4:	f7fd fdd8 	bl	8000298 <__aeabi_dsub>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	69f9      	ldr	r1, [r7, #28]
 80026ee:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80026f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80026fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002700:	f7fd ff82 	bl	8000608 <__aeabi_dmul>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4620      	mov	r0, r4
 800270a:	4629      	mov	r1, r5
 800270c:	f7fd fdc4 	bl	8000298 <__aeabi_dsub>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	69f9      	ldr	r1, [r7, #28]
 8002716:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002720:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002724:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002728:	f7fd ff6e 	bl	8000608 <__aeabi_dmul>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4620      	mov	r0, r4
 8002732:	4629      	mov	r1, r5
 8002734:	f7fd fdb0 	bl	8000298 <__aeabi_dsub>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	69f9      	ldr	r1, [r7, #28]
 800273e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002748:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800274c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002750:	f7fd ff5a 	bl	8000608 <__aeabi_dmul>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4620      	mov	r0, r4
 800275a:	4629      	mov	r1, r5
 800275c:	f7fd fd9c 	bl	8000298 <__aeabi_dsub>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	69f9      	ldr	r1, [r7, #28]
 8002766:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002770:	ec43 2b17 	vmov	d7, r2, r3
};
 8002774:	eeb0 0a47 	vmov.f32	s0, s14
 8002778:	eef0 0a67 	vmov.f32	s1, s15
 800277c:	3758      	adds	r7, #88	; 0x58
 800277e:	46bd      	mov	sp, r7
 8002780:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	607b      	str	r3, [r7, #4]
 800278e:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <HAL_MspInit+0x4c>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	4a0f      	ldr	r2, [pc, #60]	; (80027d0 <HAL_MspInit+0x4c>)
 8002794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002798:	6453      	str	r3, [r2, #68]	; 0x44
 800279a:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <HAL_MspInit+0x4c>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a2:	607b      	str	r3, [r7, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	603b      	str	r3, [r7, #0]
 80027aa:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <HAL_MspInit+0x4c>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	4a08      	ldr	r2, [pc, #32]	; (80027d0 <HAL_MspInit+0x4c>)
 80027b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b4:	6413      	str	r3, [r2, #64]	; 0x40
 80027b6:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_MspInit+0x4c>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027be:	603b      	str	r3, [r7, #0]
 80027c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80027c2:	2007      	movs	r0, #7
 80027c4:	f000 ffb6 	bl	8003734 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027c8:	bf00      	nop
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40023800 	.word	0x40023800

080027d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08a      	sub	sp, #40	; 0x28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a17      	ldr	r2, [pc, #92]	; (8002850 <HAL_ADC_MspInit+0x7c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d127      	bne.n	8002846 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	4b16      	ldr	r3, [pc, #88]	; (8002854 <HAL_ADC_MspInit+0x80>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	4a15      	ldr	r2, [pc, #84]	; (8002854 <HAL_ADC_MspInit+0x80>)
 8002800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002804:	6453      	str	r3, [r2, #68]	; 0x44
 8002806:	4b13      	ldr	r3, [pc, #76]	; (8002854 <HAL_ADC_MspInit+0x80>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <HAL_ADC_MspInit+0x80>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	4a0e      	ldr	r2, [pc, #56]	; (8002854 <HAL_ADC_MspInit+0x80>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	6313      	str	r3, [r2, #48]	; 0x30
 8002822:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <HAL_ADC_MspInit+0x80>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800282e:	2373      	movs	r3, #115	; 0x73
 8002830:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002832:	2303      	movs	r3, #3
 8002834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283a:	f107 0314 	add.w	r3, r7, #20
 800283e:	4619      	mov	r1, r3
 8002840:	4805      	ldr	r0, [pc, #20]	; (8002858 <HAL_ADC_MspInit+0x84>)
 8002842:	f001 f84b 	bl	80038dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002846:	bf00      	nop
 8002848:	3728      	adds	r7, #40	; 0x28
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40012000 	.word	0x40012000
 8002854:	40023800 	.word	0x40023800
 8002858:	40020000 	.word	0x40020000

0800285c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08a      	sub	sp, #40	; 0x28
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 0314 	add.w	r3, r7, #20
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a19      	ldr	r2, [pc, #100]	; (80028e0 <HAL_I2C_MspInit+0x84>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d12c      	bne.n	80028d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <HAL_I2C_MspInit+0x88>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	4a17      	ldr	r2, [pc, #92]	; (80028e4 <HAL_I2C_MspInit+0x88>)
 8002888:	f043 0302 	orr.w	r3, r3, #2
 800288c:	6313      	str	r3, [r2, #48]	; 0x30
 800288e:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <HAL_I2C_MspInit+0x88>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800289a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800289e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028a0:	2312      	movs	r3, #18
 80028a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a8:	2303      	movs	r3, #3
 80028aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028ac:	2304      	movs	r3, #4
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	4619      	mov	r1, r3
 80028b6:	480c      	ldr	r0, [pc, #48]	; (80028e8 <HAL_I2C_MspInit+0x8c>)
 80028b8:	f001 f810 	bl	80038dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028bc:	2300      	movs	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <HAL_I2C_MspInit+0x88>)
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	4a07      	ldr	r2, [pc, #28]	; (80028e4 <HAL_I2C_MspInit+0x88>)
 80028c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028ca:	6413      	str	r3, [r2, #64]	; 0x40
 80028cc:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <HAL_I2C_MspInit+0x88>)
 80028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028d8:	bf00      	nop
 80028da:	3728      	adds	r7, #40	; 0x28
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40005400 	.word	0x40005400
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40020400 	.word	0x40020400

080028ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08c      	sub	sp, #48	; 0x30
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f4:	f107 031c 	add.w	r3, r7, #28
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	60da      	str	r2, [r3, #12]
 8002902:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a3a      	ldr	r2, [pc, #232]	; (80029f4 <HAL_UART_MspInit+0x108>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d135      	bne.n	800297a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	61bb      	str	r3, [r7, #24]
 8002912:	4b39      	ldr	r3, [pc, #228]	; (80029f8 <HAL_UART_MspInit+0x10c>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	4a38      	ldr	r2, [pc, #224]	; (80029f8 <HAL_UART_MspInit+0x10c>)
 8002918:	f043 0310 	orr.w	r3, r3, #16
 800291c:	6453      	str	r3, [r2, #68]	; 0x44
 800291e:	4b36      	ldr	r3, [pc, #216]	; (80029f8 <HAL_UART_MspInit+0x10c>)
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	f003 0310 	and.w	r3, r3, #16
 8002926:	61bb      	str	r3, [r7, #24]
 8002928:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	4b32      	ldr	r3, [pc, #200]	; (80029f8 <HAL_UART_MspInit+0x10c>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	4a31      	ldr	r2, [pc, #196]	; (80029f8 <HAL_UART_MspInit+0x10c>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	6313      	str	r3, [r2, #48]	; 0x30
 800293a:	4b2f      	ldr	r3, [pc, #188]	; (80029f8 <HAL_UART_MspInit+0x10c>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002946:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800294a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294c:	2302      	movs	r3, #2
 800294e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002954:	2303      	movs	r3, #3
 8002956:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002958:	2307      	movs	r3, #7
 800295a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295c:	f107 031c 	add.w	r3, r7, #28
 8002960:	4619      	mov	r1, r3
 8002962:	4826      	ldr	r0, [pc, #152]	; (80029fc <HAL_UART_MspInit+0x110>)
 8002964:	f000 ffba 	bl	80038dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002968:	2200      	movs	r2, #0
 800296a:	2100      	movs	r1, #0
 800296c:	2025      	movs	r0, #37	; 0x25
 800296e:	f000 feec 	bl	800374a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002972:	2025      	movs	r0, #37	; 0x25
 8002974:	f000 ff05 	bl	8003782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002978:	e038      	b.n	80029ec <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a20      	ldr	r2, [pc, #128]	; (8002a00 <HAL_UART_MspInit+0x114>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d133      	bne.n	80029ec <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002984:	2300      	movs	r3, #0
 8002986:	613b      	str	r3, [r7, #16]
 8002988:	4b1b      	ldr	r3, [pc, #108]	; (80029f8 <HAL_UART_MspInit+0x10c>)
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	4a1a      	ldr	r2, [pc, #104]	; (80029f8 <HAL_UART_MspInit+0x10c>)
 800298e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002992:	6413      	str	r3, [r2, #64]	; 0x40
 8002994:	4b18      	ldr	r3, [pc, #96]	; (80029f8 <HAL_UART_MspInit+0x10c>)
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a0:	2300      	movs	r3, #0
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <HAL_UART_MspInit+0x10c>)
 80029a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a8:	4a13      	ldr	r2, [pc, #76]	; (80029f8 <HAL_UART_MspInit+0x10c>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6313      	str	r3, [r2, #48]	; 0x30
 80029b0:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <HAL_UART_MspInit+0x10c>)
 80029b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029bc:	230c      	movs	r3, #12
 80029be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c0:	2302      	movs	r3, #2
 80029c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c8:	2303      	movs	r3, #3
 80029ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029cc:	2307      	movs	r3, #7
 80029ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d0:	f107 031c 	add.w	r3, r7, #28
 80029d4:	4619      	mov	r1, r3
 80029d6:	4809      	ldr	r0, [pc, #36]	; (80029fc <HAL_UART_MspInit+0x110>)
 80029d8:	f000 ff80 	bl	80038dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80029dc:	2200      	movs	r2, #0
 80029de:	2100      	movs	r1, #0
 80029e0:	2026      	movs	r0, #38	; 0x26
 80029e2:	f000 feb2 	bl	800374a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029e6:	2026      	movs	r0, #38	; 0x26
 80029e8:	f000 fecb 	bl	8003782 <HAL_NVIC_EnableIRQ>
}
 80029ec:	bf00      	nop
 80029ee:	3730      	adds	r7, #48	; 0x30
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40011000 	.word	0x40011000
 80029f8:	40023800 	.word	0x40023800
 80029fc:	40020000 	.word	0x40020000
 8002a00:	40004400 	.word	0x40004400

08002a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a08:	e7fe      	b.n	8002a08 <NMI_Handler+0x4>

08002a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a0e:	e7fe      	b.n	8002a0e <HardFault_Handler+0x4>

08002a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a14:	e7fe      	b.n	8002a14 <MemManage_Handler+0x4>

08002a16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a1a:	e7fe      	b.n	8002a1a <BusFault_Handler+0x4>

08002a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a20:	e7fe      	b.n	8002a20 <UsageFault_Handler+0x4>

08002a22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a34:	bf00      	nop
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a42:	bf00      	nop
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a50:	f000 f96a 	bl	8002d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a54:	bf00      	nop
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a5c:	4802      	ldr	r0, [pc, #8]	; (8002a68 <USART1_IRQHandler+0x10>)
 8002a5e:	f002 fe9b 	bl	8005798 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000340 	.word	0x20000340

08002a6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a70:	4802      	ldr	r0, [pc, #8]	; (8002a7c <USART2_IRQHandler+0x10>)
 8002a72:	f002 fe91 	bl	8005798 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000384 	.word	0x20000384

08002a80 <_getpid>:
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	2301      	movs	r3, #1
 8002a86:	4618      	mov	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <_kill>:
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
 8002a9a:	f003 fdb1 	bl	8006600 <__errno>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2216      	movs	r2, #22
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <_exit>:
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff ffe7 	bl	8002a90 <_kill>
 8002ac2:	e7fe      	b.n	8002ac2 <_exit+0x12>

08002ac4 <_read>:
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	e00a      	b.n	8002aec <_read+0x28>
 8002ad6:	f3af 8000 	nop.w
 8002ada:	4601      	mov	r1, r0
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	1c5a      	adds	r2, r3, #1
 8002ae0:	60ba      	str	r2, [r7, #8]
 8002ae2:	b2ca      	uxtb	r2, r1
 8002ae4:	701a      	strb	r2, [r3, #0]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	dbf0      	blt.n	8002ad6 <_read+0x12>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <_write>:
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b086      	sub	sp, #24
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	607a      	str	r2, [r7, #4]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	e009      	b.n	8002b24 <_write+0x26>
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	60ba      	str	r2, [r7, #8]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f3af 8000 	nop.w
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	3301      	adds	r3, #1
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	dbf1      	blt.n	8002b10 <_write+0x12>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <_close>:
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b42:	4618      	mov	r0, r3
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <_fstat>:
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	6039      	str	r1, [r7, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b5e:	605a      	str	r2, [r3, #4]
 8002b60:	2300      	movs	r3, #0
 8002b62:	4618      	mov	r0, r3
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <_isatty>:
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	2301      	movs	r3, #1
 8002b78:	4618      	mov	r0, r3
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <_lseek>:
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
 8002b90:	2300      	movs	r3, #0
 8002b92:	4618      	mov	r0, r3
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
	...

08002ba0 <_sbrk>:
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	4a14      	ldr	r2, [pc, #80]	; (8002bfc <_sbrk+0x5c>)
 8002baa:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <_sbrk+0x60>)
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <_sbrk+0x64>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d102      	bne.n	8002bc2 <_sbrk+0x22>
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <_sbrk+0x64>)
 8002bbe:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <_sbrk+0x68>)
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <_sbrk+0x64>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4413      	add	r3, r2
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d207      	bcs.n	8002be0 <_sbrk+0x40>
 8002bd0:	f003 fd16 	bl	8006600 <__errno>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	220c      	movs	r2, #12
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	f04f 33ff 	mov.w	r3, #4294967295
 8002bde:	e009      	b.n	8002bf4 <_sbrk+0x54>
 8002be0:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <_sbrk+0x64>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	4b07      	ldr	r3, [pc, #28]	; (8002c04 <_sbrk+0x64>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	4a05      	ldr	r2, [pc, #20]	; (8002c04 <_sbrk+0x64>)
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20020000 	.word	0x20020000
 8002c00:	00000400 	.word	0x00000400
 8002c04:	20000600 	.word	0x20000600
 8002c08:	20000618 	.word	0x20000618

08002c0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c10:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <SystemInit+0x20>)
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c16:	4a05      	ldr	r2, [pc, #20]	; (8002c2c <SystemInit+0x20>)
 8002c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <Reset_Handler>:
 8002c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c68 <LoopFillZerobss+0x12>
 8002c34:	480d      	ldr	r0, [pc, #52]	; (8002c6c <LoopFillZerobss+0x16>)
 8002c36:	490e      	ldr	r1, [pc, #56]	; (8002c70 <LoopFillZerobss+0x1a>)
 8002c38:	4a0e      	ldr	r2, [pc, #56]	; (8002c74 <LoopFillZerobss+0x1e>)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	e002      	b.n	8002c44 <LoopCopyDataInit>

08002c3e <CopyDataInit>:
 8002c3e:	58d4      	ldr	r4, [r2, r3]
 8002c40:	50c4      	str	r4, [r0, r3]
 8002c42:	3304      	adds	r3, #4

08002c44 <LoopCopyDataInit>:
 8002c44:	18c4      	adds	r4, r0, r3
 8002c46:	428c      	cmp	r4, r1
 8002c48:	d3f9      	bcc.n	8002c3e <CopyDataInit>
 8002c4a:	4a0b      	ldr	r2, [pc, #44]	; (8002c78 <LoopFillZerobss+0x22>)
 8002c4c:	4c0b      	ldr	r4, [pc, #44]	; (8002c7c <LoopFillZerobss+0x26>)
 8002c4e:	2300      	movs	r3, #0
 8002c50:	e001      	b.n	8002c56 <LoopFillZerobss>

08002c52 <FillZerobss>:
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	3204      	adds	r2, #4

08002c56 <LoopFillZerobss>:
 8002c56:	42a2      	cmp	r2, r4
 8002c58:	d3fb      	bcc.n	8002c52 <FillZerobss>
 8002c5a:	f7ff ffd7 	bl	8002c0c <SystemInit>
 8002c5e:	f003 fcd5 	bl	800660c <__libc_init_array>
 8002c62:	f7fe faad 	bl	80011c0 <main>
 8002c66:	4770      	bx	lr
 8002c68:	20020000 	.word	0x20020000
 8002c6c:	20000000 	.word	0x20000000
 8002c70:	20000288 	.word	0x20000288
 8002c74:	0800bcd8 	.word	0x0800bcd8
 8002c78:	20000288 	.word	0x20000288
 8002c7c:	20000618 	.word	0x20000618

08002c80 <ADC_IRQHandler>:
 8002c80:	e7fe      	b.n	8002c80 <ADC_IRQHandler>
	...

08002c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c88:	4b0e      	ldr	r3, [pc, #56]	; (8002cc4 <HAL_Init+0x40>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a0d      	ldr	r2, [pc, #52]	; (8002cc4 <HAL_Init+0x40>)
 8002c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c94:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <HAL_Init+0x40>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a0a      	ldr	r2, [pc, #40]	; (8002cc4 <HAL_Init+0x40>)
 8002c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ca0:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <HAL_Init+0x40>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a07      	ldr	r2, [pc, #28]	; (8002cc4 <HAL_Init+0x40>)
 8002ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002caa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cac:	2003      	movs	r0, #3
 8002cae:	f000 fd41 	bl	8003734 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f000 f808 	bl	8002cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cb8:	f7ff fd64 	bl	8002784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40023c00 	.word	0x40023c00

08002cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cd0:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <HAL_InitTick+0x54>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_InitTick+0x58>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	4619      	mov	r1, r3
 8002cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 fd59 	bl	800379e <HAL_SYSTICK_Config>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e00e      	b.n	8002d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b0f      	cmp	r3, #15
 8002cfa:	d80a      	bhi.n	8002d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	f04f 30ff 	mov.w	r0, #4294967295
 8002d04:	f000 fd21 	bl	800374a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d08:	4a06      	ldr	r2, [pc, #24]	; (8002d24 <HAL_InitTick+0x5c>)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	e000      	b.n	8002d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	200000a8 	.word	0x200000a8
 8002d20:	200000b0 	.word	0x200000b0
 8002d24:	200000ac 	.word	0x200000ac

08002d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d2c:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <HAL_IncTick+0x20>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	461a      	mov	r2, r3
 8002d32:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <HAL_IncTick+0x24>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4413      	add	r3, r2
 8002d38:	4a04      	ldr	r2, [pc, #16]	; (8002d4c <HAL_IncTick+0x24>)
 8002d3a:	6013      	str	r3, [r2, #0]
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	200000b0 	.word	0x200000b0
 8002d4c:	20000604 	.word	0x20000604

08002d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  return uwTick;
 8002d54:	4b03      	ldr	r3, [pc, #12]	; (8002d64 <HAL_GetTick+0x14>)
 8002d56:	681b      	ldr	r3, [r3, #0]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	20000604 	.word	0x20000604

08002d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d70:	f7ff ffee 	bl	8002d50 <HAL_GetTick>
 8002d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d80:	d005      	beq.n	8002d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d82:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <HAL_Delay+0x44>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d8e:	bf00      	nop
 8002d90:	f7ff ffde 	bl	8002d50 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d8f7      	bhi.n	8002d90 <HAL_Delay+0x28>
  {
  }
}
 8002da0:	bf00      	nop
 8002da2:	bf00      	nop
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	200000b0 	.word	0x200000b0

08002db0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e033      	b.n	8002e2e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff fd00 	bl	80027d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f003 0310 	and.w	r3, r3, #16
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d118      	bne.n	8002e20 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002df6:	f023 0302 	bic.w	r3, r3, #2
 8002dfa:	f043 0202 	orr.w	r2, r3, #2
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 faca 	bl	800339c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	f023 0303 	bic.w	r3, r3, #3
 8002e16:	f043 0201 	orr.w	r2, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40
 8002e1e:	e001      	b.n	8002e24 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d101      	bne.n	8002e52 <HAL_ADC_Start+0x1a>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e097      	b.n	8002f82 <HAL_ADC_Start+0x14a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d018      	beq.n	8002e9a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e78:	4b45      	ldr	r3, [pc, #276]	; (8002f90 <HAL_ADC_Start+0x158>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a45      	ldr	r2, [pc, #276]	; (8002f94 <HAL_ADC_Start+0x15c>)
 8002e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e82:	0c9a      	lsrs	r2, r3, #18
 8002e84:	4613      	mov	r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	4413      	add	r3, r2
 8002e8a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e8c:	e002      	b.n	8002e94 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	3b01      	subs	r3, #1
 8002e92:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f9      	bne.n	8002e8e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d15f      	bne.n	8002f68 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002eb0:	f023 0301 	bic.w	r3, r3, #1
 8002eb4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d007      	beq.n	8002eda <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ed2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee6:	d106      	bne.n	8002ef6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eec:	f023 0206 	bic.w	r2, r3, #6
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	645a      	str	r2, [r3, #68]	; 0x44
 8002ef4:	e002      	b.n	8002efc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f04:	4b24      	ldr	r3, [pc, #144]	; (8002f98 <HAL_ADC_Start+0x160>)
 8002f06:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f10:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f003 031f 	and.w	r3, r3, #31
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10f      	bne.n	8002f3e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d129      	bne.n	8002f80 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f3a:	609a      	str	r2, [r3, #8]
 8002f3c:	e020      	b.n	8002f80 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a16      	ldr	r2, [pc, #88]	; (8002f9c <HAL_ADC_Start+0x164>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d11b      	bne.n	8002f80 <HAL_ADC_Start+0x148>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d114      	bne.n	8002f80 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f64:	609a      	str	r2, [r3, #8]
 8002f66:	e00b      	b.n	8002f80 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	f043 0210 	orr.w	r2, r3, #16
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f78:	f043 0201 	orr.w	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	200000a8 	.word	0x200000a8
 8002f94:	431bde83 	.word	0x431bde83
 8002f98:	40012300 	.word	0x40012300
 8002f9c:	40012000 	.word	0x40012000

08002fa0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_ADC_Stop+0x16>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e021      	b.n	8002ffa <HAL_ADC_Stop+0x5a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0201 	bic.w	r2, r2, #1
 8002fcc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d109      	bne.n	8002ff0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fe4:	f023 0301 	bic.w	r3, r3, #1
 8002fe8:	f043 0201 	orr.w	r2, r3, #1
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b084      	sub	sp, #16
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800301e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003022:	d113      	bne.n	800304c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800302e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003032:	d10b      	bne.n	800304c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	f043 0220 	orr.w	r2, r3, #32
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e063      	b.n	8003114 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800304c:	f7ff fe80 	bl	8002d50 <HAL_GetTick>
 8003050:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003052:	e021      	b.n	8003098 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305a:	d01d      	beq.n	8003098 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d007      	beq.n	8003072 <HAL_ADC_PollForConversion+0x6c>
 8003062:	f7ff fe75 	bl	8002d50 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	429a      	cmp	r2, r3
 8003070:	d212      	bcs.n	8003098 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b02      	cmp	r3, #2
 800307e:	d00b      	beq.n	8003098 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	f043 0204 	orr.w	r2, r3, #4
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e03d      	b.n	8003114 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d1d6      	bne.n	8003054 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f06f 0212 	mvn.w	r2, #18
 80030ae:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d123      	bne.n	8003112 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d11f      	bne.n	8003112 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d006      	beq.n	80030ee <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d111      	bne.n	8003112 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d105      	bne.n	8003112 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f043 0201 	orr.w	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800312a:	4618      	mov	r0, r3
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
	...

08003138 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x1c>
 8003150:	2302      	movs	r3, #2
 8003152:	e113      	b.n	800337c <HAL_ADC_ConfigChannel+0x244>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b09      	cmp	r3, #9
 8003162:	d925      	bls.n	80031b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68d9      	ldr	r1, [r3, #12]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	b29b      	uxth	r3, r3
 8003170:	461a      	mov	r2, r3
 8003172:	4613      	mov	r3, r2
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	4413      	add	r3, r2
 8003178:	3b1e      	subs	r3, #30
 800317a:	2207      	movs	r2, #7
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43da      	mvns	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	400a      	ands	r2, r1
 8003188:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68d9      	ldr	r1, [r3, #12]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	b29b      	uxth	r3, r3
 800319a:	4618      	mov	r0, r3
 800319c:	4603      	mov	r3, r0
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	4403      	add	r3, r0
 80031a2:	3b1e      	subs	r3, #30
 80031a4:	409a      	lsls	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	60da      	str	r2, [r3, #12]
 80031ae:	e022      	b.n	80031f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6919      	ldr	r1, [r3, #16]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	461a      	mov	r2, r3
 80031be:	4613      	mov	r3, r2
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4413      	add	r3, r2
 80031c4:	2207      	movs	r2, #7
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43da      	mvns	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	400a      	ands	r2, r1
 80031d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6919      	ldr	r1, [r3, #16]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	4618      	mov	r0, r3
 80031e6:	4603      	mov	r3, r0
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	4403      	add	r3, r0
 80031ec:	409a      	lsls	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b06      	cmp	r3, #6
 80031fc:	d824      	bhi.n	8003248 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	3b05      	subs	r3, #5
 8003210:	221f      	movs	r2, #31
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43da      	mvns	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	400a      	ands	r2, r1
 800321e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	b29b      	uxth	r3, r3
 800322c:	4618      	mov	r0, r3
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	3b05      	subs	r3, #5
 800323a:	fa00 f203 	lsl.w	r2, r0, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	635a      	str	r2, [r3, #52]	; 0x34
 8003246:	e04c      	b.n	80032e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b0c      	cmp	r3, #12
 800324e:	d824      	bhi.n	800329a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	3b23      	subs	r3, #35	; 0x23
 8003262:	221f      	movs	r2, #31
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43da      	mvns	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	400a      	ands	r2, r1
 8003270:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	b29b      	uxth	r3, r3
 800327e:	4618      	mov	r0, r3
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	3b23      	subs	r3, #35	; 0x23
 800328c:	fa00 f203 	lsl.w	r2, r0, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	631a      	str	r2, [r3, #48]	; 0x30
 8003298:	e023      	b.n	80032e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	3b41      	subs	r3, #65	; 0x41
 80032ac:	221f      	movs	r2, #31
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43da      	mvns	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	400a      	ands	r2, r1
 80032ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	4618      	mov	r0, r3
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	3b41      	subs	r3, #65	; 0x41
 80032d6:	fa00 f203 	lsl.w	r2, r0, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032e2:	4b29      	ldr	r3, [pc, #164]	; (8003388 <HAL_ADC_ConfigChannel+0x250>)
 80032e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a28      	ldr	r2, [pc, #160]	; (800338c <HAL_ADC_ConfigChannel+0x254>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d10f      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x1d8>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b12      	cmp	r3, #18
 80032f6:	d10b      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a1d      	ldr	r2, [pc, #116]	; (800338c <HAL_ADC_ConfigChannel+0x254>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d12b      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x23a>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a1c      	ldr	r2, [pc, #112]	; (8003390 <HAL_ADC_ConfigChannel+0x258>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d003      	beq.n	800332c <HAL_ADC_ConfigChannel+0x1f4>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b11      	cmp	r3, #17
 800332a:	d122      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a11      	ldr	r2, [pc, #68]	; (8003390 <HAL_ADC_ConfigChannel+0x258>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d111      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800334e:	4b11      	ldr	r3, [pc, #68]	; (8003394 <HAL_ADC_ConfigChannel+0x25c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a11      	ldr	r2, [pc, #68]	; (8003398 <HAL_ADC_ConfigChannel+0x260>)
 8003354:	fba2 2303 	umull	r2, r3, r2, r3
 8003358:	0c9a      	lsrs	r2, r3, #18
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003364:	e002      	b.n	800336c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	3b01      	subs	r3, #1
 800336a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f9      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	40012300 	.word	0x40012300
 800338c:	40012000 	.word	0x40012000
 8003390:	10000012 	.word	0x10000012
 8003394:	200000a8 	.word	0x200000a8
 8003398:	431bde83 	.word	0x431bde83

0800339c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033a4:	4b79      	ldr	r3, [pc, #484]	; (800358c <ADC_Init+0x1f0>)
 80033a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	431a      	orrs	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6859      	ldr	r1, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	021a      	lsls	r2, r3, #8
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80033f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6859      	ldr	r1, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003416:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6899      	ldr	r1, [r3, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342e:	4a58      	ldr	r2, [pc, #352]	; (8003590 <ADC_Init+0x1f4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d022      	beq.n	800347a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003442:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6899      	ldr	r1, [r3, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003464:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6899      	ldr	r1, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	609a      	str	r2, [r3, #8]
 8003478:	e00f      	b.n	800349a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003488:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003498:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0202 	bic.w	r2, r2, #2
 80034a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6899      	ldr	r1, [r3, #8]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	7e1b      	ldrb	r3, [r3, #24]
 80034b4:	005a      	lsls	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d01b      	beq.n	8003500 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80034e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6859      	ldr	r1, [r3, #4]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	3b01      	subs	r3, #1
 80034f4:	035a      	lsls	r2, r3, #13
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	605a      	str	r2, [r3, #4]
 80034fe:	e007      	b.n	8003510 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800350e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800351e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	3b01      	subs	r3, #1
 800352c:	051a      	lsls	r2, r3, #20
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003544:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6899      	ldr	r1, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003552:	025a      	lsls	r2, r3, #9
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800356a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6899      	ldr	r1, [r3, #8]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	029a      	lsls	r2, r3, #10
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	609a      	str	r2, [r3, #8]
}
 8003580:	bf00      	nop
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	40012300 	.word	0x40012300
 8003590:	0f000001 	.word	0x0f000001

08003594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035a4:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <__NVIC_SetPriorityGrouping+0x44>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035b0:	4013      	ands	r3, r2
 80035b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035c6:	4a04      	ldr	r2, [pc, #16]	; (80035d8 <__NVIC_SetPriorityGrouping+0x44>)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	60d3      	str	r3, [r2, #12]
}
 80035cc:	bf00      	nop
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	e000ed00 	.word	0xe000ed00

080035dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035e0:	4b04      	ldr	r3, [pc, #16]	; (80035f4 <__NVIC_GetPriorityGrouping+0x18>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	0a1b      	lsrs	r3, r3, #8
 80035e6:	f003 0307 	and.w	r3, r3, #7
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	e000ed00 	.word	0xe000ed00

080035f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003606:	2b00      	cmp	r3, #0
 8003608:	db0b      	blt.n	8003622 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	f003 021f 	and.w	r2, r3, #31
 8003610:	4907      	ldr	r1, [pc, #28]	; (8003630 <__NVIC_EnableIRQ+0x38>)
 8003612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003616:	095b      	lsrs	r3, r3, #5
 8003618:	2001      	movs	r0, #1
 800361a:	fa00 f202 	lsl.w	r2, r0, r2
 800361e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	e000e100 	.word	0xe000e100

08003634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	6039      	str	r1, [r7, #0]
 800363e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003644:	2b00      	cmp	r3, #0
 8003646:	db0a      	blt.n	800365e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	b2da      	uxtb	r2, r3
 800364c:	490c      	ldr	r1, [pc, #48]	; (8003680 <__NVIC_SetPriority+0x4c>)
 800364e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003652:	0112      	lsls	r2, r2, #4
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	440b      	add	r3, r1
 8003658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800365c:	e00a      	b.n	8003674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	b2da      	uxtb	r2, r3
 8003662:	4908      	ldr	r1, [pc, #32]	; (8003684 <__NVIC_SetPriority+0x50>)
 8003664:	79fb      	ldrb	r3, [r7, #7]
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	3b04      	subs	r3, #4
 800366c:	0112      	lsls	r2, r2, #4
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	440b      	add	r3, r1
 8003672:	761a      	strb	r2, [r3, #24]
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	e000e100 	.word	0xe000e100
 8003684:	e000ed00 	.word	0xe000ed00

08003688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003688:	b480      	push	{r7}
 800368a:	b089      	sub	sp, #36	; 0x24
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f1c3 0307 	rsb	r3, r3, #7
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	bf28      	it	cs
 80036a6:	2304      	movcs	r3, #4
 80036a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	3304      	adds	r3, #4
 80036ae:	2b06      	cmp	r3, #6
 80036b0:	d902      	bls.n	80036b8 <NVIC_EncodePriority+0x30>
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	3b03      	subs	r3, #3
 80036b6:	e000      	b.n	80036ba <NVIC_EncodePriority+0x32>
 80036b8:	2300      	movs	r3, #0
 80036ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036bc:	f04f 32ff 	mov.w	r2, #4294967295
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	43da      	mvns	r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	401a      	ands	r2, r3
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036d0:	f04f 31ff 	mov.w	r1, #4294967295
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	fa01 f303 	lsl.w	r3, r1, r3
 80036da:	43d9      	mvns	r1, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e0:	4313      	orrs	r3, r2
         );
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3724      	adds	r7, #36	; 0x24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
	...

080036f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003700:	d301      	bcc.n	8003706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003702:	2301      	movs	r3, #1
 8003704:	e00f      	b.n	8003726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003706:	4a0a      	ldr	r2, [pc, #40]	; (8003730 <SysTick_Config+0x40>)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3b01      	subs	r3, #1
 800370c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800370e:	210f      	movs	r1, #15
 8003710:	f04f 30ff 	mov.w	r0, #4294967295
 8003714:	f7ff ff8e 	bl	8003634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003718:	4b05      	ldr	r3, [pc, #20]	; (8003730 <SysTick_Config+0x40>)
 800371a:	2200      	movs	r2, #0
 800371c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800371e:	4b04      	ldr	r3, [pc, #16]	; (8003730 <SysTick_Config+0x40>)
 8003720:	2207      	movs	r2, #7
 8003722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	e000e010 	.word	0xe000e010

08003734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7ff ff29 	bl	8003594 <__NVIC_SetPriorityGrouping>
}
 8003742:	bf00      	nop
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800374a:	b580      	push	{r7, lr}
 800374c:	b086      	sub	sp, #24
 800374e:	af00      	add	r7, sp, #0
 8003750:	4603      	mov	r3, r0
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	607a      	str	r2, [r7, #4]
 8003756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800375c:	f7ff ff3e 	bl	80035dc <__NVIC_GetPriorityGrouping>
 8003760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	68b9      	ldr	r1, [r7, #8]
 8003766:	6978      	ldr	r0, [r7, #20]
 8003768:	f7ff ff8e 	bl	8003688 <NVIC_EncodePriority>
 800376c:	4602      	mov	r2, r0
 800376e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003772:	4611      	mov	r1, r2
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff ff5d 	bl	8003634 <__NVIC_SetPriority>
}
 800377a:	bf00      	nop
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b082      	sub	sp, #8
 8003786:	af00      	add	r7, sp, #0
 8003788:	4603      	mov	r3, r0
 800378a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800378c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff ff31 	bl	80035f8 <__NVIC_EnableIRQ>
}
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7ff ffa2 	bl	80036f0 <SysTick_Config>
 80037ac:	4603      	mov	r3, r0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b084      	sub	sp, #16
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80037c4:	f7ff fac4 	bl	8002d50 <HAL_GetTick>
 80037c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d008      	beq.n	80037e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2280      	movs	r2, #128	; 0x80
 80037da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e052      	b.n	800388e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0216 	bic.w	r2, r2, #22
 80037f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695a      	ldr	r2, [r3, #20]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003806:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	2b00      	cmp	r3, #0
 800380e:	d103      	bne.n	8003818 <HAL_DMA_Abort+0x62>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003814:	2b00      	cmp	r3, #0
 8003816:	d007      	beq.n	8003828 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0208 	bic.w	r2, r2, #8
 8003826:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0201 	bic.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003838:	e013      	b.n	8003862 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800383a:	f7ff fa89 	bl	8002d50 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b05      	cmp	r3, #5
 8003846:	d90c      	bls.n	8003862 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2220      	movs	r2, #32
 800384c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2203      	movs	r2, #3
 8003852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e015      	b.n	800388e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1e4      	bne.n	800383a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003874:	223f      	movs	r2, #63	; 0x3f
 8003876:	409a      	lsls	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d004      	beq.n	80038b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2280      	movs	r2, #128	; 0x80
 80038ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e00c      	b.n	80038ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2205      	movs	r2, #5
 80038b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0201 	bic.w	r2, r2, #1
 80038ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
	...

080038dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038dc:	b480      	push	{r7}
 80038de:	b089      	sub	sp, #36	; 0x24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038f2:	2300      	movs	r3, #0
 80038f4:	61fb      	str	r3, [r7, #28]
 80038f6:	e159      	b.n	8003bac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038f8:	2201      	movs	r2, #1
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	4013      	ands	r3, r2
 800390a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	429a      	cmp	r2, r3
 8003912:	f040 8148 	bne.w	8003ba6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	2b01      	cmp	r3, #1
 8003920:	d005      	beq.n	800392e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800392a:	2b02      	cmp	r3, #2
 800392c:	d130      	bne.n	8003990 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	2203      	movs	r2, #3
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43db      	mvns	r3, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4013      	ands	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4313      	orrs	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003964:	2201      	movs	r2, #1
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	43db      	mvns	r3, r3
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4013      	ands	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	091b      	lsrs	r3, r3, #4
 800397a:	f003 0201 	and.w	r2, r3, #1
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4313      	orrs	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 0303 	and.w	r3, r3, #3
 8003998:	2b03      	cmp	r3, #3
 800399a:	d017      	beq.n	80039cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	2203      	movs	r2, #3
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	43db      	mvns	r3, r3
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4013      	ands	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f003 0303 	and.w	r3, r3, #3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d123      	bne.n	8003a20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	08da      	lsrs	r2, r3, #3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3208      	adds	r2, #8
 80039e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	220f      	movs	r2, #15
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4013      	ands	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	08da      	lsrs	r2, r3, #3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3208      	adds	r2, #8
 8003a1a:	69b9      	ldr	r1, [r7, #24]
 8003a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	2203      	movs	r2, #3
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	43db      	mvns	r3, r3
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	4013      	ands	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f003 0203 	and.w	r2, r3, #3
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 80a2 	beq.w	8003ba6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	4b57      	ldr	r3, [pc, #348]	; (8003bc4 <HAL_GPIO_Init+0x2e8>)
 8003a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6a:	4a56      	ldr	r2, [pc, #344]	; (8003bc4 <HAL_GPIO_Init+0x2e8>)
 8003a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a70:	6453      	str	r3, [r2, #68]	; 0x44
 8003a72:	4b54      	ldr	r3, [pc, #336]	; (8003bc4 <HAL_GPIO_Init+0x2e8>)
 8003a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a7e:	4a52      	ldr	r2, [pc, #328]	; (8003bc8 <HAL_GPIO_Init+0x2ec>)
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	089b      	lsrs	r3, r3, #2
 8003a84:	3302      	adds	r3, #2
 8003a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	220f      	movs	r2, #15
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a49      	ldr	r2, [pc, #292]	; (8003bcc <HAL_GPIO_Init+0x2f0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d019      	beq.n	8003ade <HAL_GPIO_Init+0x202>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a48      	ldr	r2, [pc, #288]	; (8003bd0 <HAL_GPIO_Init+0x2f4>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d013      	beq.n	8003ada <HAL_GPIO_Init+0x1fe>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a47      	ldr	r2, [pc, #284]	; (8003bd4 <HAL_GPIO_Init+0x2f8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00d      	beq.n	8003ad6 <HAL_GPIO_Init+0x1fa>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a46      	ldr	r2, [pc, #280]	; (8003bd8 <HAL_GPIO_Init+0x2fc>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d007      	beq.n	8003ad2 <HAL_GPIO_Init+0x1f6>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a45      	ldr	r2, [pc, #276]	; (8003bdc <HAL_GPIO_Init+0x300>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d101      	bne.n	8003ace <HAL_GPIO_Init+0x1f2>
 8003aca:	2304      	movs	r3, #4
 8003acc:	e008      	b.n	8003ae0 <HAL_GPIO_Init+0x204>
 8003ace:	2307      	movs	r3, #7
 8003ad0:	e006      	b.n	8003ae0 <HAL_GPIO_Init+0x204>
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e004      	b.n	8003ae0 <HAL_GPIO_Init+0x204>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e002      	b.n	8003ae0 <HAL_GPIO_Init+0x204>
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <HAL_GPIO_Init+0x204>
 8003ade:	2300      	movs	r3, #0
 8003ae0:	69fa      	ldr	r2, [r7, #28]
 8003ae2:	f002 0203 	and.w	r2, r2, #3
 8003ae6:	0092      	lsls	r2, r2, #2
 8003ae8:	4093      	lsls	r3, r2
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003af0:	4935      	ldr	r1, [pc, #212]	; (8003bc8 <HAL_GPIO_Init+0x2ec>)
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	089b      	lsrs	r3, r3, #2
 8003af6:	3302      	adds	r3, #2
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003afe:	4b38      	ldr	r3, [pc, #224]	; (8003be0 <HAL_GPIO_Init+0x304>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	43db      	mvns	r3, r3
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b22:	4a2f      	ldr	r2, [pc, #188]	; (8003be0 <HAL_GPIO_Init+0x304>)
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b28:	4b2d      	ldr	r3, [pc, #180]	; (8003be0 <HAL_GPIO_Init+0x304>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	43db      	mvns	r3, r3
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	4013      	ands	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b4c:	4a24      	ldr	r2, [pc, #144]	; (8003be0 <HAL_GPIO_Init+0x304>)
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b52:	4b23      	ldr	r3, [pc, #140]	; (8003be0 <HAL_GPIO_Init+0x304>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b76:	4a1a      	ldr	r2, [pc, #104]	; (8003be0 <HAL_GPIO_Init+0x304>)
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b7c:	4b18      	ldr	r3, [pc, #96]	; (8003be0 <HAL_GPIO_Init+0x304>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	43db      	mvns	r3, r3
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d003      	beq.n	8003ba0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ba0:	4a0f      	ldr	r2, [pc, #60]	; (8003be0 <HAL_GPIO_Init+0x304>)
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	61fb      	str	r3, [r7, #28]
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	2b0f      	cmp	r3, #15
 8003bb0:	f67f aea2 	bls.w	80038f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bb4:	bf00      	nop
 8003bb6:	bf00      	nop
 8003bb8:	3724      	adds	r7, #36	; 0x24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	40013800 	.word	0x40013800
 8003bcc:	40020000 	.word	0x40020000
 8003bd0:	40020400 	.word	0x40020400
 8003bd4:	40020800 	.word	0x40020800
 8003bd8:	40020c00 	.word	0x40020c00
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	40013c00 	.word	0x40013c00

08003be4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e12b      	b.n	8003e4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d106      	bne.n	8003c10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fe fe26 	bl	800285c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2224      	movs	r2, #36	; 0x24
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0201 	bic.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c48:	f001 fbfc 	bl	8005444 <HAL_RCC_GetPCLK1Freq>
 8003c4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	4a81      	ldr	r2, [pc, #516]	; (8003e58 <HAL_I2C_Init+0x274>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d807      	bhi.n	8003c68 <HAL_I2C_Init+0x84>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4a80      	ldr	r2, [pc, #512]	; (8003e5c <HAL_I2C_Init+0x278>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	bf94      	ite	ls
 8003c60:	2301      	movls	r3, #1
 8003c62:	2300      	movhi	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	e006      	b.n	8003c76 <HAL_I2C_Init+0x92>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4a7d      	ldr	r2, [pc, #500]	; (8003e60 <HAL_I2C_Init+0x27c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	bf94      	ite	ls
 8003c70:	2301      	movls	r3, #1
 8003c72:	2300      	movhi	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e0e7      	b.n	8003e4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4a78      	ldr	r2, [pc, #480]	; (8003e64 <HAL_I2C_Init+0x280>)
 8003c82:	fba2 2303 	umull	r2, r3, r2, r3
 8003c86:	0c9b      	lsrs	r3, r3, #18
 8003c88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	4a6a      	ldr	r2, [pc, #424]	; (8003e58 <HAL_I2C_Init+0x274>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d802      	bhi.n	8003cb8 <HAL_I2C_Init+0xd4>
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	e009      	b.n	8003ccc <HAL_I2C_Init+0xe8>
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cbe:	fb02 f303 	mul.w	r3, r2, r3
 8003cc2:	4a69      	ldr	r2, [pc, #420]	; (8003e68 <HAL_I2C_Init+0x284>)
 8003cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc8:	099b      	lsrs	r3, r3, #6
 8003cca:	3301      	adds	r3, #1
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6812      	ldr	r2, [r2, #0]
 8003cd0:	430b      	orrs	r3, r1
 8003cd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	495c      	ldr	r1, [pc, #368]	; (8003e58 <HAL_I2C_Init+0x274>)
 8003ce8:	428b      	cmp	r3, r1
 8003cea:	d819      	bhi.n	8003d20 <HAL_I2C_Init+0x13c>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	1e59      	subs	r1, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cfa:	1c59      	adds	r1, r3, #1
 8003cfc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d00:	400b      	ands	r3, r1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <HAL_I2C_Init+0x138>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	1e59      	subs	r1, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d14:	3301      	adds	r3, #1
 8003d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d1a:	e051      	b.n	8003dc0 <HAL_I2C_Init+0x1dc>
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	e04f      	b.n	8003dc0 <HAL_I2C_Init+0x1dc>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d111      	bne.n	8003d4c <HAL_I2C_Init+0x168>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	1e58      	subs	r0, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6859      	ldr	r1, [r3, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	440b      	add	r3, r1
 8003d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	bf0c      	ite	eq
 8003d44:	2301      	moveq	r3, #1
 8003d46:	2300      	movne	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	e012      	b.n	8003d72 <HAL_I2C_Init+0x18e>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	1e58      	subs	r0, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6859      	ldr	r1, [r3, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	0099      	lsls	r1, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d62:	3301      	adds	r3, #1
 8003d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	bf0c      	ite	eq
 8003d6c:	2301      	moveq	r3, #1
 8003d6e:	2300      	movne	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_I2C_Init+0x196>
 8003d76:	2301      	movs	r3, #1
 8003d78:	e022      	b.n	8003dc0 <HAL_I2C_Init+0x1dc>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10e      	bne.n	8003da0 <HAL_I2C_Init+0x1bc>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	1e58      	subs	r0, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6859      	ldr	r1, [r3, #4]
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	440b      	add	r3, r1
 8003d90:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d94:	3301      	adds	r3, #1
 8003d96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d9e:	e00f      	b.n	8003dc0 <HAL_I2C_Init+0x1dc>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	1e58      	subs	r0, r3, #1
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6859      	ldr	r1, [r3, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	0099      	lsls	r1, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003db6:	3301      	adds	r3, #1
 8003db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	6809      	ldr	r1, [r1, #0]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69da      	ldr	r2, [r3, #28]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003dee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6911      	ldr	r1, [r2, #16]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	68d2      	ldr	r2, [r2, #12]
 8003dfa:	4311      	orrs	r1, r2
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6812      	ldr	r2, [r2, #0]
 8003e00:	430b      	orrs	r3, r1
 8003e02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695a      	ldr	r2, [r3, #20]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	000186a0 	.word	0x000186a0
 8003e5c:	001e847f 	.word	0x001e847f
 8003e60:	003d08ff 	.word	0x003d08ff
 8003e64:	431bde83 	.word	0x431bde83
 8003e68:	10624dd3 	.word	0x10624dd3

08003e6c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af02      	add	r7, sp, #8
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	4608      	mov	r0, r1
 8003e76:	4611      	mov	r1, r2
 8003e78:	461a      	mov	r2, r3
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	817b      	strh	r3, [r7, #10]
 8003e7e:	460b      	mov	r3, r1
 8003e80:	813b      	strh	r3, [r7, #8]
 8003e82:	4613      	mov	r3, r2
 8003e84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e86:	f7fe ff63 	bl	8002d50 <HAL_GetTick>
 8003e8a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	f040 80d9 	bne.w	800404c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	2319      	movs	r3, #25
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	496d      	ldr	r1, [pc, #436]	; (8004058 <HAL_I2C_Mem_Write+0x1ec>)
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 fc7f 	bl	80047a8 <I2C_WaitOnFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e0cc      	b.n	800404e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d101      	bne.n	8003ec2 <HAL_I2C_Mem_Write+0x56>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	e0c5      	b.n	800404e <HAL_I2C_Mem_Write+0x1e2>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d007      	beq.n	8003ee8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ef6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2221      	movs	r2, #33	; 0x21
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2240      	movs	r2, #64	; 0x40
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6a3a      	ldr	r2, [r7, #32]
 8003f12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4a4d      	ldr	r2, [pc, #308]	; (800405c <HAL_I2C_Mem_Write+0x1f0>)
 8003f28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f2a:	88f8      	ldrh	r0, [r7, #6]
 8003f2c:	893a      	ldrh	r2, [r7, #8]
 8003f2e:	8979      	ldrh	r1, [r7, #10]
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	9301      	str	r3, [sp, #4]
 8003f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	4603      	mov	r3, r0
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 fab6 	bl	80044ac <I2C_RequestMemoryWrite>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d052      	beq.n	8003fec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e081      	b.n	800404e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 fd00 	bl	8004954 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00d      	beq.n	8003f76 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d107      	bne.n	8003f72 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e06b      	b.n	800404e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	781a      	ldrb	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d11b      	bne.n	8003fec <HAL_I2C_Mem_Write+0x180>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d017      	beq.n	8003fec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	781a      	ldrb	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1aa      	bne.n	8003f4a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 fcec 	bl	80049d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00d      	beq.n	8004020 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	2b04      	cmp	r3, #4
 800400a:	d107      	bne.n	800401c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800401a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e016      	b.n	800404e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800402e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2220      	movs	r2, #32
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004048:	2300      	movs	r3, #0
 800404a:	e000      	b.n	800404e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800404c:	2302      	movs	r3, #2
  }
}
 800404e:	4618      	mov	r0, r3
 8004050:	3718      	adds	r7, #24
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	00100002 	.word	0x00100002
 800405c:	ffff0000 	.word	0xffff0000

08004060 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08c      	sub	sp, #48	; 0x30
 8004064:	af02      	add	r7, sp, #8
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	4608      	mov	r0, r1
 800406a:	4611      	mov	r1, r2
 800406c:	461a      	mov	r2, r3
 800406e:	4603      	mov	r3, r0
 8004070:	817b      	strh	r3, [r7, #10]
 8004072:	460b      	mov	r3, r1
 8004074:	813b      	strh	r3, [r7, #8]
 8004076:	4613      	mov	r3, r2
 8004078:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800407a:	f7fe fe69 	bl	8002d50 <HAL_GetTick>
 800407e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b20      	cmp	r3, #32
 800408a:	f040 8208 	bne.w	800449e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	2319      	movs	r3, #25
 8004094:	2201      	movs	r2, #1
 8004096:	497b      	ldr	r1, [pc, #492]	; (8004284 <HAL_I2C_Mem_Read+0x224>)
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 fb85 	bl	80047a8 <I2C_WaitOnFlagUntilTimeout>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80040a4:	2302      	movs	r3, #2
 80040a6:	e1fb      	b.n	80044a0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <HAL_I2C_Mem_Read+0x56>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e1f4      	b.n	80044a0 <HAL_I2C_Mem_Read+0x440>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d007      	beq.n	80040dc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2222      	movs	r2, #34	; 0x22
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2240      	movs	r2, #64	; 0x40
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004106:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800410c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004112:	b29a      	uxth	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4a5b      	ldr	r2, [pc, #364]	; (8004288 <HAL_I2C_Mem_Read+0x228>)
 800411c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800411e:	88f8      	ldrh	r0, [r7, #6]
 8004120:	893a      	ldrh	r2, [r7, #8]
 8004122:	8979      	ldrh	r1, [r7, #10]
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	9301      	str	r3, [sp, #4]
 8004128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	4603      	mov	r3, r0
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 fa52 	bl	80045d8 <I2C_RequestMemoryRead>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e1b0      	b.n	80044a0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004142:	2b00      	cmp	r3, #0
 8004144:	d113      	bne.n	800416e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004146:	2300      	movs	r3, #0
 8004148:	623b      	str	r3, [r7, #32]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	623b      	str	r3, [r7, #32]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	623b      	str	r3, [r7, #32]
 800415a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	e184      	b.n	8004478 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004172:	2b01      	cmp	r3, #1
 8004174:	d11b      	bne.n	80041ae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004184:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004186:	2300      	movs	r3, #0
 8004188:	61fb      	str	r3, [r7, #28]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	61fb      	str	r3, [r7, #28]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	61fb      	str	r3, [r7, #28]
 800419a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	e164      	b.n	8004478 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d11b      	bne.n	80041ee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d6:	2300      	movs	r3, #0
 80041d8:	61bb      	str	r3, [r7, #24]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	61bb      	str	r3, [r7, #24]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	61bb      	str	r3, [r7, #24]
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	e144      	b.n	8004478 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ee:	2300      	movs	r3, #0
 80041f0:	617b      	str	r3, [r7, #20]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	617b      	str	r3, [r7, #20]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004204:	e138      	b.n	8004478 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420a:	2b03      	cmp	r3, #3
 800420c:	f200 80f1 	bhi.w	80043f2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004214:	2b01      	cmp	r3, #1
 8004216:	d123      	bne.n	8004260 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800421a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 fc1b 	bl	8004a58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e139      	b.n	80044a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691a      	ldr	r2, [r3, #16]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	b2d2      	uxtb	r2, r2
 8004238:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004254:	b29b      	uxth	r3, r3
 8004256:	3b01      	subs	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800425e:	e10b      	b.n	8004478 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004264:	2b02      	cmp	r3, #2
 8004266:	d14e      	bne.n	8004306 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426e:	2200      	movs	r2, #0
 8004270:	4906      	ldr	r1, [pc, #24]	; (800428c <HAL_I2C_Mem_Read+0x22c>)
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 fa98 	bl	80047a8 <I2C_WaitOnFlagUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d008      	beq.n	8004290 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e10e      	b.n	80044a0 <HAL_I2C_Mem_Read+0x440>
 8004282:	bf00      	nop
 8004284:	00100002 	.word	0x00100002
 8004288:	ffff0000 	.word	0xffff0000
 800428c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800429e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	691a      	ldr	r2, [r3, #16]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004304:	e0b8      	b.n	8004478 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800430c:	2200      	movs	r2, #0
 800430e:	4966      	ldr	r1, [pc, #408]	; (80044a8 <HAL_I2C_Mem_Read+0x448>)
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 fa49 	bl	80047a8 <I2C_WaitOnFlagUntilTimeout>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e0bf      	b.n	80044a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800432e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691a      	ldr	r2, [r3, #16]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004358:	b29b      	uxth	r3, r3
 800435a:	3b01      	subs	r3, #1
 800435c:	b29a      	uxth	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004368:	2200      	movs	r2, #0
 800436a:	494f      	ldr	r1, [pc, #316]	; (80044a8 <HAL_I2C_Mem_Read+0x448>)
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 fa1b 	bl	80047a8 <I2C_WaitOnFlagUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e091      	b.n	80044a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800438a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691a      	ldr	r2, [r3, #16]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	691a      	ldr	r2, [r3, #16]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043f0:	e042      	b.n	8004478 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 fb2e 	bl	8004a58 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e04c      	b.n	80044a0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	691a      	ldr	r2, [r3, #16]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442e:	b29b      	uxth	r3, r3
 8004430:	3b01      	subs	r3, #1
 8004432:	b29a      	uxth	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	2b04      	cmp	r3, #4
 8004444:	d118      	bne.n	8004478 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	691a      	ldr	r2, [r3, #16]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446e:	b29b      	uxth	r3, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447c:	2b00      	cmp	r3, #0
 800447e:	f47f aec2 	bne.w	8004206 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2220      	movs	r2, #32
 8004486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	e000      	b.n	80044a0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800449e:	2302      	movs	r3, #2
  }
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3728      	adds	r7, #40	; 0x28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	00010004 	.word	0x00010004

080044ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af02      	add	r7, sp, #8
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	4608      	mov	r0, r1
 80044b6:	4611      	mov	r1, r2
 80044b8:	461a      	mov	r2, r3
 80044ba:	4603      	mov	r3, r0
 80044bc:	817b      	strh	r3, [r7, #10]
 80044be:	460b      	mov	r3, r1
 80044c0:	813b      	strh	r3, [r7, #8]
 80044c2:	4613      	mov	r3, r2
 80044c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	9300      	str	r3, [sp, #0]
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	2200      	movs	r2, #0
 80044de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 f960 	bl	80047a8 <I2C_WaitOnFlagUntilTimeout>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00d      	beq.n	800450a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044fc:	d103      	bne.n	8004506 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004504:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e05f      	b.n	80045ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800450a:	897b      	ldrh	r3, [r7, #10]
 800450c:	b2db      	uxtb	r3, r3
 800450e:	461a      	mov	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004518:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	6a3a      	ldr	r2, [r7, #32]
 800451e:	492d      	ldr	r1, [pc, #180]	; (80045d4 <I2C_RequestMemoryWrite+0x128>)
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 f998 	bl	8004856 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e04c      	b.n	80045ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004530:	2300      	movs	r3, #0
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004548:	6a39      	ldr	r1, [r7, #32]
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 fa02 	bl	8004954 <I2C_WaitOnTXEFlagUntilTimeout>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00d      	beq.n	8004572 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	2b04      	cmp	r3, #4
 800455c:	d107      	bne.n	800456e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800456c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e02b      	b.n	80045ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004572:	88fb      	ldrh	r3, [r7, #6]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d105      	bne.n	8004584 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004578:	893b      	ldrh	r3, [r7, #8]
 800457a:	b2da      	uxtb	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	611a      	str	r2, [r3, #16]
 8004582:	e021      	b.n	80045c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004584:	893b      	ldrh	r3, [r7, #8]
 8004586:	0a1b      	lsrs	r3, r3, #8
 8004588:	b29b      	uxth	r3, r3
 800458a:	b2da      	uxtb	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004594:	6a39      	ldr	r1, [r7, #32]
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 f9dc 	bl	8004954 <I2C_WaitOnTXEFlagUntilTimeout>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00d      	beq.n	80045be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d107      	bne.n	80045ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e005      	b.n	80045ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045be:	893b      	ldrh	r3, [r7, #8]
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	00010002 	.word	0x00010002

080045d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b088      	sub	sp, #32
 80045dc:	af02      	add	r7, sp, #8
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	4608      	mov	r0, r1
 80045e2:	4611      	mov	r1, r2
 80045e4:	461a      	mov	r2, r3
 80045e6:	4603      	mov	r3, r0
 80045e8:	817b      	strh	r3, [r7, #10]
 80045ea:	460b      	mov	r3, r1
 80045ec:	813b      	strh	r3, [r7, #8]
 80045ee:	4613      	mov	r3, r2
 80045f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004600:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004610:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	2200      	movs	r2, #0
 800461a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 f8c2 	bl	80047a8 <I2C_WaitOnFlagUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00d      	beq.n	8004646 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004638:	d103      	bne.n	8004642 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004640:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e0aa      	b.n	800479c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004646:	897b      	ldrh	r3, [r7, #10]
 8004648:	b2db      	uxtb	r3, r3
 800464a:	461a      	mov	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004654:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	6a3a      	ldr	r2, [r7, #32]
 800465a:	4952      	ldr	r1, [pc, #328]	; (80047a4 <I2C_RequestMemoryRead+0x1cc>)
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 f8fa 	bl	8004856 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e097      	b.n	800479c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	617b      	str	r3, [r7, #20]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	617b      	str	r3, [r7, #20]
 8004680:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004684:	6a39      	ldr	r1, [r7, #32]
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 f964 	bl	8004954 <I2C_WaitOnTXEFlagUntilTimeout>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00d      	beq.n	80046ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	2b04      	cmp	r3, #4
 8004698:	d107      	bne.n	80046aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e076      	b.n	800479c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046ae:	88fb      	ldrh	r3, [r7, #6]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d105      	bne.n	80046c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046b4:	893b      	ldrh	r3, [r7, #8]
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	611a      	str	r2, [r3, #16]
 80046be:	e021      	b.n	8004704 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046c0:	893b      	ldrh	r3, [r7, #8]
 80046c2:	0a1b      	lsrs	r3, r3, #8
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d0:	6a39      	ldr	r1, [r7, #32]
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 f93e 	bl	8004954 <I2C_WaitOnTXEFlagUntilTimeout>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00d      	beq.n	80046fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d107      	bne.n	80046f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e050      	b.n	800479c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046fa:	893b      	ldrh	r3, [r7, #8]
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004706:	6a39      	ldr	r1, [r7, #32]
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 f923 	bl	8004954 <I2C_WaitOnTXEFlagUntilTimeout>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00d      	beq.n	8004730 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	2b04      	cmp	r3, #4
 800471a:	d107      	bne.n	800472c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800472a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e035      	b.n	800479c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800473e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	2200      	movs	r2, #0
 8004748:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 f82b 	bl	80047a8 <I2C_WaitOnFlagUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00d      	beq.n	8004774 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004766:	d103      	bne.n	8004770 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800476e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e013      	b.n	800479c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004774:	897b      	ldrh	r3, [r7, #10]
 8004776:	b2db      	uxtb	r3, r3
 8004778:	f043 0301 	orr.w	r3, r3, #1
 800477c:	b2da      	uxtb	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	6a3a      	ldr	r2, [r7, #32]
 8004788:	4906      	ldr	r1, [pc, #24]	; (80047a4 <I2C_RequestMemoryRead+0x1cc>)
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 f863 	bl	8004856 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	00010002 	.word	0x00010002

080047a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	603b      	str	r3, [r7, #0]
 80047b4:	4613      	mov	r3, r2
 80047b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047b8:	e025      	b.n	8004806 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c0:	d021      	beq.n	8004806 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c2:	f7fe fac5 	bl	8002d50 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d302      	bcc.n	80047d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d116      	bne.n	8004806 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2220      	movs	r2, #32
 80047e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	f043 0220 	orr.w	r2, r3, #32
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e023      	b.n	800484e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	0c1b      	lsrs	r3, r3, #16
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b01      	cmp	r3, #1
 800480e:	d10d      	bne.n	800482c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	43da      	mvns	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	4013      	ands	r3, r2
 800481c:	b29b      	uxth	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	bf0c      	ite	eq
 8004822:	2301      	moveq	r3, #1
 8004824:	2300      	movne	r3, #0
 8004826:	b2db      	uxtb	r3, r3
 8004828:	461a      	mov	r2, r3
 800482a:	e00c      	b.n	8004846 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	43da      	mvns	r2, r3
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	4013      	ands	r3, r2
 8004838:	b29b      	uxth	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	bf0c      	ite	eq
 800483e:	2301      	moveq	r3, #1
 8004840:	2300      	movne	r3, #0
 8004842:	b2db      	uxtb	r3, r3
 8004844:	461a      	mov	r2, r3
 8004846:	79fb      	ldrb	r3, [r7, #7]
 8004848:	429a      	cmp	r2, r3
 800484a:	d0b6      	beq.n	80047ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b084      	sub	sp, #16
 800485a:	af00      	add	r7, sp, #0
 800485c:	60f8      	str	r0, [r7, #12]
 800485e:	60b9      	str	r1, [r7, #8]
 8004860:	607a      	str	r2, [r7, #4]
 8004862:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004864:	e051      	b.n	800490a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004874:	d123      	bne.n	80048be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004884:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800488e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2220      	movs	r2, #32
 800489a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	f043 0204 	orr.w	r2, r3, #4
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e046      	b.n	800494c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c4:	d021      	beq.n	800490a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048c6:	f7fe fa43 	bl	8002d50 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d302      	bcc.n	80048dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d116      	bne.n	800490a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	f043 0220 	orr.w	r2, r3, #32
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e020      	b.n	800494c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	0c1b      	lsrs	r3, r3, #16
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b01      	cmp	r3, #1
 8004912:	d10c      	bne.n	800492e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	43da      	mvns	r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	4013      	ands	r3, r2
 8004920:	b29b      	uxth	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	bf14      	ite	ne
 8004926:	2301      	movne	r3, #1
 8004928:	2300      	moveq	r3, #0
 800492a:	b2db      	uxtb	r3, r3
 800492c:	e00b      	b.n	8004946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	43da      	mvns	r2, r3
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	4013      	ands	r3, r2
 800493a:	b29b      	uxth	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	bf14      	ite	ne
 8004940:	2301      	movne	r3, #1
 8004942:	2300      	moveq	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d18d      	bne.n	8004866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004960:	e02d      	b.n	80049be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 f8ce 	bl	8004b04 <I2C_IsAcknowledgeFailed>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e02d      	b.n	80049ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004978:	d021      	beq.n	80049be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800497a:	f7fe f9e9 	bl	8002d50 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	429a      	cmp	r2, r3
 8004988:	d302      	bcc.n	8004990 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d116      	bne.n	80049be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2220      	movs	r2, #32
 800499a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	f043 0220 	orr.w	r2, r3, #32
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e007      	b.n	80049ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c8:	2b80      	cmp	r3, #128	; 0x80
 80049ca:	d1ca      	bne.n	8004962 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b084      	sub	sp, #16
 80049da:	af00      	add	r7, sp, #0
 80049dc:	60f8      	str	r0, [r7, #12]
 80049de:	60b9      	str	r1, [r7, #8]
 80049e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049e2:	e02d      	b.n	8004a40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 f88d 	bl	8004b04 <I2C_IsAcknowledgeFailed>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e02d      	b.n	8004a50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fa:	d021      	beq.n	8004a40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049fc:	f7fe f9a8 	bl	8002d50 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d302      	bcc.n	8004a12 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d116      	bne.n	8004a40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	f043 0220 	orr.w	r2, r3, #32
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e007      	b.n	8004a50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	f003 0304 	and.w	r3, r3, #4
 8004a4a:	2b04      	cmp	r3, #4
 8004a4c:	d1ca      	bne.n	80049e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a64:	e042      	b.n	8004aec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	f003 0310 	and.w	r3, r3, #16
 8004a70:	2b10      	cmp	r3, #16
 8004a72:	d119      	bne.n	8004aa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f06f 0210 	mvn.w	r2, #16
 8004a7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e029      	b.n	8004afc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa8:	f7fe f952 	bl	8002d50 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d302      	bcc.n	8004abe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d116      	bne.n	8004aec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad8:	f043 0220 	orr.w	r2, r3, #32
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e007      	b.n	8004afc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af6:	2b40      	cmp	r3, #64	; 0x40
 8004af8:	d1b5      	bne.n	8004a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b1a:	d11b      	bne.n	8004b54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b40:	f043 0204 	orr.w	r2, r3, #4
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e000      	b.n	8004b56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
	...

08004b64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e267      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d075      	beq.n	8004c6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b82:	4b88      	ldr	r3, [pc, #544]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 030c 	and.w	r3, r3, #12
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d00c      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b8e:	4b85      	ldr	r3, [pc, #532]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b96:	2b08      	cmp	r3, #8
 8004b98:	d112      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b9a:	4b82      	ldr	r3, [pc, #520]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ba2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ba6:	d10b      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba8:	4b7e      	ldr	r3, [pc, #504]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d05b      	beq.n	8004c6c <HAL_RCC_OscConfig+0x108>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d157      	bne.n	8004c6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e242      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc8:	d106      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x74>
 8004bca:	4b76      	ldr	r3, [pc, #472]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a75      	ldr	r2, [pc, #468]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bd4:	6013      	str	r3, [r2, #0]
 8004bd6:	e01d      	b.n	8004c14 <HAL_RCC_OscConfig+0xb0>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004be0:	d10c      	bne.n	8004bfc <HAL_RCC_OscConfig+0x98>
 8004be2:	4b70      	ldr	r3, [pc, #448]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a6f      	ldr	r2, [pc, #444]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bec:	6013      	str	r3, [r2, #0]
 8004bee:	4b6d      	ldr	r3, [pc, #436]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a6c      	ldr	r2, [pc, #432]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	e00b      	b.n	8004c14 <HAL_RCC_OscConfig+0xb0>
 8004bfc:	4b69      	ldr	r3, [pc, #420]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a68      	ldr	r2, [pc, #416]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	4b66      	ldr	r3, [pc, #408]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a65      	ldr	r2, [pc, #404]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d013      	beq.n	8004c44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c1c:	f7fe f898 	bl	8002d50 <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c24:	f7fe f894 	bl	8002d50 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b64      	cmp	r3, #100	; 0x64
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e207      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c36:	4b5b      	ldr	r3, [pc, #364]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0f0      	beq.n	8004c24 <HAL_RCC_OscConfig+0xc0>
 8004c42:	e014      	b.n	8004c6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c44:	f7fe f884 	bl	8002d50 <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c4c:	f7fe f880 	bl	8002d50 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b64      	cmp	r3, #100	; 0x64
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e1f3      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c5e:	4b51      	ldr	r3, [pc, #324]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1f0      	bne.n	8004c4c <HAL_RCC_OscConfig+0xe8>
 8004c6a:	e000      	b.n	8004c6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d063      	beq.n	8004d42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c7a:	4b4a      	ldr	r3, [pc, #296]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 030c 	and.w	r3, r3, #12
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00b      	beq.n	8004c9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c86:	4b47      	ldr	r3, [pc, #284]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c8e:	2b08      	cmp	r3, #8
 8004c90:	d11c      	bne.n	8004ccc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c92:	4b44      	ldr	r3, [pc, #272]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d116      	bne.n	8004ccc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c9e:	4b41      	ldr	r3, [pc, #260]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d005      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x152>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d001      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e1c7      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb6:	4b3b      	ldr	r3, [pc, #236]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	4937      	ldr	r1, [pc, #220]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cca:	e03a      	b.n	8004d42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d020      	beq.n	8004d16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cd4:	4b34      	ldr	r3, [pc, #208]	; (8004da8 <HAL_RCC_OscConfig+0x244>)
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cda:	f7fe f839 	bl	8002d50 <HAL_GetTick>
 8004cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ce2:	f7fe f835 	bl	8002d50 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e1a8      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf4:	4b2b      	ldr	r3, [pc, #172]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0f0      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d00:	4b28      	ldr	r3, [pc, #160]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	4925      	ldr	r1, [pc, #148]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	600b      	str	r3, [r1, #0]
 8004d14:	e015      	b.n	8004d42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d16:	4b24      	ldr	r3, [pc, #144]	; (8004da8 <HAL_RCC_OscConfig+0x244>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1c:	f7fe f818 	bl	8002d50 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d24:	f7fe f814 	bl	8002d50 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e187      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d36:	4b1b      	ldr	r3, [pc, #108]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1f0      	bne.n	8004d24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d036      	beq.n	8004dbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d016      	beq.n	8004d84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d56:	4b15      	ldr	r3, [pc, #84]	; (8004dac <HAL_RCC_OscConfig+0x248>)
 8004d58:	2201      	movs	r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d5c:	f7fd fff8 	bl	8002d50 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d64:	f7fd fff4 	bl	8002d50 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e167      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d76:	4b0b      	ldr	r3, [pc, #44]	; (8004da4 <HAL_RCC_OscConfig+0x240>)
 8004d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0f0      	beq.n	8004d64 <HAL_RCC_OscConfig+0x200>
 8004d82:	e01b      	b.n	8004dbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d84:	4b09      	ldr	r3, [pc, #36]	; (8004dac <HAL_RCC_OscConfig+0x248>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d8a:	f7fd ffe1 	bl	8002d50 <HAL_GetTick>
 8004d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d90:	e00e      	b.n	8004db0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d92:	f7fd ffdd 	bl	8002d50 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d907      	bls.n	8004db0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e150      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
 8004da4:	40023800 	.word	0x40023800
 8004da8:	42470000 	.word	0x42470000
 8004dac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db0:	4b88      	ldr	r3, [pc, #544]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1ea      	bne.n	8004d92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 8097 	beq.w	8004ef8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dce:	4b81      	ldr	r3, [pc, #516]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10f      	bne.n	8004dfa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60bb      	str	r3, [r7, #8]
 8004dde:	4b7d      	ldr	r3, [pc, #500]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	4a7c      	ldr	r2, [pc, #496]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de8:	6413      	str	r3, [r2, #64]	; 0x40
 8004dea:	4b7a      	ldr	r3, [pc, #488]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df2:	60bb      	str	r3, [r7, #8]
 8004df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004df6:	2301      	movs	r3, #1
 8004df8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dfa:	4b77      	ldr	r3, [pc, #476]	; (8004fd8 <HAL_RCC_OscConfig+0x474>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d118      	bne.n	8004e38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e06:	4b74      	ldr	r3, [pc, #464]	; (8004fd8 <HAL_RCC_OscConfig+0x474>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a73      	ldr	r2, [pc, #460]	; (8004fd8 <HAL_RCC_OscConfig+0x474>)
 8004e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e12:	f7fd ff9d 	bl	8002d50 <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e1a:	f7fd ff99 	bl	8002d50 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e10c      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e2c:	4b6a      	ldr	r3, [pc, #424]	; (8004fd8 <HAL_RCC_OscConfig+0x474>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0f0      	beq.n	8004e1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d106      	bne.n	8004e4e <HAL_RCC_OscConfig+0x2ea>
 8004e40:	4b64      	ldr	r3, [pc, #400]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e44:	4a63      	ldr	r2, [pc, #396]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e4c:	e01c      	b.n	8004e88 <HAL_RCC_OscConfig+0x324>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	2b05      	cmp	r3, #5
 8004e54:	d10c      	bne.n	8004e70 <HAL_RCC_OscConfig+0x30c>
 8004e56:	4b5f      	ldr	r3, [pc, #380]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5a:	4a5e      	ldr	r2, [pc, #376]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004e5c:	f043 0304 	orr.w	r3, r3, #4
 8004e60:	6713      	str	r3, [r2, #112]	; 0x70
 8004e62:	4b5c      	ldr	r3, [pc, #368]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e66:	4a5b      	ldr	r2, [pc, #364]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004e68:	f043 0301 	orr.w	r3, r3, #1
 8004e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e6e:	e00b      	b.n	8004e88 <HAL_RCC_OscConfig+0x324>
 8004e70:	4b58      	ldr	r3, [pc, #352]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e74:	4a57      	ldr	r2, [pc, #348]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004e76:	f023 0301 	bic.w	r3, r3, #1
 8004e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e7c:	4b55      	ldr	r3, [pc, #340]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e80:	4a54      	ldr	r2, [pc, #336]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004e82:	f023 0304 	bic.w	r3, r3, #4
 8004e86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d015      	beq.n	8004ebc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e90:	f7fd ff5e 	bl	8002d50 <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e96:	e00a      	b.n	8004eae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e98:	f7fd ff5a 	bl	8002d50 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e0cb      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eae:	4b49      	ldr	r3, [pc, #292]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0ee      	beq.n	8004e98 <HAL_RCC_OscConfig+0x334>
 8004eba:	e014      	b.n	8004ee6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ebc:	f7fd ff48 	bl	8002d50 <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ec2:	e00a      	b.n	8004eda <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ec4:	f7fd ff44 	bl	8002d50 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e0b5      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eda:	4b3e      	ldr	r3, [pc, #248]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1ee      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ee6:	7dfb      	ldrb	r3, [r7, #23]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d105      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eec:	4b39      	ldr	r3, [pc, #228]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef0:	4a38      	ldr	r2, [pc, #224]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ef6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 80a1 	beq.w	8005044 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f02:	4b34      	ldr	r3, [pc, #208]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 030c 	and.w	r3, r3, #12
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d05c      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d141      	bne.n	8004f9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f16:	4b31      	ldr	r3, [pc, #196]	; (8004fdc <HAL_RCC_OscConfig+0x478>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f1c:	f7fd ff18 	bl	8002d50 <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f22:	e008      	b.n	8004f36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f24:	f7fd ff14 	bl	8002d50 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e087      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f36:	4b27      	ldr	r3, [pc, #156]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1f0      	bne.n	8004f24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69da      	ldr	r2, [r3, #28]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	019b      	lsls	r3, r3, #6
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f58:	085b      	lsrs	r3, r3, #1
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	041b      	lsls	r3, r3, #16
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	061b      	lsls	r3, r3, #24
 8004f66:	491b      	ldr	r1, [pc, #108]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f6c:	4b1b      	ldr	r3, [pc, #108]	; (8004fdc <HAL_RCC_OscConfig+0x478>)
 8004f6e:	2201      	movs	r2, #1
 8004f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f72:	f7fd feed 	bl	8002d50 <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f78:	e008      	b.n	8004f8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f7a:	f7fd fee9 	bl	8002d50 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e05c      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f8c:	4b11      	ldr	r3, [pc, #68]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0f0      	beq.n	8004f7a <HAL_RCC_OscConfig+0x416>
 8004f98:	e054      	b.n	8005044 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f9a:	4b10      	ldr	r3, [pc, #64]	; (8004fdc <HAL_RCC_OscConfig+0x478>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa0:	f7fd fed6 	bl	8002d50 <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fa8:	f7fd fed2 	bl	8002d50 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e045      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fba:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <HAL_RCC_OscConfig+0x470>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1f0      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x444>
 8004fc6:	e03d      	b.n	8005044 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d107      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e038      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	40007000 	.word	0x40007000
 8004fdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004fe0:	4b1b      	ldr	r3, [pc, #108]	; (8005050 <HAL_RCC_OscConfig+0x4ec>)
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d028      	beq.n	8005040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d121      	bne.n	8005040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005006:	429a      	cmp	r2, r3
 8005008:	d11a      	bne.n	8005040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005010:	4013      	ands	r3, r2
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005016:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005018:	4293      	cmp	r3, r2
 800501a:	d111      	bne.n	8005040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005026:	085b      	lsrs	r3, r3, #1
 8005028:	3b01      	subs	r3, #1
 800502a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800502c:	429a      	cmp	r2, r3
 800502e:	d107      	bne.n	8005040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800503c:	429a      	cmp	r2, r3
 800503e:	d001      	beq.n	8005044 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e000      	b.n	8005046 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	40023800 	.word	0x40023800

08005054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e0cc      	b.n	8005202 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005068:	4b68      	ldr	r3, [pc, #416]	; (800520c <HAL_RCC_ClockConfig+0x1b8>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0307 	and.w	r3, r3, #7
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	429a      	cmp	r2, r3
 8005074:	d90c      	bls.n	8005090 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005076:	4b65      	ldr	r3, [pc, #404]	; (800520c <HAL_RCC_ClockConfig+0x1b8>)
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800507e:	4b63      	ldr	r3, [pc, #396]	; (800520c <HAL_RCC_ClockConfig+0x1b8>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	429a      	cmp	r2, r3
 800508a:	d001      	beq.n	8005090 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e0b8      	b.n	8005202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d020      	beq.n	80050de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d005      	beq.n	80050b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050a8:	4b59      	ldr	r3, [pc, #356]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	4a58      	ldr	r2, [pc, #352]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 80050ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0308 	and.w	r3, r3, #8
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d005      	beq.n	80050cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050c0:	4b53      	ldr	r3, [pc, #332]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	4a52      	ldr	r2, [pc, #328]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 80050c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050cc:	4b50      	ldr	r3, [pc, #320]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	494d      	ldr	r1, [pc, #308]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d044      	beq.n	8005174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d107      	bne.n	8005102 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050f2:	4b47      	ldr	r3, [pc, #284]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d119      	bne.n	8005132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e07f      	b.n	8005202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2b02      	cmp	r3, #2
 8005108:	d003      	beq.n	8005112 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800510e:	2b03      	cmp	r3, #3
 8005110:	d107      	bne.n	8005122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005112:	4b3f      	ldr	r3, [pc, #252]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d109      	bne.n	8005132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e06f      	b.n	8005202 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005122:	4b3b      	ldr	r3, [pc, #236]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e067      	b.n	8005202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005132:	4b37      	ldr	r3, [pc, #220]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f023 0203 	bic.w	r2, r3, #3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	4934      	ldr	r1, [pc, #208]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 8005140:	4313      	orrs	r3, r2
 8005142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005144:	f7fd fe04 	bl	8002d50 <HAL_GetTick>
 8005148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800514a:	e00a      	b.n	8005162 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800514c:	f7fd fe00 	bl	8002d50 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	f241 3288 	movw	r2, #5000	; 0x1388
 800515a:	4293      	cmp	r3, r2
 800515c:	d901      	bls.n	8005162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e04f      	b.n	8005202 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005162:	4b2b      	ldr	r3, [pc, #172]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f003 020c 	and.w	r2, r3, #12
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	429a      	cmp	r2, r3
 8005172:	d1eb      	bne.n	800514c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005174:	4b25      	ldr	r3, [pc, #148]	; (800520c <HAL_RCC_ClockConfig+0x1b8>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	429a      	cmp	r2, r3
 8005180:	d20c      	bcs.n	800519c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005182:	4b22      	ldr	r3, [pc, #136]	; (800520c <HAL_RCC_ClockConfig+0x1b8>)
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800518a:	4b20      	ldr	r3, [pc, #128]	; (800520c <HAL_RCC_ClockConfig+0x1b8>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	429a      	cmp	r2, r3
 8005196:	d001      	beq.n	800519c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e032      	b.n	8005202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d008      	beq.n	80051ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051a8:	4b19      	ldr	r3, [pc, #100]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	4916      	ldr	r1, [pc, #88]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0308 	and.w	r3, r3, #8
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d009      	beq.n	80051da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051c6:	4b12      	ldr	r3, [pc, #72]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	490e      	ldr	r1, [pc, #56]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051da:	f000 f821 	bl	8005220 <HAL_RCC_GetSysClockFreq>
 80051de:	4602      	mov	r2, r0
 80051e0:	4b0b      	ldr	r3, [pc, #44]	; (8005210 <HAL_RCC_ClockConfig+0x1bc>)
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	091b      	lsrs	r3, r3, #4
 80051e6:	f003 030f 	and.w	r3, r3, #15
 80051ea:	490a      	ldr	r1, [pc, #40]	; (8005214 <HAL_RCC_ClockConfig+0x1c0>)
 80051ec:	5ccb      	ldrb	r3, [r1, r3]
 80051ee:	fa22 f303 	lsr.w	r3, r2, r3
 80051f2:	4a09      	ldr	r2, [pc, #36]	; (8005218 <HAL_RCC_ClockConfig+0x1c4>)
 80051f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051f6:	4b09      	ldr	r3, [pc, #36]	; (800521c <HAL_RCC_ClockConfig+0x1c8>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fd fd64 	bl	8002cc8 <HAL_InitTick>

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	40023c00 	.word	0x40023c00
 8005210:	40023800 	.word	0x40023800
 8005214:	0800b794 	.word	0x0800b794
 8005218:	200000a8 	.word	0x200000a8
 800521c:	200000ac 	.word	0x200000ac

08005220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005224:	b094      	sub	sp, #80	; 0x50
 8005226:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	647b      	str	r3, [r7, #68]	; 0x44
 800522c:	2300      	movs	r3, #0
 800522e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005230:	2300      	movs	r3, #0
 8005232:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005234:	2300      	movs	r3, #0
 8005236:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005238:	4b79      	ldr	r3, [pc, #484]	; (8005420 <HAL_RCC_GetSysClockFreq+0x200>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 030c 	and.w	r3, r3, #12
 8005240:	2b08      	cmp	r3, #8
 8005242:	d00d      	beq.n	8005260 <HAL_RCC_GetSysClockFreq+0x40>
 8005244:	2b08      	cmp	r3, #8
 8005246:	f200 80e1 	bhi.w	800540c <HAL_RCC_GetSysClockFreq+0x1ec>
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <HAL_RCC_GetSysClockFreq+0x34>
 800524e:	2b04      	cmp	r3, #4
 8005250:	d003      	beq.n	800525a <HAL_RCC_GetSysClockFreq+0x3a>
 8005252:	e0db      	b.n	800540c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005254:	4b73      	ldr	r3, [pc, #460]	; (8005424 <HAL_RCC_GetSysClockFreq+0x204>)
 8005256:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005258:	e0db      	b.n	8005412 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800525a:	4b73      	ldr	r3, [pc, #460]	; (8005428 <HAL_RCC_GetSysClockFreq+0x208>)
 800525c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800525e:	e0d8      	b.n	8005412 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005260:	4b6f      	ldr	r3, [pc, #444]	; (8005420 <HAL_RCC_GetSysClockFreq+0x200>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005268:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800526a:	4b6d      	ldr	r3, [pc, #436]	; (8005420 <HAL_RCC_GetSysClockFreq+0x200>)
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d063      	beq.n	800533e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005276:	4b6a      	ldr	r3, [pc, #424]	; (8005420 <HAL_RCC_GetSysClockFreq+0x200>)
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	099b      	lsrs	r3, r3, #6
 800527c:	2200      	movs	r2, #0
 800527e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005280:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005288:	633b      	str	r3, [r7, #48]	; 0x30
 800528a:	2300      	movs	r3, #0
 800528c:	637b      	str	r3, [r7, #52]	; 0x34
 800528e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005292:	4622      	mov	r2, r4
 8005294:	462b      	mov	r3, r5
 8005296:	f04f 0000 	mov.w	r0, #0
 800529a:	f04f 0100 	mov.w	r1, #0
 800529e:	0159      	lsls	r1, r3, #5
 80052a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052a4:	0150      	lsls	r0, r2, #5
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	4621      	mov	r1, r4
 80052ac:	1a51      	subs	r1, r2, r1
 80052ae:	6139      	str	r1, [r7, #16]
 80052b0:	4629      	mov	r1, r5
 80052b2:	eb63 0301 	sbc.w	r3, r3, r1
 80052b6:	617b      	str	r3, [r7, #20]
 80052b8:	f04f 0200 	mov.w	r2, #0
 80052bc:	f04f 0300 	mov.w	r3, #0
 80052c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052c4:	4659      	mov	r1, fp
 80052c6:	018b      	lsls	r3, r1, #6
 80052c8:	4651      	mov	r1, sl
 80052ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052ce:	4651      	mov	r1, sl
 80052d0:	018a      	lsls	r2, r1, #6
 80052d2:	4651      	mov	r1, sl
 80052d4:	ebb2 0801 	subs.w	r8, r2, r1
 80052d8:	4659      	mov	r1, fp
 80052da:	eb63 0901 	sbc.w	r9, r3, r1
 80052de:	f04f 0200 	mov.w	r2, #0
 80052e2:	f04f 0300 	mov.w	r3, #0
 80052e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052f2:	4690      	mov	r8, r2
 80052f4:	4699      	mov	r9, r3
 80052f6:	4623      	mov	r3, r4
 80052f8:	eb18 0303 	adds.w	r3, r8, r3
 80052fc:	60bb      	str	r3, [r7, #8]
 80052fe:	462b      	mov	r3, r5
 8005300:	eb49 0303 	adc.w	r3, r9, r3
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	f04f 0200 	mov.w	r2, #0
 800530a:	f04f 0300 	mov.w	r3, #0
 800530e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005312:	4629      	mov	r1, r5
 8005314:	024b      	lsls	r3, r1, #9
 8005316:	4621      	mov	r1, r4
 8005318:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800531c:	4621      	mov	r1, r4
 800531e:	024a      	lsls	r2, r1, #9
 8005320:	4610      	mov	r0, r2
 8005322:	4619      	mov	r1, r3
 8005324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005326:	2200      	movs	r2, #0
 8005328:	62bb      	str	r3, [r7, #40]	; 0x28
 800532a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800532c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005330:	f7fb fcb2 	bl	8000c98 <__aeabi_uldivmod>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4613      	mov	r3, r2
 800533a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800533c:	e058      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800533e:	4b38      	ldr	r3, [pc, #224]	; (8005420 <HAL_RCC_GetSysClockFreq+0x200>)
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	099b      	lsrs	r3, r3, #6
 8005344:	2200      	movs	r2, #0
 8005346:	4618      	mov	r0, r3
 8005348:	4611      	mov	r1, r2
 800534a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800534e:	623b      	str	r3, [r7, #32]
 8005350:	2300      	movs	r3, #0
 8005352:	627b      	str	r3, [r7, #36]	; 0x24
 8005354:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005358:	4642      	mov	r2, r8
 800535a:	464b      	mov	r3, r9
 800535c:	f04f 0000 	mov.w	r0, #0
 8005360:	f04f 0100 	mov.w	r1, #0
 8005364:	0159      	lsls	r1, r3, #5
 8005366:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800536a:	0150      	lsls	r0, r2, #5
 800536c:	4602      	mov	r2, r0
 800536e:	460b      	mov	r3, r1
 8005370:	4641      	mov	r1, r8
 8005372:	ebb2 0a01 	subs.w	sl, r2, r1
 8005376:	4649      	mov	r1, r9
 8005378:	eb63 0b01 	sbc.w	fp, r3, r1
 800537c:	f04f 0200 	mov.w	r2, #0
 8005380:	f04f 0300 	mov.w	r3, #0
 8005384:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005388:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800538c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005390:	ebb2 040a 	subs.w	r4, r2, sl
 8005394:	eb63 050b 	sbc.w	r5, r3, fp
 8005398:	f04f 0200 	mov.w	r2, #0
 800539c:	f04f 0300 	mov.w	r3, #0
 80053a0:	00eb      	lsls	r3, r5, #3
 80053a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053a6:	00e2      	lsls	r2, r4, #3
 80053a8:	4614      	mov	r4, r2
 80053aa:	461d      	mov	r5, r3
 80053ac:	4643      	mov	r3, r8
 80053ae:	18e3      	adds	r3, r4, r3
 80053b0:	603b      	str	r3, [r7, #0]
 80053b2:	464b      	mov	r3, r9
 80053b4:	eb45 0303 	adc.w	r3, r5, r3
 80053b8:	607b      	str	r3, [r7, #4]
 80053ba:	f04f 0200 	mov.w	r2, #0
 80053be:	f04f 0300 	mov.w	r3, #0
 80053c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053c6:	4629      	mov	r1, r5
 80053c8:	028b      	lsls	r3, r1, #10
 80053ca:	4621      	mov	r1, r4
 80053cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053d0:	4621      	mov	r1, r4
 80053d2:	028a      	lsls	r2, r1, #10
 80053d4:	4610      	mov	r0, r2
 80053d6:	4619      	mov	r1, r3
 80053d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053da:	2200      	movs	r2, #0
 80053dc:	61bb      	str	r3, [r7, #24]
 80053de:	61fa      	str	r2, [r7, #28]
 80053e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053e4:	f7fb fc58 	bl	8000c98 <__aeabi_uldivmod>
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	4613      	mov	r3, r2
 80053ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053f0:	4b0b      	ldr	r3, [pc, #44]	; (8005420 <HAL_RCC_GetSysClockFreq+0x200>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	0c1b      	lsrs	r3, r3, #16
 80053f6:	f003 0303 	and.w	r3, r3, #3
 80053fa:	3301      	adds	r3, #1
 80053fc:	005b      	lsls	r3, r3, #1
 80053fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005400:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005404:	fbb2 f3f3 	udiv	r3, r2, r3
 8005408:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800540a:	e002      	b.n	8005412 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800540c:	4b05      	ldr	r3, [pc, #20]	; (8005424 <HAL_RCC_GetSysClockFreq+0x204>)
 800540e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005410:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005414:	4618      	mov	r0, r3
 8005416:	3750      	adds	r7, #80	; 0x50
 8005418:	46bd      	mov	sp, r7
 800541a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800541e:	bf00      	nop
 8005420:	40023800 	.word	0x40023800
 8005424:	00f42400 	.word	0x00f42400
 8005428:	007a1200 	.word	0x007a1200

0800542c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005430:	4b03      	ldr	r3, [pc, #12]	; (8005440 <HAL_RCC_GetHCLKFreq+0x14>)
 8005432:	681b      	ldr	r3, [r3, #0]
}
 8005434:	4618      	mov	r0, r3
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	200000a8 	.word	0x200000a8

08005444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005448:	f7ff fff0 	bl	800542c <HAL_RCC_GetHCLKFreq>
 800544c:	4602      	mov	r2, r0
 800544e:	4b05      	ldr	r3, [pc, #20]	; (8005464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	0a9b      	lsrs	r3, r3, #10
 8005454:	f003 0307 	and.w	r3, r3, #7
 8005458:	4903      	ldr	r1, [pc, #12]	; (8005468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800545a:	5ccb      	ldrb	r3, [r1, r3]
 800545c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005460:	4618      	mov	r0, r3
 8005462:	bd80      	pop	{r7, pc}
 8005464:	40023800 	.word	0x40023800
 8005468:	0800b7a4 	.word	0x0800b7a4

0800546c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005470:	f7ff ffdc 	bl	800542c <HAL_RCC_GetHCLKFreq>
 8005474:	4602      	mov	r2, r0
 8005476:	4b05      	ldr	r3, [pc, #20]	; (800548c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	0b5b      	lsrs	r3, r3, #13
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	4903      	ldr	r1, [pc, #12]	; (8005490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005482:	5ccb      	ldrb	r3, [r1, r3]
 8005484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005488:	4618      	mov	r0, r3
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40023800 	.word	0x40023800
 8005490:	0800b7a4 	.word	0x0800b7a4

08005494 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e03f      	b.n	8005526 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d106      	bne.n	80054c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7fd fa16 	bl	80028ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2224      	movs	r2, #36	; 0x24
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fe1d 	bl	8006118 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	691a      	ldr	r2, [r3, #16]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	695a      	ldr	r2, [r3, #20]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68da      	ldr	r2, [r3, #12]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800550c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2220      	movs	r2, #32
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2220      	movs	r2, #32
 8005520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b08a      	sub	sp, #40	; 0x28
 8005532:	af02      	add	r7, sp, #8
 8005534:	60f8      	str	r0, [r7, #12]
 8005536:	60b9      	str	r1, [r7, #8]
 8005538:	603b      	str	r3, [r7, #0]
 800553a:	4613      	mov	r3, r2
 800553c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b20      	cmp	r3, #32
 800554c:	d17c      	bne.n	8005648 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d002      	beq.n	800555a <HAL_UART_Transmit+0x2c>
 8005554:	88fb      	ldrh	r3, [r7, #6]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e075      	b.n	800564a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005564:	2b01      	cmp	r3, #1
 8005566:	d101      	bne.n	800556c <HAL_UART_Transmit+0x3e>
 8005568:	2302      	movs	r3, #2
 800556a:	e06e      	b.n	800564a <HAL_UART_Transmit+0x11c>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2221      	movs	r2, #33	; 0x21
 800557e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005582:	f7fd fbe5 	bl	8002d50 <HAL_GetTick>
 8005586:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	88fa      	ldrh	r2, [r7, #6]
 800558c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	88fa      	ldrh	r2, [r7, #6]
 8005592:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800559c:	d108      	bne.n	80055b0 <HAL_UART_Transmit+0x82>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d104      	bne.n	80055b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80055a6:	2300      	movs	r3, #0
 80055a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	61bb      	str	r3, [r7, #24]
 80055ae:	e003      	b.n	80055b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055b4:	2300      	movs	r3, #0
 80055b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80055c0:	e02a      	b.n	8005618 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2200      	movs	r2, #0
 80055ca:	2180      	movs	r1, #128	; 0x80
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 fb9b 	bl	8005d08 <UART_WaitOnFlagUntilTimeout>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e036      	b.n	800564a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10b      	bne.n	80055fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	461a      	mov	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	3302      	adds	r3, #2
 80055f6:	61bb      	str	r3, [r7, #24]
 80055f8:	e007      	b.n	800560a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	781a      	ldrb	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	3301      	adds	r3, #1
 8005608:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800560e:	b29b      	uxth	r3, r3
 8005610:	3b01      	subs	r3, #1
 8005612:	b29a      	uxth	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800561c:	b29b      	uxth	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1cf      	bne.n	80055c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	9300      	str	r3, [sp, #0]
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	2200      	movs	r2, #0
 800562a:	2140      	movs	r1, #64	; 0x40
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f000 fb6b 	bl	8005d08 <UART_WaitOnFlagUntilTimeout>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d001      	beq.n	800563c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e006      	b.n	800564a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2220      	movs	r2, #32
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005644:	2300      	movs	r3, #0
 8005646:	e000      	b.n	800564a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005648:	2302      	movs	r3, #2
  }
}
 800564a:	4618      	mov	r0, r3
 800564c:	3720      	adds	r7, #32
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b08a      	sub	sp, #40	; 0x28
 8005656:	af02      	add	r7, sp, #8
 8005658:	60f8      	str	r0, [r7, #12]
 800565a:	60b9      	str	r1, [r7, #8]
 800565c:	603b      	str	r3, [r7, #0]
 800565e:	4613      	mov	r3, r2
 8005660:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005662:	2300      	movs	r3, #0
 8005664:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b20      	cmp	r3, #32
 8005670:	f040 808c 	bne.w	800578c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <HAL_UART_Receive+0x2e>
 800567a:	88fb      	ldrh	r3, [r7, #6]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e084      	b.n	800578e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800568a:	2b01      	cmp	r3, #1
 800568c:	d101      	bne.n	8005692 <HAL_UART_Receive+0x40>
 800568e:	2302      	movs	r3, #2
 8005690:	e07d      	b.n	800578e <HAL_UART_Receive+0x13c>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2222      	movs	r2, #34	; 0x22
 80056a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056ae:	f7fd fb4f 	bl	8002d50 <HAL_GetTick>
 80056b2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	88fa      	ldrh	r2, [r7, #6]
 80056b8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	88fa      	ldrh	r2, [r7, #6]
 80056be:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c8:	d108      	bne.n	80056dc <HAL_UART_Receive+0x8a>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d104      	bne.n	80056dc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80056d2:	2300      	movs	r3, #0
 80056d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	61bb      	str	r3, [r7, #24]
 80056da:	e003      	b.n	80056e4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056e0:	2300      	movs	r3, #0
 80056e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80056ec:	e043      	b.n	8005776 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2200      	movs	r2, #0
 80056f6:	2120      	movs	r1, #32
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 fb05 	bl	8005d08 <UART_WaitOnFlagUntilTimeout>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e042      	b.n	800578e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10c      	bne.n	8005728 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	b29b      	uxth	r3, r3
 8005716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800571a:	b29a      	uxth	r2, r3
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	3302      	adds	r3, #2
 8005724:	61bb      	str	r3, [r7, #24]
 8005726:	e01f      	b.n	8005768 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005730:	d007      	beq.n	8005742 <HAL_UART_Receive+0xf0>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10a      	bne.n	8005750 <HAL_UART_Receive+0xfe>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d106      	bne.n	8005750 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	b2da      	uxtb	r2, r3
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	701a      	strb	r2, [r3, #0]
 800574e:	e008      	b.n	8005762 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	b2db      	uxtb	r3, r3
 8005758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800575c:	b2da      	uxtb	r2, r3
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	3301      	adds	r3, #1
 8005766:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800576c:	b29b      	uxth	r3, r3
 800576e:	3b01      	subs	r3, #1
 8005770:	b29a      	uxth	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800577a:	b29b      	uxth	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1b6      	bne.n	80056ee <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2220      	movs	r2, #32
 8005784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005788:	2300      	movs	r3, #0
 800578a:	e000      	b.n	800578e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800578c:	2302      	movs	r3, #2
  }
}
 800578e:	4618      	mov	r0, r3
 8005790:	3720      	adds	r7, #32
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b0ba      	sub	sp, #232	; 0xe8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80057be:	2300      	movs	r3, #0
 80057c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80057c4:	2300      	movs	r3, #0
 80057c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80057ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ce:	f003 030f 	and.w	r3, r3, #15
 80057d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80057d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10f      	bne.n	80057fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d009      	beq.n	80057fe <HAL_UART_IRQHandler+0x66>
 80057ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ee:	f003 0320 	and.w	r3, r3, #32
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fbd3 	bl	8005fa2 <UART_Receive_IT>
      return;
 80057fc:	e256      	b.n	8005cac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80057fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 80de 	beq.w	80059c4 <HAL_UART_IRQHandler+0x22c>
 8005808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	2b00      	cmp	r3, #0
 8005812:	d106      	bne.n	8005822 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005818:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 80d1 	beq.w	80059c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00b      	beq.n	8005846 <HAL_UART_IRQHandler+0xae>
 800582e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005836:	2b00      	cmp	r3, #0
 8005838:	d005      	beq.n	8005846 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583e:	f043 0201 	orr.w	r2, r3, #1
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800584a:	f003 0304 	and.w	r3, r3, #4
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00b      	beq.n	800586a <HAL_UART_IRQHandler+0xd2>
 8005852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	d005      	beq.n	800586a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	f043 0202 	orr.w	r2, r3, #2
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800586a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00b      	beq.n	800588e <HAL_UART_IRQHandler+0xf6>
 8005876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d005      	beq.n	800588e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	f043 0204 	orr.w	r2, r3, #4
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800588e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005892:	f003 0308 	and.w	r3, r3, #8
 8005896:	2b00      	cmp	r3, #0
 8005898:	d011      	beq.n	80058be <HAL_UART_IRQHandler+0x126>
 800589a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800589e:	f003 0320 	and.w	r3, r3, #32
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d105      	bne.n	80058b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80058a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d005      	beq.n	80058be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	f043 0208 	orr.w	r2, r3, #8
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 81ed 	beq.w	8005ca2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058cc:	f003 0320 	and.w	r3, r3, #32
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d008      	beq.n	80058e6 <HAL_UART_IRQHandler+0x14e>
 80058d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058d8:	f003 0320 	and.w	r3, r3, #32
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d002      	beq.n	80058e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 fb5e 	bl	8005fa2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f0:	2b40      	cmp	r3, #64	; 0x40
 80058f2:	bf0c      	ite	eq
 80058f4:	2301      	moveq	r3, #1
 80058f6:	2300      	movne	r3, #0
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005902:	f003 0308 	and.w	r3, r3, #8
 8005906:	2b00      	cmp	r3, #0
 8005908:	d103      	bne.n	8005912 <HAL_UART_IRQHandler+0x17a>
 800590a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800590e:	2b00      	cmp	r3, #0
 8005910:	d04f      	beq.n	80059b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 fa66 	bl	8005de4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005922:	2b40      	cmp	r3, #64	; 0x40
 8005924:	d141      	bne.n	80059aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3314      	adds	r3, #20
 800592c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005930:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005934:	e853 3f00 	ldrex	r3, [r3]
 8005938:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800593c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005944:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	3314      	adds	r3, #20
 800594e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005952:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005956:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800595e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005962:	e841 2300 	strex	r3, r2, [r1]
 8005966:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800596a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1d9      	bne.n	8005926 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005976:	2b00      	cmp	r3, #0
 8005978:	d013      	beq.n	80059a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597e:	4a7d      	ldr	r2, [pc, #500]	; (8005b74 <HAL_UART_IRQHandler+0x3dc>)
 8005980:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005986:	4618      	mov	r0, r3
 8005988:	f7fd ff85 	bl	8003896 <HAL_DMA_Abort_IT>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d016      	beq.n	80059c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800599c:	4610      	mov	r0, r2
 800599e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a0:	e00e      	b.n	80059c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f99a 	bl	8005cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a8:	e00a      	b.n	80059c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f996 	bl	8005cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b0:	e006      	b.n	80059c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f992 	bl	8005cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80059be:	e170      	b.n	8005ca2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059c0:	bf00      	nop
    return;
 80059c2:	e16e      	b.n	8005ca2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	f040 814a 	bne.w	8005c62 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80059ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d2:	f003 0310 	and.w	r3, r3, #16
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 8143 	beq.w	8005c62 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80059dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059e0:	f003 0310 	and.w	r3, r3, #16
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 813c 	beq.w	8005c62 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059ea:	2300      	movs	r3, #0
 80059ec:	60bb      	str	r3, [r7, #8]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	60bb      	str	r3, [r7, #8]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	60bb      	str	r3, [r7, #8]
 80059fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0a:	2b40      	cmp	r3, #64	; 0x40
 8005a0c:	f040 80b4 	bne.w	8005b78 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 8140 	beq.w	8005ca6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	f080 8139 	bcs.w	8005ca6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a46:	f000 8088 	beq.w	8005b5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	330c      	adds	r3, #12
 8005a50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a58:	e853 3f00 	ldrex	r3, [r3]
 8005a5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005a60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	330c      	adds	r3, #12
 8005a72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005a76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a86:	e841 2300 	strex	r3, r2, [r1]
 8005a8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1d9      	bne.n	8005a4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	3314      	adds	r3, #20
 8005a9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aa0:	e853 3f00 	ldrex	r3, [r3]
 8005aa4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005aa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005aa8:	f023 0301 	bic.w	r3, r3, #1
 8005aac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3314      	adds	r3, #20
 8005ab6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005aba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005abe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ac2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ac6:	e841 2300 	strex	r3, r2, [r1]
 8005aca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005acc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1e1      	bne.n	8005a96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3314      	adds	r3, #20
 8005ad8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ada:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005adc:	e853 3f00 	ldrex	r3, [r3]
 8005ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ae8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3314      	adds	r3, #20
 8005af2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005af6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005af8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005afc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005afe:	e841 2300 	strex	r3, r2, [r1]
 8005b02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1e3      	bne.n	8005ad2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	330c      	adds	r3, #12
 8005b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b22:	e853 3f00 	ldrex	r3, [r3]
 8005b26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b2a:	f023 0310 	bic.w	r3, r3, #16
 8005b2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	330c      	adds	r3, #12
 8005b38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005b3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005b3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b44:	e841 2300 	strex	r3, r2, [r1]
 8005b48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e3      	bne.n	8005b18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fd fe2e 	bl	80037b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	4619      	mov	r1, r3
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f8c0 	bl	8005cf0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b70:	e099      	b.n	8005ca6 <HAL_UART_IRQHandler+0x50e>
 8005b72:	bf00      	nop
 8005b74:	08005eab 	.word	0x08005eab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 808b 	beq.w	8005caa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005b94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 8086 	beq.w	8005caa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	330c      	adds	r3, #12
 8005ba4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba8:	e853 3f00 	ldrex	r3, [r3]
 8005bac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	330c      	adds	r3, #12
 8005bbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005bc2:	647a      	str	r2, [r7, #68]	; 0x44
 8005bc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005bc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bca:	e841 2300 	strex	r3, r2, [r1]
 8005bce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1e3      	bne.n	8005b9e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	3314      	adds	r3, #20
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	e853 3f00 	ldrex	r3, [r3]
 8005be4:	623b      	str	r3, [r7, #32]
   return(result);
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	f023 0301 	bic.w	r3, r3, #1
 8005bec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	3314      	adds	r3, #20
 8005bf6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005bfa:	633a      	str	r2, [r7, #48]	; 0x30
 8005bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c02:	e841 2300 	strex	r3, r2, [r1]
 8005c06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1e3      	bne.n	8005bd6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2220      	movs	r2, #32
 8005c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	330c      	adds	r3, #12
 8005c22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	e853 3f00 	ldrex	r3, [r3]
 8005c2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f023 0310 	bic.w	r3, r3, #16
 8005c32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	330c      	adds	r3, #12
 8005c3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005c40:	61fa      	str	r2, [r7, #28]
 8005c42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c44:	69b9      	ldr	r1, [r7, #24]
 8005c46:	69fa      	ldr	r2, [r7, #28]
 8005c48:	e841 2300 	strex	r3, r2, [r1]
 8005c4c:	617b      	str	r3, [r7, #20]
   return(result);
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1e3      	bne.n	8005c1c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c58:	4619      	mov	r1, r3
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f848 	bl	8005cf0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c60:	e023      	b.n	8005caa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d009      	beq.n	8005c82 <HAL_UART_IRQHandler+0x4ea>
 8005c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f929 	bl	8005ed2 <UART_Transmit_IT>
    return;
 8005c80:	e014      	b.n	8005cac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00e      	beq.n	8005cac <HAL_UART_IRQHandler+0x514>
 8005c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d008      	beq.n	8005cac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f969 	bl	8005f72 <UART_EndTransmit_IT>
    return;
 8005ca0:	e004      	b.n	8005cac <HAL_UART_IRQHandler+0x514>
    return;
 8005ca2:	bf00      	nop
 8005ca4:	e002      	b.n	8005cac <HAL_UART_IRQHandler+0x514>
      return;
 8005ca6:	bf00      	nop
 8005ca8:	e000      	b.n	8005cac <HAL_UART_IRQHandler+0x514>
      return;
 8005caa:	bf00      	nop
  }
}
 8005cac:	37e8      	adds	r7, #232	; 0xe8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop

08005cb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b090      	sub	sp, #64	; 0x40
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	603b      	str	r3, [r7, #0]
 8005d14:	4613      	mov	r3, r2
 8005d16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d18:	e050      	b.n	8005dbc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d20:	d04c      	beq.n	8005dbc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d007      	beq.n	8005d38 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d28:	f7fd f812 	bl	8002d50 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d241      	bcs.n	8005dbc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	330c      	adds	r3, #12
 8005d3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d42:	e853 3f00 	ldrex	r3, [r3]
 8005d46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	330c      	adds	r3, #12
 8005d56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d58:	637a      	str	r2, [r7, #52]	; 0x34
 8005d5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d60:	e841 2300 	strex	r3, r2, [r1]
 8005d64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1e5      	bne.n	8005d38 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3314      	adds	r3, #20
 8005d72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	e853 3f00 	ldrex	r3, [r3]
 8005d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	f023 0301 	bic.w	r3, r3, #1
 8005d82:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3314      	adds	r3, #20
 8005d8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d8c:	623a      	str	r2, [r7, #32]
 8005d8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d90:	69f9      	ldr	r1, [r7, #28]
 8005d92:	6a3a      	ldr	r2, [r7, #32]
 8005d94:	e841 2300 	strex	r3, r2, [r1]
 8005d98:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1e5      	bne.n	8005d6c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2220      	movs	r2, #32
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e00f      	b.n	8005ddc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	bf0c      	ite	eq
 8005dcc:	2301      	moveq	r3, #1
 8005dce:	2300      	movne	r3, #0
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	79fb      	ldrb	r3, [r7, #7]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d09f      	beq.n	8005d1a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3740      	adds	r7, #64	; 0x40
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b095      	sub	sp, #84	; 0x54
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	330c      	adds	r3, #12
 8005df2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df6:	e853 3f00 	ldrex	r3, [r3]
 8005dfa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	330c      	adds	r3, #12
 8005e0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e0c:	643a      	str	r2, [r7, #64]	; 0x40
 8005e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e14:	e841 2300 	strex	r3, r2, [r1]
 8005e18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1e5      	bne.n	8005dec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3314      	adds	r3, #20
 8005e26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e28:	6a3b      	ldr	r3, [r7, #32]
 8005e2a:	e853 3f00 	ldrex	r3, [r3]
 8005e2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	f023 0301 	bic.w	r3, r3, #1
 8005e36:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	3314      	adds	r3, #20
 8005e3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e48:	e841 2300 	strex	r3, r2, [r1]
 8005e4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1e5      	bne.n	8005e20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d119      	bne.n	8005e90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	330c      	adds	r3, #12
 8005e62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	e853 3f00 	ldrex	r3, [r3]
 8005e6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	f023 0310 	bic.w	r3, r3, #16
 8005e72:	647b      	str	r3, [r7, #68]	; 0x44
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	330c      	adds	r3, #12
 8005e7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e7c:	61ba      	str	r2, [r7, #24]
 8005e7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e80:	6979      	ldr	r1, [r7, #20]
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	e841 2300 	strex	r3, r2, [r1]
 8005e88:	613b      	str	r3, [r7, #16]
   return(result);
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1e5      	bne.n	8005e5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2220      	movs	r2, #32
 8005e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e9e:	bf00      	nop
 8005ea0:	3754      	adds	r7, #84	; 0x54
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b084      	sub	sp, #16
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f7ff ff09 	bl	8005cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eca:	bf00      	nop
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b085      	sub	sp, #20
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b21      	cmp	r3, #33	; 0x21
 8005ee4:	d13e      	bne.n	8005f64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eee:	d114      	bne.n	8005f1a <UART_Transmit_IT+0x48>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d110      	bne.n	8005f1a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	881b      	ldrh	r3, [r3, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	1c9a      	adds	r2, r3, #2
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	621a      	str	r2, [r3, #32]
 8005f18:	e008      	b.n	8005f2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	1c59      	adds	r1, r3, #1
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	6211      	str	r1, [r2, #32]
 8005f24:	781a      	ldrb	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	3b01      	subs	r3, #1
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	4619      	mov	r1, r3
 8005f3a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10f      	bne.n	8005f60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68da      	ldr	r2, [r3, #12]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68da      	ldr	r2, [r3, #12]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f60:	2300      	movs	r3, #0
 8005f62:	e000      	b.n	8005f66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f64:	2302      	movs	r3, #2
  }
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b082      	sub	sp, #8
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68da      	ldr	r2, [r3, #12]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff fe8e 	bl	8005cb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b08c      	sub	sp, #48	; 0x30
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b22      	cmp	r3, #34	; 0x22
 8005fb4:	f040 80ab 	bne.w	800610e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fc0:	d117      	bne.n	8005ff2 <UART_Receive_IT+0x50>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d113      	bne.n	8005ff2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fea:	1c9a      	adds	r2, r3, #2
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	629a      	str	r2, [r3, #40]	; 0x28
 8005ff0:	e026      	b.n	8006040 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006004:	d007      	beq.n	8006016 <UART_Receive_IT+0x74>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10a      	bne.n	8006024 <UART_Receive_IT+0x82>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d106      	bne.n	8006024 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	b2da      	uxtb	r2, r3
 800601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006020:	701a      	strb	r2, [r3, #0]
 8006022:	e008      	b.n	8006036 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	b2db      	uxtb	r3, r3
 800602c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006030:	b2da      	uxtb	r2, r3
 8006032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006034:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603a:	1c5a      	adds	r2, r3, #1
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006044:	b29b      	uxth	r3, r3
 8006046:	3b01      	subs	r3, #1
 8006048:	b29b      	uxth	r3, r3
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	4619      	mov	r1, r3
 800604e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006050:	2b00      	cmp	r3, #0
 8006052:	d15a      	bne.n	800610a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68da      	ldr	r2, [r3, #12]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0220 	bic.w	r2, r2, #32
 8006062:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006072:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	695a      	ldr	r2, [r3, #20]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 0201 	bic.w	r2, r2, #1
 8006082:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2220      	movs	r2, #32
 8006088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006090:	2b01      	cmp	r3, #1
 8006092:	d135      	bne.n	8006100 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	330c      	adds	r3, #12
 80060a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	e853 3f00 	ldrex	r3, [r3]
 80060a8:	613b      	str	r3, [r7, #16]
   return(result);
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	f023 0310 	bic.w	r3, r3, #16
 80060b0:	627b      	str	r3, [r7, #36]	; 0x24
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	330c      	adds	r3, #12
 80060b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ba:	623a      	str	r2, [r7, #32]
 80060bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060be:	69f9      	ldr	r1, [r7, #28]
 80060c0:	6a3a      	ldr	r2, [r7, #32]
 80060c2:	e841 2300 	strex	r3, r2, [r1]
 80060c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1e5      	bne.n	800609a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0310 	and.w	r3, r3, #16
 80060d8:	2b10      	cmp	r3, #16
 80060da:	d10a      	bne.n	80060f2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060dc:	2300      	movs	r3, #0
 80060de:	60fb      	str	r3, [r7, #12]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	60fb      	str	r3, [r7, #12]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	60fb      	str	r3, [r7, #12]
 80060f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060f6:	4619      	mov	r1, r3
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7ff fdf9 	bl	8005cf0 <HAL_UARTEx_RxEventCallback>
 80060fe:	e002      	b.n	8006106 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f7ff fde1 	bl	8005cc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	e002      	b.n	8006110 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800610a:	2300      	movs	r3, #0
 800610c:	e000      	b.n	8006110 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800610e:	2302      	movs	r3, #2
  }
}
 8006110:	4618      	mov	r0, r3
 8006112:	3730      	adds	r7, #48	; 0x30
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800611c:	b0c0      	sub	sp, #256	; 0x100
 800611e:	af00      	add	r7, sp, #0
 8006120:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006134:	68d9      	ldr	r1, [r3, #12]
 8006136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	ea40 0301 	orr.w	r3, r0, r1
 8006140:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006146:	689a      	ldr	r2, [r3, #8]
 8006148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	431a      	orrs	r2, r3
 8006150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	431a      	orrs	r2, r3
 8006158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	4313      	orrs	r3, r2
 8006160:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006170:	f021 010c 	bic.w	r1, r1, #12
 8006174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800617e:	430b      	orrs	r3, r1
 8006180:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800618e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006192:	6999      	ldr	r1, [r3, #24]
 8006194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	ea40 0301 	orr.w	r3, r0, r1
 800619e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	4b8f      	ldr	r3, [pc, #572]	; (80063e4 <UART_SetConfig+0x2cc>)
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d005      	beq.n	80061b8 <UART_SetConfig+0xa0>
 80061ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	4b8d      	ldr	r3, [pc, #564]	; (80063e8 <UART_SetConfig+0x2d0>)
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d104      	bne.n	80061c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061b8:	f7ff f958 	bl	800546c <HAL_RCC_GetPCLK2Freq>
 80061bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80061c0:	e003      	b.n	80061ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061c2:	f7ff f93f 	bl	8005444 <HAL_RCC_GetPCLK1Freq>
 80061c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061d4:	f040 810c 	bne.w	80063f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061dc:	2200      	movs	r2, #0
 80061de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80061e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80061ea:	4622      	mov	r2, r4
 80061ec:	462b      	mov	r3, r5
 80061ee:	1891      	adds	r1, r2, r2
 80061f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80061f2:	415b      	adcs	r3, r3
 80061f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80061fa:	4621      	mov	r1, r4
 80061fc:	eb12 0801 	adds.w	r8, r2, r1
 8006200:	4629      	mov	r1, r5
 8006202:	eb43 0901 	adc.w	r9, r3, r1
 8006206:	f04f 0200 	mov.w	r2, #0
 800620a:	f04f 0300 	mov.w	r3, #0
 800620e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006212:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006216:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800621a:	4690      	mov	r8, r2
 800621c:	4699      	mov	r9, r3
 800621e:	4623      	mov	r3, r4
 8006220:	eb18 0303 	adds.w	r3, r8, r3
 8006224:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006228:	462b      	mov	r3, r5
 800622a:	eb49 0303 	adc.w	r3, r9, r3
 800622e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800623e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006242:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006246:	460b      	mov	r3, r1
 8006248:	18db      	adds	r3, r3, r3
 800624a:	653b      	str	r3, [r7, #80]	; 0x50
 800624c:	4613      	mov	r3, r2
 800624e:	eb42 0303 	adc.w	r3, r2, r3
 8006252:	657b      	str	r3, [r7, #84]	; 0x54
 8006254:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006258:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800625c:	f7fa fd1c 	bl	8000c98 <__aeabi_uldivmod>
 8006260:	4602      	mov	r2, r0
 8006262:	460b      	mov	r3, r1
 8006264:	4b61      	ldr	r3, [pc, #388]	; (80063ec <UART_SetConfig+0x2d4>)
 8006266:	fba3 2302 	umull	r2, r3, r3, r2
 800626a:	095b      	lsrs	r3, r3, #5
 800626c:	011c      	lsls	r4, r3, #4
 800626e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006272:	2200      	movs	r2, #0
 8006274:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006278:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800627c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006280:	4642      	mov	r2, r8
 8006282:	464b      	mov	r3, r9
 8006284:	1891      	adds	r1, r2, r2
 8006286:	64b9      	str	r1, [r7, #72]	; 0x48
 8006288:	415b      	adcs	r3, r3
 800628a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800628c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006290:	4641      	mov	r1, r8
 8006292:	eb12 0a01 	adds.w	sl, r2, r1
 8006296:	4649      	mov	r1, r9
 8006298:	eb43 0b01 	adc.w	fp, r3, r1
 800629c:	f04f 0200 	mov.w	r2, #0
 80062a0:	f04f 0300 	mov.w	r3, #0
 80062a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062b0:	4692      	mov	sl, r2
 80062b2:	469b      	mov	fp, r3
 80062b4:	4643      	mov	r3, r8
 80062b6:	eb1a 0303 	adds.w	r3, sl, r3
 80062ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062be:	464b      	mov	r3, r9
 80062c0:	eb4b 0303 	adc.w	r3, fp, r3
 80062c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80062d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80062dc:	460b      	mov	r3, r1
 80062de:	18db      	adds	r3, r3, r3
 80062e0:	643b      	str	r3, [r7, #64]	; 0x40
 80062e2:	4613      	mov	r3, r2
 80062e4:	eb42 0303 	adc.w	r3, r2, r3
 80062e8:	647b      	str	r3, [r7, #68]	; 0x44
 80062ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80062f2:	f7fa fcd1 	bl	8000c98 <__aeabi_uldivmod>
 80062f6:	4602      	mov	r2, r0
 80062f8:	460b      	mov	r3, r1
 80062fa:	4611      	mov	r1, r2
 80062fc:	4b3b      	ldr	r3, [pc, #236]	; (80063ec <UART_SetConfig+0x2d4>)
 80062fe:	fba3 2301 	umull	r2, r3, r3, r1
 8006302:	095b      	lsrs	r3, r3, #5
 8006304:	2264      	movs	r2, #100	; 0x64
 8006306:	fb02 f303 	mul.w	r3, r2, r3
 800630a:	1acb      	subs	r3, r1, r3
 800630c:	00db      	lsls	r3, r3, #3
 800630e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006312:	4b36      	ldr	r3, [pc, #216]	; (80063ec <UART_SetConfig+0x2d4>)
 8006314:	fba3 2302 	umull	r2, r3, r3, r2
 8006318:	095b      	lsrs	r3, r3, #5
 800631a:	005b      	lsls	r3, r3, #1
 800631c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006320:	441c      	add	r4, r3
 8006322:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006326:	2200      	movs	r2, #0
 8006328:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800632c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006330:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006334:	4642      	mov	r2, r8
 8006336:	464b      	mov	r3, r9
 8006338:	1891      	adds	r1, r2, r2
 800633a:	63b9      	str	r1, [r7, #56]	; 0x38
 800633c:	415b      	adcs	r3, r3
 800633e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006340:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006344:	4641      	mov	r1, r8
 8006346:	1851      	adds	r1, r2, r1
 8006348:	6339      	str	r1, [r7, #48]	; 0x30
 800634a:	4649      	mov	r1, r9
 800634c:	414b      	adcs	r3, r1
 800634e:	637b      	str	r3, [r7, #52]	; 0x34
 8006350:	f04f 0200 	mov.w	r2, #0
 8006354:	f04f 0300 	mov.w	r3, #0
 8006358:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800635c:	4659      	mov	r1, fp
 800635e:	00cb      	lsls	r3, r1, #3
 8006360:	4651      	mov	r1, sl
 8006362:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006366:	4651      	mov	r1, sl
 8006368:	00ca      	lsls	r2, r1, #3
 800636a:	4610      	mov	r0, r2
 800636c:	4619      	mov	r1, r3
 800636e:	4603      	mov	r3, r0
 8006370:	4642      	mov	r2, r8
 8006372:	189b      	adds	r3, r3, r2
 8006374:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006378:	464b      	mov	r3, r9
 800637a:	460a      	mov	r2, r1
 800637c:	eb42 0303 	adc.w	r3, r2, r3
 8006380:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006390:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006394:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006398:	460b      	mov	r3, r1
 800639a:	18db      	adds	r3, r3, r3
 800639c:	62bb      	str	r3, [r7, #40]	; 0x28
 800639e:	4613      	mov	r3, r2
 80063a0:	eb42 0303 	adc.w	r3, r2, r3
 80063a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80063ae:	f7fa fc73 	bl	8000c98 <__aeabi_uldivmod>
 80063b2:	4602      	mov	r2, r0
 80063b4:	460b      	mov	r3, r1
 80063b6:	4b0d      	ldr	r3, [pc, #52]	; (80063ec <UART_SetConfig+0x2d4>)
 80063b8:	fba3 1302 	umull	r1, r3, r3, r2
 80063bc:	095b      	lsrs	r3, r3, #5
 80063be:	2164      	movs	r1, #100	; 0x64
 80063c0:	fb01 f303 	mul.w	r3, r1, r3
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	3332      	adds	r3, #50	; 0x32
 80063ca:	4a08      	ldr	r2, [pc, #32]	; (80063ec <UART_SetConfig+0x2d4>)
 80063cc:	fba2 2303 	umull	r2, r3, r2, r3
 80063d0:	095b      	lsrs	r3, r3, #5
 80063d2:	f003 0207 	and.w	r2, r3, #7
 80063d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4422      	add	r2, r4
 80063de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063e0:	e105      	b.n	80065ee <UART_SetConfig+0x4d6>
 80063e2:	bf00      	nop
 80063e4:	40011000 	.word	0x40011000
 80063e8:	40011400 	.word	0x40011400
 80063ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063f4:	2200      	movs	r2, #0
 80063f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80063fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006402:	4642      	mov	r2, r8
 8006404:	464b      	mov	r3, r9
 8006406:	1891      	adds	r1, r2, r2
 8006408:	6239      	str	r1, [r7, #32]
 800640a:	415b      	adcs	r3, r3
 800640c:	627b      	str	r3, [r7, #36]	; 0x24
 800640e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006412:	4641      	mov	r1, r8
 8006414:	1854      	adds	r4, r2, r1
 8006416:	4649      	mov	r1, r9
 8006418:	eb43 0501 	adc.w	r5, r3, r1
 800641c:	f04f 0200 	mov.w	r2, #0
 8006420:	f04f 0300 	mov.w	r3, #0
 8006424:	00eb      	lsls	r3, r5, #3
 8006426:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800642a:	00e2      	lsls	r2, r4, #3
 800642c:	4614      	mov	r4, r2
 800642e:	461d      	mov	r5, r3
 8006430:	4643      	mov	r3, r8
 8006432:	18e3      	adds	r3, r4, r3
 8006434:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006438:	464b      	mov	r3, r9
 800643a:	eb45 0303 	adc.w	r3, r5, r3
 800643e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800644e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006452:	f04f 0200 	mov.w	r2, #0
 8006456:	f04f 0300 	mov.w	r3, #0
 800645a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800645e:	4629      	mov	r1, r5
 8006460:	008b      	lsls	r3, r1, #2
 8006462:	4621      	mov	r1, r4
 8006464:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006468:	4621      	mov	r1, r4
 800646a:	008a      	lsls	r2, r1, #2
 800646c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006470:	f7fa fc12 	bl	8000c98 <__aeabi_uldivmod>
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	4b60      	ldr	r3, [pc, #384]	; (80065fc <UART_SetConfig+0x4e4>)
 800647a:	fba3 2302 	umull	r2, r3, r3, r2
 800647e:	095b      	lsrs	r3, r3, #5
 8006480:	011c      	lsls	r4, r3, #4
 8006482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006486:	2200      	movs	r2, #0
 8006488:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800648c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006490:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006494:	4642      	mov	r2, r8
 8006496:	464b      	mov	r3, r9
 8006498:	1891      	adds	r1, r2, r2
 800649a:	61b9      	str	r1, [r7, #24]
 800649c:	415b      	adcs	r3, r3
 800649e:	61fb      	str	r3, [r7, #28]
 80064a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064a4:	4641      	mov	r1, r8
 80064a6:	1851      	adds	r1, r2, r1
 80064a8:	6139      	str	r1, [r7, #16]
 80064aa:	4649      	mov	r1, r9
 80064ac:	414b      	adcs	r3, r1
 80064ae:	617b      	str	r3, [r7, #20]
 80064b0:	f04f 0200 	mov.w	r2, #0
 80064b4:	f04f 0300 	mov.w	r3, #0
 80064b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064bc:	4659      	mov	r1, fp
 80064be:	00cb      	lsls	r3, r1, #3
 80064c0:	4651      	mov	r1, sl
 80064c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064c6:	4651      	mov	r1, sl
 80064c8:	00ca      	lsls	r2, r1, #3
 80064ca:	4610      	mov	r0, r2
 80064cc:	4619      	mov	r1, r3
 80064ce:	4603      	mov	r3, r0
 80064d0:	4642      	mov	r2, r8
 80064d2:	189b      	adds	r3, r3, r2
 80064d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80064d8:	464b      	mov	r3, r9
 80064da:	460a      	mov	r2, r1
 80064dc:	eb42 0303 	adc.w	r3, r2, r3
 80064e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80064ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80064f0:	f04f 0200 	mov.w	r2, #0
 80064f4:	f04f 0300 	mov.w	r3, #0
 80064f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80064fc:	4649      	mov	r1, r9
 80064fe:	008b      	lsls	r3, r1, #2
 8006500:	4641      	mov	r1, r8
 8006502:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006506:	4641      	mov	r1, r8
 8006508:	008a      	lsls	r2, r1, #2
 800650a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800650e:	f7fa fbc3 	bl	8000c98 <__aeabi_uldivmod>
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	4b39      	ldr	r3, [pc, #228]	; (80065fc <UART_SetConfig+0x4e4>)
 8006518:	fba3 1302 	umull	r1, r3, r3, r2
 800651c:	095b      	lsrs	r3, r3, #5
 800651e:	2164      	movs	r1, #100	; 0x64
 8006520:	fb01 f303 	mul.w	r3, r1, r3
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	011b      	lsls	r3, r3, #4
 8006528:	3332      	adds	r3, #50	; 0x32
 800652a:	4a34      	ldr	r2, [pc, #208]	; (80065fc <UART_SetConfig+0x4e4>)
 800652c:	fba2 2303 	umull	r2, r3, r2, r3
 8006530:	095b      	lsrs	r3, r3, #5
 8006532:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006536:	441c      	add	r4, r3
 8006538:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800653c:	2200      	movs	r2, #0
 800653e:	673b      	str	r3, [r7, #112]	; 0x70
 8006540:	677a      	str	r2, [r7, #116]	; 0x74
 8006542:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006546:	4642      	mov	r2, r8
 8006548:	464b      	mov	r3, r9
 800654a:	1891      	adds	r1, r2, r2
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	415b      	adcs	r3, r3
 8006550:	60fb      	str	r3, [r7, #12]
 8006552:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006556:	4641      	mov	r1, r8
 8006558:	1851      	adds	r1, r2, r1
 800655a:	6039      	str	r1, [r7, #0]
 800655c:	4649      	mov	r1, r9
 800655e:	414b      	adcs	r3, r1
 8006560:	607b      	str	r3, [r7, #4]
 8006562:	f04f 0200 	mov.w	r2, #0
 8006566:	f04f 0300 	mov.w	r3, #0
 800656a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800656e:	4659      	mov	r1, fp
 8006570:	00cb      	lsls	r3, r1, #3
 8006572:	4651      	mov	r1, sl
 8006574:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006578:	4651      	mov	r1, sl
 800657a:	00ca      	lsls	r2, r1, #3
 800657c:	4610      	mov	r0, r2
 800657e:	4619      	mov	r1, r3
 8006580:	4603      	mov	r3, r0
 8006582:	4642      	mov	r2, r8
 8006584:	189b      	adds	r3, r3, r2
 8006586:	66bb      	str	r3, [r7, #104]	; 0x68
 8006588:	464b      	mov	r3, r9
 800658a:	460a      	mov	r2, r1
 800658c:	eb42 0303 	adc.w	r3, r2, r3
 8006590:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	663b      	str	r3, [r7, #96]	; 0x60
 800659c:	667a      	str	r2, [r7, #100]	; 0x64
 800659e:	f04f 0200 	mov.w	r2, #0
 80065a2:	f04f 0300 	mov.w	r3, #0
 80065a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80065aa:	4649      	mov	r1, r9
 80065ac:	008b      	lsls	r3, r1, #2
 80065ae:	4641      	mov	r1, r8
 80065b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065b4:	4641      	mov	r1, r8
 80065b6:	008a      	lsls	r2, r1, #2
 80065b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80065bc:	f7fa fb6c 	bl	8000c98 <__aeabi_uldivmod>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4b0d      	ldr	r3, [pc, #52]	; (80065fc <UART_SetConfig+0x4e4>)
 80065c6:	fba3 1302 	umull	r1, r3, r3, r2
 80065ca:	095b      	lsrs	r3, r3, #5
 80065cc:	2164      	movs	r1, #100	; 0x64
 80065ce:	fb01 f303 	mul.w	r3, r1, r3
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	011b      	lsls	r3, r3, #4
 80065d6:	3332      	adds	r3, #50	; 0x32
 80065d8:	4a08      	ldr	r2, [pc, #32]	; (80065fc <UART_SetConfig+0x4e4>)
 80065da:	fba2 2303 	umull	r2, r3, r2, r3
 80065de:	095b      	lsrs	r3, r3, #5
 80065e0:	f003 020f 	and.w	r2, r3, #15
 80065e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4422      	add	r2, r4
 80065ec:	609a      	str	r2, [r3, #8]
}
 80065ee:	bf00      	nop
 80065f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80065f4:	46bd      	mov	sp, r7
 80065f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065fa:	bf00      	nop
 80065fc:	51eb851f 	.word	0x51eb851f

08006600 <__errno>:
 8006600:	4b01      	ldr	r3, [pc, #4]	; (8006608 <__errno+0x8>)
 8006602:	6818      	ldr	r0, [r3, #0]
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	200000b4 	.word	0x200000b4

0800660c <__libc_init_array>:
 800660c:	b570      	push	{r4, r5, r6, lr}
 800660e:	4d0d      	ldr	r5, [pc, #52]	; (8006644 <__libc_init_array+0x38>)
 8006610:	4c0d      	ldr	r4, [pc, #52]	; (8006648 <__libc_init_array+0x3c>)
 8006612:	1b64      	subs	r4, r4, r5
 8006614:	10a4      	asrs	r4, r4, #2
 8006616:	2600      	movs	r6, #0
 8006618:	42a6      	cmp	r6, r4
 800661a:	d109      	bne.n	8006630 <__libc_init_array+0x24>
 800661c:	4d0b      	ldr	r5, [pc, #44]	; (800664c <__libc_init_array+0x40>)
 800661e:	4c0c      	ldr	r4, [pc, #48]	; (8006650 <__libc_init_array+0x44>)
 8006620:	f004 ffe6 	bl	800b5f0 <_init>
 8006624:	1b64      	subs	r4, r4, r5
 8006626:	10a4      	asrs	r4, r4, #2
 8006628:	2600      	movs	r6, #0
 800662a:	42a6      	cmp	r6, r4
 800662c:	d105      	bne.n	800663a <__libc_init_array+0x2e>
 800662e:	bd70      	pop	{r4, r5, r6, pc}
 8006630:	f855 3b04 	ldr.w	r3, [r5], #4
 8006634:	4798      	blx	r3
 8006636:	3601      	adds	r6, #1
 8006638:	e7ee      	b.n	8006618 <__libc_init_array+0xc>
 800663a:	f855 3b04 	ldr.w	r3, [r5], #4
 800663e:	4798      	blx	r3
 8006640:	3601      	adds	r6, #1
 8006642:	e7f2      	b.n	800662a <__libc_init_array+0x1e>
 8006644:	0800bcd0 	.word	0x0800bcd0
 8006648:	0800bcd0 	.word	0x0800bcd0
 800664c:	0800bcd0 	.word	0x0800bcd0
 8006650:	0800bcd4 	.word	0x0800bcd4

08006654 <memset>:
 8006654:	4402      	add	r2, r0
 8006656:	4603      	mov	r3, r0
 8006658:	4293      	cmp	r3, r2
 800665a:	d100      	bne.n	800665e <memset+0xa>
 800665c:	4770      	bx	lr
 800665e:	f803 1b01 	strb.w	r1, [r3], #1
 8006662:	e7f9      	b.n	8006658 <memset+0x4>

08006664 <__cvt>:
 8006664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006668:	ec55 4b10 	vmov	r4, r5, d0
 800666c:	2d00      	cmp	r5, #0
 800666e:	460e      	mov	r6, r1
 8006670:	4619      	mov	r1, r3
 8006672:	462b      	mov	r3, r5
 8006674:	bfbb      	ittet	lt
 8006676:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800667a:	461d      	movlt	r5, r3
 800667c:	2300      	movge	r3, #0
 800667e:	232d      	movlt	r3, #45	; 0x2d
 8006680:	700b      	strb	r3, [r1, #0]
 8006682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006684:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006688:	4691      	mov	r9, r2
 800668a:	f023 0820 	bic.w	r8, r3, #32
 800668e:	bfbc      	itt	lt
 8006690:	4622      	movlt	r2, r4
 8006692:	4614      	movlt	r4, r2
 8006694:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006698:	d005      	beq.n	80066a6 <__cvt+0x42>
 800669a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800669e:	d100      	bne.n	80066a2 <__cvt+0x3e>
 80066a0:	3601      	adds	r6, #1
 80066a2:	2102      	movs	r1, #2
 80066a4:	e000      	b.n	80066a8 <__cvt+0x44>
 80066a6:	2103      	movs	r1, #3
 80066a8:	ab03      	add	r3, sp, #12
 80066aa:	9301      	str	r3, [sp, #4]
 80066ac:	ab02      	add	r3, sp, #8
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	ec45 4b10 	vmov	d0, r4, r5
 80066b4:	4653      	mov	r3, sl
 80066b6:	4632      	mov	r2, r6
 80066b8:	f001 fdae 	bl	8008218 <_dtoa_r>
 80066bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80066c0:	4607      	mov	r7, r0
 80066c2:	d102      	bne.n	80066ca <__cvt+0x66>
 80066c4:	f019 0f01 	tst.w	r9, #1
 80066c8:	d022      	beq.n	8006710 <__cvt+0xac>
 80066ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80066ce:	eb07 0906 	add.w	r9, r7, r6
 80066d2:	d110      	bne.n	80066f6 <__cvt+0x92>
 80066d4:	783b      	ldrb	r3, [r7, #0]
 80066d6:	2b30      	cmp	r3, #48	; 0x30
 80066d8:	d10a      	bne.n	80066f0 <__cvt+0x8c>
 80066da:	2200      	movs	r2, #0
 80066dc:	2300      	movs	r3, #0
 80066de:	4620      	mov	r0, r4
 80066e0:	4629      	mov	r1, r5
 80066e2:	f7fa f9f9 	bl	8000ad8 <__aeabi_dcmpeq>
 80066e6:	b918      	cbnz	r0, 80066f0 <__cvt+0x8c>
 80066e8:	f1c6 0601 	rsb	r6, r6, #1
 80066ec:	f8ca 6000 	str.w	r6, [sl]
 80066f0:	f8da 3000 	ldr.w	r3, [sl]
 80066f4:	4499      	add	r9, r3
 80066f6:	2200      	movs	r2, #0
 80066f8:	2300      	movs	r3, #0
 80066fa:	4620      	mov	r0, r4
 80066fc:	4629      	mov	r1, r5
 80066fe:	f7fa f9eb 	bl	8000ad8 <__aeabi_dcmpeq>
 8006702:	b108      	cbz	r0, 8006708 <__cvt+0xa4>
 8006704:	f8cd 900c 	str.w	r9, [sp, #12]
 8006708:	2230      	movs	r2, #48	; 0x30
 800670a:	9b03      	ldr	r3, [sp, #12]
 800670c:	454b      	cmp	r3, r9
 800670e:	d307      	bcc.n	8006720 <__cvt+0xbc>
 8006710:	9b03      	ldr	r3, [sp, #12]
 8006712:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006714:	1bdb      	subs	r3, r3, r7
 8006716:	4638      	mov	r0, r7
 8006718:	6013      	str	r3, [r2, #0]
 800671a:	b004      	add	sp, #16
 800671c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006720:	1c59      	adds	r1, r3, #1
 8006722:	9103      	str	r1, [sp, #12]
 8006724:	701a      	strb	r2, [r3, #0]
 8006726:	e7f0      	b.n	800670a <__cvt+0xa6>

08006728 <__exponent>:
 8006728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800672a:	4603      	mov	r3, r0
 800672c:	2900      	cmp	r1, #0
 800672e:	bfb8      	it	lt
 8006730:	4249      	neglt	r1, r1
 8006732:	f803 2b02 	strb.w	r2, [r3], #2
 8006736:	bfb4      	ite	lt
 8006738:	222d      	movlt	r2, #45	; 0x2d
 800673a:	222b      	movge	r2, #43	; 0x2b
 800673c:	2909      	cmp	r1, #9
 800673e:	7042      	strb	r2, [r0, #1]
 8006740:	dd2a      	ble.n	8006798 <__exponent+0x70>
 8006742:	f10d 0407 	add.w	r4, sp, #7
 8006746:	46a4      	mov	ip, r4
 8006748:	270a      	movs	r7, #10
 800674a:	46a6      	mov	lr, r4
 800674c:	460a      	mov	r2, r1
 800674e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006752:	fb07 1516 	mls	r5, r7, r6, r1
 8006756:	3530      	adds	r5, #48	; 0x30
 8006758:	2a63      	cmp	r2, #99	; 0x63
 800675a:	f104 34ff 	add.w	r4, r4, #4294967295
 800675e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006762:	4631      	mov	r1, r6
 8006764:	dcf1      	bgt.n	800674a <__exponent+0x22>
 8006766:	3130      	adds	r1, #48	; 0x30
 8006768:	f1ae 0502 	sub.w	r5, lr, #2
 800676c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006770:	1c44      	adds	r4, r0, #1
 8006772:	4629      	mov	r1, r5
 8006774:	4561      	cmp	r1, ip
 8006776:	d30a      	bcc.n	800678e <__exponent+0x66>
 8006778:	f10d 0209 	add.w	r2, sp, #9
 800677c:	eba2 020e 	sub.w	r2, r2, lr
 8006780:	4565      	cmp	r5, ip
 8006782:	bf88      	it	hi
 8006784:	2200      	movhi	r2, #0
 8006786:	4413      	add	r3, r2
 8006788:	1a18      	subs	r0, r3, r0
 800678a:	b003      	add	sp, #12
 800678c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800678e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006792:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006796:	e7ed      	b.n	8006774 <__exponent+0x4c>
 8006798:	2330      	movs	r3, #48	; 0x30
 800679a:	3130      	adds	r1, #48	; 0x30
 800679c:	7083      	strb	r3, [r0, #2]
 800679e:	70c1      	strb	r1, [r0, #3]
 80067a0:	1d03      	adds	r3, r0, #4
 80067a2:	e7f1      	b.n	8006788 <__exponent+0x60>

080067a4 <_printf_float>:
 80067a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a8:	ed2d 8b02 	vpush	{d8}
 80067ac:	b08d      	sub	sp, #52	; 0x34
 80067ae:	460c      	mov	r4, r1
 80067b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80067b4:	4616      	mov	r6, r2
 80067b6:	461f      	mov	r7, r3
 80067b8:	4605      	mov	r5, r0
 80067ba:	f002 fe8b 	bl	80094d4 <_localeconv_r>
 80067be:	f8d0 a000 	ldr.w	sl, [r0]
 80067c2:	4650      	mov	r0, sl
 80067c4:	f7f9 fd0c 	bl	80001e0 <strlen>
 80067c8:	2300      	movs	r3, #0
 80067ca:	930a      	str	r3, [sp, #40]	; 0x28
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	9305      	str	r3, [sp, #20]
 80067d0:	f8d8 3000 	ldr.w	r3, [r8]
 80067d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80067d8:	3307      	adds	r3, #7
 80067da:	f023 0307 	bic.w	r3, r3, #7
 80067de:	f103 0208 	add.w	r2, r3, #8
 80067e2:	f8c8 2000 	str.w	r2, [r8]
 80067e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80067ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80067f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80067f6:	9307      	str	r3, [sp, #28]
 80067f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80067fc:	ee08 0a10 	vmov	s16, r0
 8006800:	4b9f      	ldr	r3, [pc, #636]	; (8006a80 <_printf_float+0x2dc>)
 8006802:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006806:	f04f 32ff 	mov.w	r2, #4294967295
 800680a:	f7fa f997 	bl	8000b3c <__aeabi_dcmpun>
 800680e:	bb88      	cbnz	r0, 8006874 <_printf_float+0xd0>
 8006810:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006814:	4b9a      	ldr	r3, [pc, #616]	; (8006a80 <_printf_float+0x2dc>)
 8006816:	f04f 32ff 	mov.w	r2, #4294967295
 800681a:	f7fa f971 	bl	8000b00 <__aeabi_dcmple>
 800681e:	bb48      	cbnz	r0, 8006874 <_printf_float+0xd0>
 8006820:	2200      	movs	r2, #0
 8006822:	2300      	movs	r3, #0
 8006824:	4640      	mov	r0, r8
 8006826:	4649      	mov	r1, r9
 8006828:	f7fa f960 	bl	8000aec <__aeabi_dcmplt>
 800682c:	b110      	cbz	r0, 8006834 <_printf_float+0x90>
 800682e:	232d      	movs	r3, #45	; 0x2d
 8006830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006834:	4b93      	ldr	r3, [pc, #588]	; (8006a84 <_printf_float+0x2e0>)
 8006836:	4894      	ldr	r0, [pc, #592]	; (8006a88 <_printf_float+0x2e4>)
 8006838:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800683c:	bf94      	ite	ls
 800683e:	4698      	movls	r8, r3
 8006840:	4680      	movhi	r8, r0
 8006842:	2303      	movs	r3, #3
 8006844:	6123      	str	r3, [r4, #16]
 8006846:	9b05      	ldr	r3, [sp, #20]
 8006848:	f023 0204 	bic.w	r2, r3, #4
 800684c:	6022      	str	r2, [r4, #0]
 800684e:	f04f 0900 	mov.w	r9, #0
 8006852:	9700      	str	r7, [sp, #0]
 8006854:	4633      	mov	r3, r6
 8006856:	aa0b      	add	r2, sp, #44	; 0x2c
 8006858:	4621      	mov	r1, r4
 800685a:	4628      	mov	r0, r5
 800685c:	f000 f9d8 	bl	8006c10 <_printf_common>
 8006860:	3001      	adds	r0, #1
 8006862:	f040 8090 	bne.w	8006986 <_printf_float+0x1e2>
 8006866:	f04f 30ff 	mov.w	r0, #4294967295
 800686a:	b00d      	add	sp, #52	; 0x34
 800686c:	ecbd 8b02 	vpop	{d8}
 8006870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006874:	4642      	mov	r2, r8
 8006876:	464b      	mov	r3, r9
 8006878:	4640      	mov	r0, r8
 800687a:	4649      	mov	r1, r9
 800687c:	f7fa f95e 	bl	8000b3c <__aeabi_dcmpun>
 8006880:	b140      	cbz	r0, 8006894 <_printf_float+0xf0>
 8006882:	464b      	mov	r3, r9
 8006884:	2b00      	cmp	r3, #0
 8006886:	bfbc      	itt	lt
 8006888:	232d      	movlt	r3, #45	; 0x2d
 800688a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800688e:	487f      	ldr	r0, [pc, #508]	; (8006a8c <_printf_float+0x2e8>)
 8006890:	4b7f      	ldr	r3, [pc, #508]	; (8006a90 <_printf_float+0x2ec>)
 8006892:	e7d1      	b.n	8006838 <_printf_float+0x94>
 8006894:	6863      	ldr	r3, [r4, #4]
 8006896:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800689a:	9206      	str	r2, [sp, #24]
 800689c:	1c5a      	adds	r2, r3, #1
 800689e:	d13f      	bne.n	8006920 <_printf_float+0x17c>
 80068a0:	2306      	movs	r3, #6
 80068a2:	6063      	str	r3, [r4, #4]
 80068a4:	9b05      	ldr	r3, [sp, #20]
 80068a6:	6861      	ldr	r1, [r4, #4]
 80068a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80068ac:	2300      	movs	r3, #0
 80068ae:	9303      	str	r3, [sp, #12]
 80068b0:	ab0a      	add	r3, sp, #40	; 0x28
 80068b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80068b6:	ab09      	add	r3, sp, #36	; 0x24
 80068b8:	ec49 8b10 	vmov	d0, r8, r9
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	6022      	str	r2, [r4, #0]
 80068c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80068c4:	4628      	mov	r0, r5
 80068c6:	f7ff fecd 	bl	8006664 <__cvt>
 80068ca:	9b06      	ldr	r3, [sp, #24]
 80068cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068ce:	2b47      	cmp	r3, #71	; 0x47
 80068d0:	4680      	mov	r8, r0
 80068d2:	d108      	bne.n	80068e6 <_printf_float+0x142>
 80068d4:	1cc8      	adds	r0, r1, #3
 80068d6:	db02      	blt.n	80068de <_printf_float+0x13a>
 80068d8:	6863      	ldr	r3, [r4, #4]
 80068da:	4299      	cmp	r1, r3
 80068dc:	dd41      	ble.n	8006962 <_printf_float+0x1be>
 80068de:	f1ab 0b02 	sub.w	fp, fp, #2
 80068e2:	fa5f fb8b 	uxtb.w	fp, fp
 80068e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80068ea:	d820      	bhi.n	800692e <_printf_float+0x18a>
 80068ec:	3901      	subs	r1, #1
 80068ee:	465a      	mov	r2, fp
 80068f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80068f4:	9109      	str	r1, [sp, #36]	; 0x24
 80068f6:	f7ff ff17 	bl	8006728 <__exponent>
 80068fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068fc:	1813      	adds	r3, r2, r0
 80068fe:	2a01      	cmp	r2, #1
 8006900:	4681      	mov	r9, r0
 8006902:	6123      	str	r3, [r4, #16]
 8006904:	dc02      	bgt.n	800690c <_printf_float+0x168>
 8006906:	6822      	ldr	r2, [r4, #0]
 8006908:	07d2      	lsls	r2, r2, #31
 800690a:	d501      	bpl.n	8006910 <_printf_float+0x16c>
 800690c:	3301      	adds	r3, #1
 800690e:	6123      	str	r3, [r4, #16]
 8006910:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006914:	2b00      	cmp	r3, #0
 8006916:	d09c      	beq.n	8006852 <_printf_float+0xae>
 8006918:	232d      	movs	r3, #45	; 0x2d
 800691a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800691e:	e798      	b.n	8006852 <_printf_float+0xae>
 8006920:	9a06      	ldr	r2, [sp, #24]
 8006922:	2a47      	cmp	r2, #71	; 0x47
 8006924:	d1be      	bne.n	80068a4 <_printf_float+0x100>
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1bc      	bne.n	80068a4 <_printf_float+0x100>
 800692a:	2301      	movs	r3, #1
 800692c:	e7b9      	b.n	80068a2 <_printf_float+0xfe>
 800692e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006932:	d118      	bne.n	8006966 <_printf_float+0x1c2>
 8006934:	2900      	cmp	r1, #0
 8006936:	6863      	ldr	r3, [r4, #4]
 8006938:	dd0b      	ble.n	8006952 <_printf_float+0x1ae>
 800693a:	6121      	str	r1, [r4, #16]
 800693c:	b913      	cbnz	r3, 8006944 <_printf_float+0x1a0>
 800693e:	6822      	ldr	r2, [r4, #0]
 8006940:	07d0      	lsls	r0, r2, #31
 8006942:	d502      	bpl.n	800694a <_printf_float+0x1a6>
 8006944:	3301      	adds	r3, #1
 8006946:	440b      	add	r3, r1
 8006948:	6123      	str	r3, [r4, #16]
 800694a:	65a1      	str	r1, [r4, #88]	; 0x58
 800694c:	f04f 0900 	mov.w	r9, #0
 8006950:	e7de      	b.n	8006910 <_printf_float+0x16c>
 8006952:	b913      	cbnz	r3, 800695a <_printf_float+0x1b6>
 8006954:	6822      	ldr	r2, [r4, #0]
 8006956:	07d2      	lsls	r2, r2, #31
 8006958:	d501      	bpl.n	800695e <_printf_float+0x1ba>
 800695a:	3302      	adds	r3, #2
 800695c:	e7f4      	b.n	8006948 <_printf_float+0x1a4>
 800695e:	2301      	movs	r3, #1
 8006960:	e7f2      	b.n	8006948 <_printf_float+0x1a4>
 8006962:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006968:	4299      	cmp	r1, r3
 800696a:	db05      	blt.n	8006978 <_printf_float+0x1d4>
 800696c:	6823      	ldr	r3, [r4, #0]
 800696e:	6121      	str	r1, [r4, #16]
 8006970:	07d8      	lsls	r0, r3, #31
 8006972:	d5ea      	bpl.n	800694a <_printf_float+0x1a6>
 8006974:	1c4b      	adds	r3, r1, #1
 8006976:	e7e7      	b.n	8006948 <_printf_float+0x1a4>
 8006978:	2900      	cmp	r1, #0
 800697a:	bfd4      	ite	le
 800697c:	f1c1 0202 	rsble	r2, r1, #2
 8006980:	2201      	movgt	r2, #1
 8006982:	4413      	add	r3, r2
 8006984:	e7e0      	b.n	8006948 <_printf_float+0x1a4>
 8006986:	6823      	ldr	r3, [r4, #0]
 8006988:	055a      	lsls	r2, r3, #21
 800698a:	d407      	bmi.n	800699c <_printf_float+0x1f8>
 800698c:	6923      	ldr	r3, [r4, #16]
 800698e:	4642      	mov	r2, r8
 8006990:	4631      	mov	r1, r6
 8006992:	4628      	mov	r0, r5
 8006994:	47b8      	blx	r7
 8006996:	3001      	adds	r0, #1
 8006998:	d12c      	bne.n	80069f4 <_printf_float+0x250>
 800699a:	e764      	b.n	8006866 <_printf_float+0xc2>
 800699c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80069a0:	f240 80e0 	bls.w	8006b64 <_printf_float+0x3c0>
 80069a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069a8:	2200      	movs	r2, #0
 80069aa:	2300      	movs	r3, #0
 80069ac:	f7fa f894 	bl	8000ad8 <__aeabi_dcmpeq>
 80069b0:	2800      	cmp	r0, #0
 80069b2:	d034      	beq.n	8006a1e <_printf_float+0x27a>
 80069b4:	4a37      	ldr	r2, [pc, #220]	; (8006a94 <_printf_float+0x2f0>)
 80069b6:	2301      	movs	r3, #1
 80069b8:	4631      	mov	r1, r6
 80069ba:	4628      	mov	r0, r5
 80069bc:	47b8      	blx	r7
 80069be:	3001      	adds	r0, #1
 80069c0:	f43f af51 	beq.w	8006866 <_printf_float+0xc2>
 80069c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069c8:	429a      	cmp	r2, r3
 80069ca:	db02      	blt.n	80069d2 <_printf_float+0x22e>
 80069cc:	6823      	ldr	r3, [r4, #0]
 80069ce:	07d8      	lsls	r0, r3, #31
 80069d0:	d510      	bpl.n	80069f4 <_printf_float+0x250>
 80069d2:	ee18 3a10 	vmov	r3, s16
 80069d6:	4652      	mov	r2, sl
 80069d8:	4631      	mov	r1, r6
 80069da:	4628      	mov	r0, r5
 80069dc:	47b8      	blx	r7
 80069de:	3001      	adds	r0, #1
 80069e0:	f43f af41 	beq.w	8006866 <_printf_float+0xc2>
 80069e4:	f04f 0800 	mov.w	r8, #0
 80069e8:	f104 091a 	add.w	r9, r4, #26
 80069ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069ee:	3b01      	subs	r3, #1
 80069f0:	4543      	cmp	r3, r8
 80069f2:	dc09      	bgt.n	8006a08 <_printf_float+0x264>
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	079b      	lsls	r3, r3, #30
 80069f8:	f100 8105 	bmi.w	8006c06 <_printf_float+0x462>
 80069fc:	68e0      	ldr	r0, [r4, #12]
 80069fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a00:	4298      	cmp	r0, r3
 8006a02:	bfb8      	it	lt
 8006a04:	4618      	movlt	r0, r3
 8006a06:	e730      	b.n	800686a <_printf_float+0xc6>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	464a      	mov	r2, r9
 8006a0c:	4631      	mov	r1, r6
 8006a0e:	4628      	mov	r0, r5
 8006a10:	47b8      	blx	r7
 8006a12:	3001      	adds	r0, #1
 8006a14:	f43f af27 	beq.w	8006866 <_printf_float+0xc2>
 8006a18:	f108 0801 	add.w	r8, r8, #1
 8006a1c:	e7e6      	b.n	80069ec <_printf_float+0x248>
 8006a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	dc39      	bgt.n	8006a98 <_printf_float+0x2f4>
 8006a24:	4a1b      	ldr	r2, [pc, #108]	; (8006a94 <_printf_float+0x2f0>)
 8006a26:	2301      	movs	r3, #1
 8006a28:	4631      	mov	r1, r6
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	47b8      	blx	r7
 8006a2e:	3001      	adds	r0, #1
 8006a30:	f43f af19 	beq.w	8006866 <_printf_float+0xc2>
 8006a34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	d102      	bne.n	8006a42 <_printf_float+0x29e>
 8006a3c:	6823      	ldr	r3, [r4, #0]
 8006a3e:	07d9      	lsls	r1, r3, #31
 8006a40:	d5d8      	bpl.n	80069f4 <_printf_float+0x250>
 8006a42:	ee18 3a10 	vmov	r3, s16
 8006a46:	4652      	mov	r2, sl
 8006a48:	4631      	mov	r1, r6
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	47b8      	blx	r7
 8006a4e:	3001      	adds	r0, #1
 8006a50:	f43f af09 	beq.w	8006866 <_printf_float+0xc2>
 8006a54:	f04f 0900 	mov.w	r9, #0
 8006a58:	f104 0a1a 	add.w	sl, r4, #26
 8006a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a5e:	425b      	negs	r3, r3
 8006a60:	454b      	cmp	r3, r9
 8006a62:	dc01      	bgt.n	8006a68 <_printf_float+0x2c4>
 8006a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a66:	e792      	b.n	800698e <_printf_float+0x1ea>
 8006a68:	2301      	movs	r3, #1
 8006a6a:	4652      	mov	r2, sl
 8006a6c:	4631      	mov	r1, r6
 8006a6e:	4628      	mov	r0, r5
 8006a70:	47b8      	blx	r7
 8006a72:	3001      	adds	r0, #1
 8006a74:	f43f aef7 	beq.w	8006866 <_printf_float+0xc2>
 8006a78:	f109 0901 	add.w	r9, r9, #1
 8006a7c:	e7ee      	b.n	8006a5c <_printf_float+0x2b8>
 8006a7e:	bf00      	nop
 8006a80:	7fefffff 	.word	0x7fefffff
 8006a84:	0800b7b0 	.word	0x0800b7b0
 8006a88:	0800b7b4 	.word	0x0800b7b4
 8006a8c:	0800b7bc 	.word	0x0800b7bc
 8006a90:	0800b7b8 	.word	0x0800b7b8
 8006a94:	0800b7c0 	.word	0x0800b7c0
 8006a98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	bfa8      	it	ge
 8006aa0:	461a      	movge	r2, r3
 8006aa2:	2a00      	cmp	r2, #0
 8006aa4:	4691      	mov	r9, r2
 8006aa6:	dc37      	bgt.n	8006b18 <_printf_float+0x374>
 8006aa8:	f04f 0b00 	mov.w	fp, #0
 8006aac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ab0:	f104 021a 	add.w	r2, r4, #26
 8006ab4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ab6:	9305      	str	r3, [sp, #20]
 8006ab8:	eba3 0309 	sub.w	r3, r3, r9
 8006abc:	455b      	cmp	r3, fp
 8006abe:	dc33      	bgt.n	8006b28 <_printf_float+0x384>
 8006ac0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	db3b      	blt.n	8006b40 <_printf_float+0x39c>
 8006ac8:	6823      	ldr	r3, [r4, #0]
 8006aca:	07da      	lsls	r2, r3, #31
 8006acc:	d438      	bmi.n	8006b40 <_printf_float+0x39c>
 8006ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ad0:	9a05      	ldr	r2, [sp, #20]
 8006ad2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ad4:	1a9a      	subs	r2, r3, r2
 8006ad6:	eba3 0901 	sub.w	r9, r3, r1
 8006ada:	4591      	cmp	r9, r2
 8006adc:	bfa8      	it	ge
 8006ade:	4691      	movge	r9, r2
 8006ae0:	f1b9 0f00 	cmp.w	r9, #0
 8006ae4:	dc35      	bgt.n	8006b52 <_printf_float+0x3ae>
 8006ae6:	f04f 0800 	mov.w	r8, #0
 8006aea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006aee:	f104 0a1a 	add.w	sl, r4, #26
 8006af2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006af6:	1a9b      	subs	r3, r3, r2
 8006af8:	eba3 0309 	sub.w	r3, r3, r9
 8006afc:	4543      	cmp	r3, r8
 8006afe:	f77f af79 	ble.w	80069f4 <_printf_float+0x250>
 8006b02:	2301      	movs	r3, #1
 8006b04:	4652      	mov	r2, sl
 8006b06:	4631      	mov	r1, r6
 8006b08:	4628      	mov	r0, r5
 8006b0a:	47b8      	blx	r7
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	f43f aeaa 	beq.w	8006866 <_printf_float+0xc2>
 8006b12:	f108 0801 	add.w	r8, r8, #1
 8006b16:	e7ec      	b.n	8006af2 <_printf_float+0x34e>
 8006b18:	4613      	mov	r3, r2
 8006b1a:	4631      	mov	r1, r6
 8006b1c:	4642      	mov	r2, r8
 8006b1e:	4628      	mov	r0, r5
 8006b20:	47b8      	blx	r7
 8006b22:	3001      	adds	r0, #1
 8006b24:	d1c0      	bne.n	8006aa8 <_printf_float+0x304>
 8006b26:	e69e      	b.n	8006866 <_printf_float+0xc2>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	4631      	mov	r1, r6
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	9205      	str	r2, [sp, #20]
 8006b30:	47b8      	blx	r7
 8006b32:	3001      	adds	r0, #1
 8006b34:	f43f ae97 	beq.w	8006866 <_printf_float+0xc2>
 8006b38:	9a05      	ldr	r2, [sp, #20]
 8006b3a:	f10b 0b01 	add.w	fp, fp, #1
 8006b3e:	e7b9      	b.n	8006ab4 <_printf_float+0x310>
 8006b40:	ee18 3a10 	vmov	r3, s16
 8006b44:	4652      	mov	r2, sl
 8006b46:	4631      	mov	r1, r6
 8006b48:	4628      	mov	r0, r5
 8006b4a:	47b8      	blx	r7
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	d1be      	bne.n	8006ace <_printf_float+0x32a>
 8006b50:	e689      	b.n	8006866 <_printf_float+0xc2>
 8006b52:	9a05      	ldr	r2, [sp, #20]
 8006b54:	464b      	mov	r3, r9
 8006b56:	4442      	add	r2, r8
 8006b58:	4631      	mov	r1, r6
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	47b8      	blx	r7
 8006b5e:	3001      	adds	r0, #1
 8006b60:	d1c1      	bne.n	8006ae6 <_printf_float+0x342>
 8006b62:	e680      	b.n	8006866 <_printf_float+0xc2>
 8006b64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b66:	2a01      	cmp	r2, #1
 8006b68:	dc01      	bgt.n	8006b6e <_printf_float+0x3ca>
 8006b6a:	07db      	lsls	r3, r3, #31
 8006b6c:	d538      	bpl.n	8006be0 <_printf_float+0x43c>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	4642      	mov	r2, r8
 8006b72:	4631      	mov	r1, r6
 8006b74:	4628      	mov	r0, r5
 8006b76:	47b8      	blx	r7
 8006b78:	3001      	adds	r0, #1
 8006b7a:	f43f ae74 	beq.w	8006866 <_printf_float+0xc2>
 8006b7e:	ee18 3a10 	vmov	r3, s16
 8006b82:	4652      	mov	r2, sl
 8006b84:	4631      	mov	r1, r6
 8006b86:	4628      	mov	r0, r5
 8006b88:	47b8      	blx	r7
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	f43f ae6b 	beq.w	8006866 <_printf_float+0xc2>
 8006b90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b94:	2200      	movs	r2, #0
 8006b96:	2300      	movs	r3, #0
 8006b98:	f7f9 ff9e 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b9c:	b9d8      	cbnz	r0, 8006bd6 <_printf_float+0x432>
 8006b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ba0:	f108 0201 	add.w	r2, r8, #1
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	4631      	mov	r1, r6
 8006ba8:	4628      	mov	r0, r5
 8006baa:	47b8      	blx	r7
 8006bac:	3001      	adds	r0, #1
 8006bae:	d10e      	bne.n	8006bce <_printf_float+0x42a>
 8006bb0:	e659      	b.n	8006866 <_printf_float+0xc2>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	4652      	mov	r2, sl
 8006bb6:	4631      	mov	r1, r6
 8006bb8:	4628      	mov	r0, r5
 8006bba:	47b8      	blx	r7
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	f43f ae52 	beq.w	8006866 <_printf_float+0xc2>
 8006bc2:	f108 0801 	add.w	r8, r8, #1
 8006bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	4543      	cmp	r3, r8
 8006bcc:	dcf1      	bgt.n	8006bb2 <_printf_float+0x40e>
 8006bce:	464b      	mov	r3, r9
 8006bd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006bd4:	e6dc      	b.n	8006990 <_printf_float+0x1ec>
 8006bd6:	f04f 0800 	mov.w	r8, #0
 8006bda:	f104 0a1a 	add.w	sl, r4, #26
 8006bde:	e7f2      	b.n	8006bc6 <_printf_float+0x422>
 8006be0:	2301      	movs	r3, #1
 8006be2:	4642      	mov	r2, r8
 8006be4:	e7df      	b.n	8006ba6 <_printf_float+0x402>
 8006be6:	2301      	movs	r3, #1
 8006be8:	464a      	mov	r2, r9
 8006bea:	4631      	mov	r1, r6
 8006bec:	4628      	mov	r0, r5
 8006bee:	47b8      	blx	r7
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	f43f ae38 	beq.w	8006866 <_printf_float+0xc2>
 8006bf6:	f108 0801 	add.w	r8, r8, #1
 8006bfa:	68e3      	ldr	r3, [r4, #12]
 8006bfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006bfe:	1a5b      	subs	r3, r3, r1
 8006c00:	4543      	cmp	r3, r8
 8006c02:	dcf0      	bgt.n	8006be6 <_printf_float+0x442>
 8006c04:	e6fa      	b.n	80069fc <_printf_float+0x258>
 8006c06:	f04f 0800 	mov.w	r8, #0
 8006c0a:	f104 0919 	add.w	r9, r4, #25
 8006c0e:	e7f4      	b.n	8006bfa <_printf_float+0x456>

08006c10 <_printf_common>:
 8006c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c14:	4616      	mov	r6, r2
 8006c16:	4699      	mov	r9, r3
 8006c18:	688a      	ldr	r2, [r1, #8]
 8006c1a:	690b      	ldr	r3, [r1, #16]
 8006c1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c20:	4293      	cmp	r3, r2
 8006c22:	bfb8      	it	lt
 8006c24:	4613      	movlt	r3, r2
 8006c26:	6033      	str	r3, [r6, #0]
 8006c28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c2c:	4607      	mov	r7, r0
 8006c2e:	460c      	mov	r4, r1
 8006c30:	b10a      	cbz	r2, 8006c36 <_printf_common+0x26>
 8006c32:	3301      	adds	r3, #1
 8006c34:	6033      	str	r3, [r6, #0]
 8006c36:	6823      	ldr	r3, [r4, #0]
 8006c38:	0699      	lsls	r1, r3, #26
 8006c3a:	bf42      	ittt	mi
 8006c3c:	6833      	ldrmi	r3, [r6, #0]
 8006c3e:	3302      	addmi	r3, #2
 8006c40:	6033      	strmi	r3, [r6, #0]
 8006c42:	6825      	ldr	r5, [r4, #0]
 8006c44:	f015 0506 	ands.w	r5, r5, #6
 8006c48:	d106      	bne.n	8006c58 <_printf_common+0x48>
 8006c4a:	f104 0a19 	add.w	sl, r4, #25
 8006c4e:	68e3      	ldr	r3, [r4, #12]
 8006c50:	6832      	ldr	r2, [r6, #0]
 8006c52:	1a9b      	subs	r3, r3, r2
 8006c54:	42ab      	cmp	r3, r5
 8006c56:	dc26      	bgt.n	8006ca6 <_printf_common+0x96>
 8006c58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c5c:	1e13      	subs	r3, r2, #0
 8006c5e:	6822      	ldr	r2, [r4, #0]
 8006c60:	bf18      	it	ne
 8006c62:	2301      	movne	r3, #1
 8006c64:	0692      	lsls	r2, r2, #26
 8006c66:	d42b      	bmi.n	8006cc0 <_printf_common+0xb0>
 8006c68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c6c:	4649      	mov	r1, r9
 8006c6e:	4638      	mov	r0, r7
 8006c70:	47c0      	blx	r8
 8006c72:	3001      	adds	r0, #1
 8006c74:	d01e      	beq.n	8006cb4 <_printf_common+0xa4>
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	68e5      	ldr	r5, [r4, #12]
 8006c7a:	6832      	ldr	r2, [r6, #0]
 8006c7c:	f003 0306 	and.w	r3, r3, #6
 8006c80:	2b04      	cmp	r3, #4
 8006c82:	bf08      	it	eq
 8006c84:	1aad      	subeq	r5, r5, r2
 8006c86:	68a3      	ldr	r3, [r4, #8]
 8006c88:	6922      	ldr	r2, [r4, #16]
 8006c8a:	bf0c      	ite	eq
 8006c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c90:	2500      	movne	r5, #0
 8006c92:	4293      	cmp	r3, r2
 8006c94:	bfc4      	itt	gt
 8006c96:	1a9b      	subgt	r3, r3, r2
 8006c98:	18ed      	addgt	r5, r5, r3
 8006c9a:	2600      	movs	r6, #0
 8006c9c:	341a      	adds	r4, #26
 8006c9e:	42b5      	cmp	r5, r6
 8006ca0:	d11a      	bne.n	8006cd8 <_printf_common+0xc8>
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	e008      	b.n	8006cb8 <_printf_common+0xa8>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	4652      	mov	r2, sl
 8006caa:	4649      	mov	r1, r9
 8006cac:	4638      	mov	r0, r7
 8006cae:	47c0      	blx	r8
 8006cb0:	3001      	adds	r0, #1
 8006cb2:	d103      	bne.n	8006cbc <_printf_common+0xac>
 8006cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cbc:	3501      	adds	r5, #1
 8006cbe:	e7c6      	b.n	8006c4e <_printf_common+0x3e>
 8006cc0:	18e1      	adds	r1, r4, r3
 8006cc2:	1c5a      	adds	r2, r3, #1
 8006cc4:	2030      	movs	r0, #48	; 0x30
 8006cc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006cca:	4422      	add	r2, r4
 8006ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006cd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cd4:	3302      	adds	r3, #2
 8006cd6:	e7c7      	b.n	8006c68 <_printf_common+0x58>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	4622      	mov	r2, r4
 8006cdc:	4649      	mov	r1, r9
 8006cde:	4638      	mov	r0, r7
 8006ce0:	47c0      	blx	r8
 8006ce2:	3001      	adds	r0, #1
 8006ce4:	d0e6      	beq.n	8006cb4 <_printf_common+0xa4>
 8006ce6:	3601      	adds	r6, #1
 8006ce8:	e7d9      	b.n	8006c9e <_printf_common+0x8e>
	...

08006cec <_printf_i>:
 8006cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cf0:	7e0f      	ldrb	r7, [r1, #24]
 8006cf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006cf4:	2f78      	cmp	r7, #120	; 0x78
 8006cf6:	4691      	mov	r9, r2
 8006cf8:	4680      	mov	r8, r0
 8006cfa:	460c      	mov	r4, r1
 8006cfc:	469a      	mov	sl, r3
 8006cfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d02:	d807      	bhi.n	8006d14 <_printf_i+0x28>
 8006d04:	2f62      	cmp	r7, #98	; 0x62
 8006d06:	d80a      	bhi.n	8006d1e <_printf_i+0x32>
 8006d08:	2f00      	cmp	r7, #0
 8006d0a:	f000 80d8 	beq.w	8006ebe <_printf_i+0x1d2>
 8006d0e:	2f58      	cmp	r7, #88	; 0x58
 8006d10:	f000 80a3 	beq.w	8006e5a <_printf_i+0x16e>
 8006d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d1c:	e03a      	b.n	8006d94 <_printf_i+0xa8>
 8006d1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d22:	2b15      	cmp	r3, #21
 8006d24:	d8f6      	bhi.n	8006d14 <_printf_i+0x28>
 8006d26:	a101      	add	r1, pc, #4	; (adr r1, 8006d2c <_printf_i+0x40>)
 8006d28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d2c:	08006d85 	.word	0x08006d85
 8006d30:	08006d99 	.word	0x08006d99
 8006d34:	08006d15 	.word	0x08006d15
 8006d38:	08006d15 	.word	0x08006d15
 8006d3c:	08006d15 	.word	0x08006d15
 8006d40:	08006d15 	.word	0x08006d15
 8006d44:	08006d99 	.word	0x08006d99
 8006d48:	08006d15 	.word	0x08006d15
 8006d4c:	08006d15 	.word	0x08006d15
 8006d50:	08006d15 	.word	0x08006d15
 8006d54:	08006d15 	.word	0x08006d15
 8006d58:	08006ea5 	.word	0x08006ea5
 8006d5c:	08006dc9 	.word	0x08006dc9
 8006d60:	08006e87 	.word	0x08006e87
 8006d64:	08006d15 	.word	0x08006d15
 8006d68:	08006d15 	.word	0x08006d15
 8006d6c:	08006ec7 	.word	0x08006ec7
 8006d70:	08006d15 	.word	0x08006d15
 8006d74:	08006dc9 	.word	0x08006dc9
 8006d78:	08006d15 	.word	0x08006d15
 8006d7c:	08006d15 	.word	0x08006d15
 8006d80:	08006e8f 	.word	0x08006e8f
 8006d84:	682b      	ldr	r3, [r5, #0]
 8006d86:	1d1a      	adds	r2, r3, #4
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	602a      	str	r2, [r5, #0]
 8006d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d94:	2301      	movs	r3, #1
 8006d96:	e0a3      	b.n	8006ee0 <_printf_i+0x1f4>
 8006d98:	6820      	ldr	r0, [r4, #0]
 8006d9a:	6829      	ldr	r1, [r5, #0]
 8006d9c:	0606      	lsls	r6, r0, #24
 8006d9e:	f101 0304 	add.w	r3, r1, #4
 8006da2:	d50a      	bpl.n	8006dba <_printf_i+0xce>
 8006da4:	680e      	ldr	r6, [r1, #0]
 8006da6:	602b      	str	r3, [r5, #0]
 8006da8:	2e00      	cmp	r6, #0
 8006daa:	da03      	bge.n	8006db4 <_printf_i+0xc8>
 8006dac:	232d      	movs	r3, #45	; 0x2d
 8006dae:	4276      	negs	r6, r6
 8006db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006db4:	485e      	ldr	r0, [pc, #376]	; (8006f30 <_printf_i+0x244>)
 8006db6:	230a      	movs	r3, #10
 8006db8:	e019      	b.n	8006dee <_printf_i+0x102>
 8006dba:	680e      	ldr	r6, [r1, #0]
 8006dbc:	602b      	str	r3, [r5, #0]
 8006dbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006dc2:	bf18      	it	ne
 8006dc4:	b236      	sxthne	r6, r6
 8006dc6:	e7ef      	b.n	8006da8 <_printf_i+0xbc>
 8006dc8:	682b      	ldr	r3, [r5, #0]
 8006dca:	6820      	ldr	r0, [r4, #0]
 8006dcc:	1d19      	adds	r1, r3, #4
 8006dce:	6029      	str	r1, [r5, #0]
 8006dd0:	0601      	lsls	r1, r0, #24
 8006dd2:	d501      	bpl.n	8006dd8 <_printf_i+0xec>
 8006dd4:	681e      	ldr	r6, [r3, #0]
 8006dd6:	e002      	b.n	8006dde <_printf_i+0xf2>
 8006dd8:	0646      	lsls	r6, r0, #25
 8006dda:	d5fb      	bpl.n	8006dd4 <_printf_i+0xe8>
 8006ddc:	881e      	ldrh	r6, [r3, #0]
 8006dde:	4854      	ldr	r0, [pc, #336]	; (8006f30 <_printf_i+0x244>)
 8006de0:	2f6f      	cmp	r7, #111	; 0x6f
 8006de2:	bf0c      	ite	eq
 8006de4:	2308      	moveq	r3, #8
 8006de6:	230a      	movne	r3, #10
 8006de8:	2100      	movs	r1, #0
 8006dea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006dee:	6865      	ldr	r5, [r4, #4]
 8006df0:	60a5      	str	r5, [r4, #8]
 8006df2:	2d00      	cmp	r5, #0
 8006df4:	bfa2      	ittt	ge
 8006df6:	6821      	ldrge	r1, [r4, #0]
 8006df8:	f021 0104 	bicge.w	r1, r1, #4
 8006dfc:	6021      	strge	r1, [r4, #0]
 8006dfe:	b90e      	cbnz	r6, 8006e04 <_printf_i+0x118>
 8006e00:	2d00      	cmp	r5, #0
 8006e02:	d04d      	beq.n	8006ea0 <_printf_i+0x1b4>
 8006e04:	4615      	mov	r5, r2
 8006e06:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e0a:	fb03 6711 	mls	r7, r3, r1, r6
 8006e0e:	5dc7      	ldrb	r7, [r0, r7]
 8006e10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e14:	4637      	mov	r7, r6
 8006e16:	42bb      	cmp	r3, r7
 8006e18:	460e      	mov	r6, r1
 8006e1a:	d9f4      	bls.n	8006e06 <_printf_i+0x11a>
 8006e1c:	2b08      	cmp	r3, #8
 8006e1e:	d10b      	bne.n	8006e38 <_printf_i+0x14c>
 8006e20:	6823      	ldr	r3, [r4, #0]
 8006e22:	07de      	lsls	r6, r3, #31
 8006e24:	d508      	bpl.n	8006e38 <_printf_i+0x14c>
 8006e26:	6923      	ldr	r3, [r4, #16]
 8006e28:	6861      	ldr	r1, [r4, #4]
 8006e2a:	4299      	cmp	r1, r3
 8006e2c:	bfde      	ittt	le
 8006e2e:	2330      	movle	r3, #48	; 0x30
 8006e30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e38:	1b52      	subs	r2, r2, r5
 8006e3a:	6122      	str	r2, [r4, #16]
 8006e3c:	f8cd a000 	str.w	sl, [sp]
 8006e40:	464b      	mov	r3, r9
 8006e42:	aa03      	add	r2, sp, #12
 8006e44:	4621      	mov	r1, r4
 8006e46:	4640      	mov	r0, r8
 8006e48:	f7ff fee2 	bl	8006c10 <_printf_common>
 8006e4c:	3001      	adds	r0, #1
 8006e4e:	d14c      	bne.n	8006eea <_printf_i+0x1fe>
 8006e50:	f04f 30ff 	mov.w	r0, #4294967295
 8006e54:	b004      	add	sp, #16
 8006e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e5a:	4835      	ldr	r0, [pc, #212]	; (8006f30 <_printf_i+0x244>)
 8006e5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006e60:	6829      	ldr	r1, [r5, #0]
 8006e62:	6823      	ldr	r3, [r4, #0]
 8006e64:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e68:	6029      	str	r1, [r5, #0]
 8006e6a:	061d      	lsls	r5, r3, #24
 8006e6c:	d514      	bpl.n	8006e98 <_printf_i+0x1ac>
 8006e6e:	07df      	lsls	r7, r3, #31
 8006e70:	bf44      	itt	mi
 8006e72:	f043 0320 	orrmi.w	r3, r3, #32
 8006e76:	6023      	strmi	r3, [r4, #0]
 8006e78:	b91e      	cbnz	r6, 8006e82 <_printf_i+0x196>
 8006e7a:	6823      	ldr	r3, [r4, #0]
 8006e7c:	f023 0320 	bic.w	r3, r3, #32
 8006e80:	6023      	str	r3, [r4, #0]
 8006e82:	2310      	movs	r3, #16
 8006e84:	e7b0      	b.n	8006de8 <_printf_i+0xfc>
 8006e86:	6823      	ldr	r3, [r4, #0]
 8006e88:	f043 0320 	orr.w	r3, r3, #32
 8006e8c:	6023      	str	r3, [r4, #0]
 8006e8e:	2378      	movs	r3, #120	; 0x78
 8006e90:	4828      	ldr	r0, [pc, #160]	; (8006f34 <_printf_i+0x248>)
 8006e92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e96:	e7e3      	b.n	8006e60 <_printf_i+0x174>
 8006e98:	0659      	lsls	r1, r3, #25
 8006e9a:	bf48      	it	mi
 8006e9c:	b2b6      	uxthmi	r6, r6
 8006e9e:	e7e6      	b.n	8006e6e <_printf_i+0x182>
 8006ea0:	4615      	mov	r5, r2
 8006ea2:	e7bb      	b.n	8006e1c <_printf_i+0x130>
 8006ea4:	682b      	ldr	r3, [r5, #0]
 8006ea6:	6826      	ldr	r6, [r4, #0]
 8006ea8:	6961      	ldr	r1, [r4, #20]
 8006eaa:	1d18      	adds	r0, r3, #4
 8006eac:	6028      	str	r0, [r5, #0]
 8006eae:	0635      	lsls	r5, r6, #24
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	d501      	bpl.n	8006eb8 <_printf_i+0x1cc>
 8006eb4:	6019      	str	r1, [r3, #0]
 8006eb6:	e002      	b.n	8006ebe <_printf_i+0x1d2>
 8006eb8:	0670      	lsls	r0, r6, #25
 8006eba:	d5fb      	bpl.n	8006eb4 <_printf_i+0x1c8>
 8006ebc:	8019      	strh	r1, [r3, #0]
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	6123      	str	r3, [r4, #16]
 8006ec2:	4615      	mov	r5, r2
 8006ec4:	e7ba      	b.n	8006e3c <_printf_i+0x150>
 8006ec6:	682b      	ldr	r3, [r5, #0]
 8006ec8:	1d1a      	adds	r2, r3, #4
 8006eca:	602a      	str	r2, [r5, #0]
 8006ecc:	681d      	ldr	r5, [r3, #0]
 8006ece:	6862      	ldr	r2, [r4, #4]
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	f7f9 f98c 	bl	80001f0 <memchr>
 8006ed8:	b108      	cbz	r0, 8006ede <_printf_i+0x1f2>
 8006eda:	1b40      	subs	r0, r0, r5
 8006edc:	6060      	str	r0, [r4, #4]
 8006ede:	6863      	ldr	r3, [r4, #4]
 8006ee0:	6123      	str	r3, [r4, #16]
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ee8:	e7a8      	b.n	8006e3c <_printf_i+0x150>
 8006eea:	6923      	ldr	r3, [r4, #16]
 8006eec:	462a      	mov	r2, r5
 8006eee:	4649      	mov	r1, r9
 8006ef0:	4640      	mov	r0, r8
 8006ef2:	47d0      	blx	sl
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d0ab      	beq.n	8006e50 <_printf_i+0x164>
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	079b      	lsls	r3, r3, #30
 8006efc:	d413      	bmi.n	8006f26 <_printf_i+0x23a>
 8006efe:	68e0      	ldr	r0, [r4, #12]
 8006f00:	9b03      	ldr	r3, [sp, #12]
 8006f02:	4298      	cmp	r0, r3
 8006f04:	bfb8      	it	lt
 8006f06:	4618      	movlt	r0, r3
 8006f08:	e7a4      	b.n	8006e54 <_printf_i+0x168>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	4632      	mov	r2, r6
 8006f0e:	4649      	mov	r1, r9
 8006f10:	4640      	mov	r0, r8
 8006f12:	47d0      	blx	sl
 8006f14:	3001      	adds	r0, #1
 8006f16:	d09b      	beq.n	8006e50 <_printf_i+0x164>
 8006f18:	3501      	adds	r5, #1
 8006f1a:	68e3      	ldr	r3, [r4, #12]
 8006f1c:	9903      	ldr	r1, [sp, #12]
 8006f1e:	1a5b      	subs	r3, r3, r1
 8006f20:	42ab      	cmp	r3, r5
 8006f22:	dcf2      	bgt.n	8006f0a <_printf_i+0x21e>
 8006f24:	e7eb      	b.n	8006efe <_printf_i+0x212>
 8006f26:	2500      	movs	r5, #0
 8006f28:	f104 0619 	add.w	r6, r4, #25
 8006f2c:	e7f5      	b.n	8006f1a <_printf_i+0x22e>
 8006f2e:	bf00      	nop
 8006f30:	0800b7c2 	.word	0x0800b7c2
 8006f34:	0800b7d3 	.word	0x0800b7d3

08006f38 <_scanf_float>:
 8006f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f3c:	b087      	sub	sp, #28
 8006f3e:	4617      	mov	r7, r2
 8006f40:	9303      	str	r3, [sp, #12]
 8006f42:	688b      	ldr	r3, [r1, #8]
 8006f44:	1e5a      	subs	r2, r3, #1
 8006f46:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006f4a:	bf83      	ittte	hi
 8006f4c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006f50:	195b      	addhi	r3, r3, r5
 8006f52:	9302      	strhi	r3, [sp, #8]
 8006f54:	2300      	movls	r3, #0
 8006f56:	bf86      	itte	hi
 8006f58:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006f5c:	608b      	strhi	r3, [r1, #8]
 8006f5e:	9302      	strls	r3, [sp, #8]
 8006f60:	680b      	ldr	r3, [r1, #0]
 8006f62:	468b      	mov	fp, r1
 8006f64:	2500      	movs	r5, #0
 8006f66:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006f6a:	f84b 3b1c 	str.w	r3, [fp], #28
 8006f6e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006f72:	4680      	mov	r8, r0
 8006f74:	460c      	mov	r4, r1
 8006f76:	465e      	mov	r6, fp
 8006f78:	46aa      	mov	sl, r5
 8006f7a:	46a9      	mov	r9, r5
 8006f7c:	9501      	str	r5, [sp, #4]
 8006f7e:	68a2      	ldr	r2, [r4, #8]
 8006f80:	b152      	cbz	r2, 8006f98 <_scanf_float+0x60>
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	2b4e      	cmp	r3, #78	; 0x4e
 8006f88:	d864      	bhi.n	8007054 <_scanf_float+0x11c>
 8006f8a:	2b40      	cmp	r3, #64	; 0x40
 8006f8c:	d83c      	bhi.n	8007008 <_scanf_float+0xd0>
 8006f8e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006f92:	b2c8      	uxtb	r0, r1
 8006f94:	280e      	cmp	r0, #14
 8006f96:	d93a      	bls.n	800700e <_scanf_float+0xd6>
 8006f98:	f1b9 0f00 	cmp.w	r9, #0
 8006f9c:	d003      	beq.n	8006fa6 <_scanf_float+0x6e>
 8006f9e:	6823      	ldr	r3, [r4, #0]
 8006fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fa4:	6023      	str	r3, [r4, #0]
 8006fa6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006faa:	f1ba 0f01 	cmp.w	sl, #1
 8006fae:	f200 8113 	bhi.w	80071d8 <_scanf_float+0x2a0>
 8006fb2:	455e      	cmp	r6, fp
 8006fb4:	f200 8105 	bhi.w	80071c2 <_scanf_float+0x28a>
 8006fb8:	2501      	movs	r5, #1
 8006fba:	4628      	mov	r0, r5
 8006fbc:	b007      	add	sp, #28
 8006fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006fc6:	2a0d      	cmp	r2, #13
 8006fc8:	d8e6      	bhi.n	8006f98 <_scanf_float+0x60>
 8006fca:	a101      	add	r1, pc, #4	; (adr r1, 8006fd0 <_scanf_float+0x98>)
 8006fcc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006fd0:	0800710f 	.word	0x0800710f
 8006fd4:	08006f99 	.word	0x08006f99
 8006fd8:	08006f99 	.word	0x08006f99
 8006fdc:	08006f99 	.word	0x08006f99
 8006fe0:	0800716f 	.word	0x0800716f
 8006fe4:	08007147 	.word	0x08007147
 8006fe8:	08006f99 	.word	0x08006f99
 8006fec:	08006f99 	.word	0x08006f99
 8006ff0:	0800711d 	.word	0x0800711d
 8006ff4:	08006f99 	.word	0x08006f99
 8006ff8:	08006f99 	.word	0x08006f99
 8006ffc:	08006f99 	.word	0x08006f99
 8007000:	08006f99 	.word	0x08006f99
 8007004:	080070d5 	.word	0x080070d5
 8007008:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800700c:	e7db      	b.n	8006fc6 <_scanf_float+0x8e>
 800700e:	290e      	cmp	r1, #14
 8007010:	d8c2      	bhi.n	8006f98 <_scanf_float+0x60>
 8007012:	a001      	add	r0, pc, #4	; (adr r0, 8007018 <_scanf_float+0xe0>)
 8007014:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007018:	080070c7 	.word	0x080070c7
 800701c:	08006f99 	.word	0x08006f99
 8007020:	080070c7 	.word	0x080070c7
 8007024:	0800715b 	.word	0x0800715b
 8007028:	08006f99 	.word	0x08006f99
 800702c:	08007075 	.word	0x08007075
 8007030:	080070b1 	.word	0x080070b1
 8007034:	080070b1 	.word	0x080070b1
 8007038:	080070b1 	.word	0x080070b1
 800703c:	080070b1 	.word	0x080070b1
 8007040:	080070b1 	.word	0x080070b1
 8007044:	080070b1 	.word	0x080070b1
 8007048:	080070b1 	.word	0x080070b1
 800704c:	080070b1 	.word	0x080070b1
 8007050:	080070b1 	.word	0x080070b1
 8007054:	2b6e      	cmp	r3, #110	; 0x6e
 8007056:	d809      	bhi.n	800706c <_scanf_float+0x134>
 8007058:	2b60      	cmp	r3, #96	; 0x60
 800705a:	d8b2      	bhi.n	8006fc2 <_scanf_float+0x8a>
 800705c:	2b54      	cmp	r3, #84	; 0x54
 800705e:	d077      	beq.n	8007150 <_scanf_float+0x218>
 8007060:	2b59      	cmp	r3, #89	; 0x59
 8007062:	d199      	bne.n	8006f98 <_scanf_float+0x60>
 8007064:	2d07      	cmp	r5, #7
 8007066:	d197      	bne.n	8006f98 <_scanf_float+0x60>
 8007068:	2508      	movs	r5, #8
 800706a:	e029      	b.n	80070c0 <_scanf_float+0x188>
 800706c:	2b74      	cmp	r3, #116	; 0x74
 800706e:	d06f      	beq.n	8007150 <_scanf_float+0x218>
 8007070:	2b79      	cmp	r3, #121	; 0x79
 8007072:	e7f6      	b.n	8007062 <_scanf_float+0x12a>
 8007074:	6821      	ldr	r1, [r4, #0]
 8007076:	05c8      	lsls	r0, r1, #23
 8007078:	d51a      	bpl.n	80070b0 <_scanf_float+0x178>
 800707a:	9b02      	ldr	r3, [sp, #8]
 800707c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007080:	6021      	str	r1, [r4, #0]
 8007082:	f109 0901 	add.w	r9, r9, #1
 8007086:	b11b      	cbz	r3, 8007090 <_scanf_float+0x158>
 8007088:	3b01      	subs	r3, #1
 800708a:	3201      	adds	r2, #1
 800708c:	9302      	str	r3, [sp, #8]
 800708e:	60a2      	str	r2, [r4, #8]
 8007090:	68a3      	ldr	r3, [r4, #8]
 8007092:	3b01      	subs	r3, #1
 8007094:	60a3      	str	r3, [r4, #8]
 8007096:	6923      	ldr	r3, [r4, #16]
 8007098:	3301      	adds	r3, #1
 800709a:	6123      	str	r3, [r4, #16]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	3b01      	subs	r3, #1
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	607b      	str	r3, [r7, #4]
 80070a4:	f340 8084 	ble.w	80071b0 <_scanf_float+0x278>
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	3301      	adds	r3, #1
 80070ac:	603b      	str	r3, [r7, #0]
 80070ae:	e766      	b.n	8006f7e <_scanf_float+0x46>
 80070b0:	eb1a 0f05 	cmn.w	sl, r5
 80070b4:	f47f af70 	bne.w	8006f98 <_scanf_float+0x60>
 80070b8:	6822      	ldr	r2, [r4, #0]
 80070ba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80070be:	6022      	str	r2, [r4, #0]
 80070c0:	f806 3b01 	strb.w	r3, [r6], #1
 80070c4:	e7e4      	b.n	8007090 <_scanf_float+0x158>
 80070c6:	6822      	ldr	r2, [r4, #0]
 80070c8:	0610      	lsls	r0, r2, #24
 80070ca:	f57f af65 	bpl.w	8006f98 <_scanf_float+0x60>
 80070ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070d2:	e7f4      	b.n	80070be <_scanf_float+0x186>
 80070d4:	f1ba 0f00 	cmp.w	sl, #0
 80070d8:	d10e      	bne.n	80070f8 <_scanf_float+0x1c0>
 80070da:	f1b9 0f00 	cmp.w	r9, #0
 80070de:	d10e      	bne.n	80070fe <_scanf_float+0x1c6>
 80070e0:	6822      	ldr	r2, [r4, #0]
 80070e2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80070e6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80070ea:	d108      	bne.n	80070fe <_scanf_float+0x1c6>
 80070ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80070f0:	6022      	str	r2, [r4, #0]
 80070f2:	f04f 0a01 	mov.w	sl, #1
 80070f6:	e7e3      	b.n	80070c0 <_scanf_float+0x188>
 80070f8:	f1ba 0f02 	cmp.w	sl, #2
 80070fc:	d055      	beq.n	80071aa <_scanf_float+0x272>
 80070fe:	2d01      	cmp	r5, #1
 8007100:	d002      	beq.n	8007108 <_scanf_float+0x1d0>
 8007102:	2d04      	cmp	r5, #4
 8007104:	f47f af48 	bne.w	8006f98 <_scanf_float+0x60>
 8007108:	3501      	adds	r5, #1
 800710a:	b2ed      	uxtb	r5, r5
 800710c:	e7d8      	b.n	80070c0 <_scanf_float+0x188>
 800710e:	f1ba 0f01 	cmp.w	sl, #1
 8007112:	f47f af41 	bne.w	8006f98 <_scanf_float+0x60>
 8007116:	f04f 0a02 	mov.w	sl, #2
 800711a:	e7d1      	b.n	80070c0 <_scanf_float+0x188>
 800711c:	b97d      	cbnz	r5, 800713e <_scanf_float+0x206>
 800711e:	f1b9 0f00 	cmp.w	r9, #0
 8007122:	f47f af3c 	bne.w	8006f9e <_scanf_float+0x66>
 8007126:	6822      	ldr	r2, [r4, #0]
 8007128:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800712c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007130:	f47f af39 	bne.w	8006fa6 <_scanf_float+0x6e>
 8007134:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007138:	6022      	str	r2, [r4, #0]
 800713a:	2501      	movs	r5, #1
 800713c:	e7c0      	b.n	80070c0 <_scanf_float+0x188>
 800713e:	2d03      	cmp	r5, #3
 8007140:	d0e2      	beq.n	8007108 <_scanf_float+0x1d0>
 8007142:	2d05      	cmp	r5, #5
 8007144:	e7de      	b.n	8007104 <_scanf_float+0x1cc>
 8007146:	2d02      	cmp	r5, #2
 8007148:	f47f af26 	bne.w	8006f98 <_scanf_float+0x60>
 800714c:	2503      	movs	r5, #3
 800714e:	e7b7      	b.n	80070c0 <_scanf_float+0x188>
 8007150:	2d06      	cmp	r5, #6
 8007152:	f47f af21 	bne.w	8006f98 <_scanf_float+0x60>
 8007156:	2507      	movs	r5, #7
 8007158:	e7b2      	b.n	80070c0 <_scanf_float+0x188>
 800715a:	6822      	ldr	r2, [r4, #0]
 800715c:	0591      	lsls	r1, r2, #22
 800715e:	f57f af1b 	bpl.w	8006f98 <_scanf_float+0x60>
 8007162:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007166:	6022      	str	r2, [r4, #0]
 8007168:	f8cd 9004 	str.w	r9, [sp, #4]
 800716c:	e7a8      	b.n	80070c0 <_scanf_float+0x188>
 800716e:	6822      	ldr	r2, [r4, #0]
 8007170:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007174:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007178:	d006      	beq.n	8007188 <_scanf_float+0x250>
 800717a:	0550      	lsls	r0, r2, #21
 800717c:	f57f af0c 	bpl.w	8006f98 <_scanf_float+0x60>
 8007180:	f1b9 0f00 	cmp.w	r9, #0
 8007184:	f43f af0f 	beq.w	8006fa6 <_scanf_float+0x6e>
 8007188:	0591      	lsls	r1, r2, #22
 800718a:	bf58      	it	pl
 800718c:	9901      	ldrpl	r1, [sp, #4]
 800718e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007192:	bf58      	it	pl
 8007194:	eba9 0101 	subpl.w	r1, r9, r1
 8007198:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800719c:	bf58      	it	pl
 800719e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80071a2:	6022      	str	r2, [r4, #0]
 80071a4:	f04f 0900 	mov.w	r9, #0
 80071a8:	e78a      	b.n	80070c0 <_scanf_float+0x188>
 80071aa:	f04f 0a03 	mov.w	sl, #3
 80071ae:	e787      	b.n	80070c0 <_scanf_float+0x188>
 80071b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80071b4:	4639      	mov	r1, r7
 80071b6:	4640      	mov	r0, r8
 80071b8:	4798      	blx	r3
 80071ba:	2800      	cmp	r0, #0
 80071bc:	f43f aedf 	beq.w	8006f7e <_scanf_float+0x46>
 80071c0:	e6ea      	b.n	8006f98 <_scanf_float+0x60>
 80071c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80071ca:	463a      	mov	r2, r7
 80071cc:	4640      	mov	r0, r8
 80071ce:	4798      	blx	r3
 80071d0:	6923      	ldr	r3, [r4, #16]
 80071d2:	3b01      	subs	r3, #1
 80071d4:	6123      	str	r3, [r4, #16]
 80071d6:	e6ec      	b.n	8006fb2 <_scanf_float+0x7a>
 80071d8:	1e6b      	subs	r3, r5, #1
 80071da:	2b06      	cmp	r3, #6
 80071dc:	d825      	bhi.n	800722a <_scanf_float+0x2f2>
 80071de:	2d02      	cmp	r5, #2
 80071e0:	d836      	bhi.n	8007250 <_scanf_float+0x318>
 80071e2:	455e      	cmp	r6, fp
 80071e4:	f67f aee8 	bls.w	8006fb8 <_scanf_float+0x80>
 80071e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071ec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80071f0:	463a      	mov	r2, r7
 80071f2:	4640      	mov	r0, r8
 80071f4:	4798      	blx	r3
 80071f6:	6923      	ldr	r3, [r4, #16]
 80071f8:	3b01      	subs	r3, #1
 80071fa:	6123      	str	r3, [r4, #16]
 80071fc:	e7f1      	b.n	80071e2 <_scanf_float+0x2aa>
 80071fe:	9802      	ldr	r0, [sp, #8]
 8007200:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007204:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007208:	9002      	str	r0, [sp, #8]
 800720a:	463a      	mov	r2, r7
 800720c:	4640      	mov	r0, r8
 800720e:	4798      	blx	r3
 8007210:	6923      	ldr	r3, [r4, #16]
 8007212:	3b01      	subs	r3, #1
 8007214:	6123      	str	r3, [r4, #16]
 8007216:	f10a 3aff 	add.w	sl, sl, #4294967295
 800721a:	fa5f fa8a 	uxtb.w	sl, sl
 800721e:	f1ba 0f02 	cmp.w	sl, #2
 8007222:	d1ec      	bne.n	80071fe <_scanf_float+0x2c6>
 8007224:	3d03      	subs	r5, #3
 8007226:	b2ed      	uxtb	r5, r5
 8007228:	1b76      	subs	r6, r6, r5
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	05da      	lsls	r2, r3, #23
 800722e:	d52f      	bpl.n	8007290 <_scanf_float+0x358>
 8007230:	055b      	lsls	r3, r3, #21
 8007232:	d510      	bpl.n	8007256 <_scanf_float+0x31e>
 8007234:	455e      	cmp	r6, fp
 8007236:	f67f aebf 	bls.w	8006fb8 <_scanf_float+0x80>
 800723a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800723e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007242:	463a      	mov	r2, r7
 8007244:	4640      	mov	r0, r8
 8007246:	4798      	blx	r3
 8007248:	6923      	ldr	r3, [r4, #16]
 800724a:	3b01      	subs	r3, #1
 800724c:	6123      	str	r3, [r4, #16]
 800724e:	e7f1      	b.n	8007234 <_scanf_float+0x2fc>
 8007250:	46aa      	mov	sl, r5
 8007252:	9602      	str	r6, [sp, #8]
 8007254:	e7df      	b.n	8007216 <_scanf_float+0x2de>
 8007256:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800725a:	6923      	ldr	r3, [r4, #16]
 800725c:	2965      	cmp	r1, #101	; 0x65
 800725e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007262:	f106 35ff 	add.w	r5, r6, #4294967295
 8007266:	6123      	str	r3, [r4, #16]
 8007268:	d00c      	beq.n	8007284 <_scanf_float+0x34c>
 800726a:	2945      	cmp	r1, #69	; 0x45
 800726c:	d00a      	beq.n	8007284 <_scanf_float+0x34c>
 800726e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007272:	463a      	mov	r2, r7
 8007274:	4640      	mov	r0, r8
 8007276:	4798      	blx	r3
 8007278:	6923      	ldr	r3, [r4, #16]
 800727a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800727e:	3b01      	subs	r3, #1
 8007280:	1eb5      	subs	r5, r6, #2
 8007282:	6123      	str	r3, [r4, #16]
 8007284:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007288:	463a      	mov	r2, r7
 800728a:	4640      	mov	r0, r8
 800728c:	4798      	blx	r3
 800728e:	462e      	mov	r6, r5
 8007290:	6825      	ldr	r5, [r4, #0]
 8007292:	f015 0510 	ands.w	r5, r5, #16
 8007296:	d159      	bne.n	800734c <_scanf_float+0x414>
 8007298:	7035      	strb	r5, [r6, #0]
 800729a:	6823      	ldr	r3, [r4, #0]
 800729c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80072a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072a4:	d11b      	bne.n	80072de <_scanf_float+0x3a6>
 80072a6:	9b01      	ldr	r3, [sp, #4]
 80072a8:	454b      	cmp	r3, r9
 80072aa:	eba3 0209 	sub.w	r2, r3, r9
 80072ae:	d123      	bne.n	80072f8 <_scanf_float+0x3c0>
 80072b0:	2200      	movs	r2, #0
 80072b2:	4659      	mov	r1, fp
 80072b4:	4640      	mov	r0, r8
 80072b6:	f000 fe99 	bl	8007fec <_strtod_r>
 80072ba:	6822      	ldr	r2, [r4, #0]
 80072bc:	9b03      	ldr	r3, [sp, #12]
 80072be:	f012 0f02 	tst.w	r2, #2
 80072c2:	ec57 6b10 	vmov	r6, r7, d0
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	d021      	beq.n	800730e <_scanf_float+0x3d6>
 80072ca:	9903      	ldr	r1, [sp, #12]
 80072cc:	1d1a      	adds	r2, r3, #4
 80072ce:	600a      	str	r2, [r1, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	e9c3 6700 	strd	r6, r7, [r3]
 80072d6:	68e3      	ldr	r3, [r4, #12]
 80072d8:	3301      	adds	r3, #1
 80072da:	60e3      	str	r3, [r4, #12]
 80072dc:	e66d      	b.n	8006fba <_scanf_float+0x82>
 80072de:	9b04      	ldr	r3, [sp, #16]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d0e5      	beq.n	80072b0 <_scanf_float+0x378>
 80072e4:	9905      	ldr	r1, [sp, #20]
 80072e6:	230a      	movs	r3, #10
 80072e8:	462a      	mov	r2, r5
 80072ea:	3101      	adds	r1, #1
 80072ec:	4640      	mov	r0, r8
 80072ee:	f000 ff05 	bl	80080fc <_strtol_r>
 80072f2:	9b04      	ldr	r3, [sp, #16]
 80072f4:	9e05      	ldr	r6, [sp, #20]
 80072f6:	1ac2      	subs	r2, r0, r3
 80072f8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80072fc:	429e      	cmp	r6, r3
 80072fe:	bf28      	it	cs
 8007300:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007304:	4912      	ldr	r1, [pc, #72]	; (8007350 <_scanf_float+0x418>)
 8007306:	4630      	mov	r0, r6
 8007308:	f000 f82c 	bl	8007364 <siprintf>
 800730c:	e7d0      	b.n	80072b0 <_scanf_float+0x378>
 800730e:	9903      	ldr	r1, [sp, #12]
 8007310:	f012 0f04 	tst.w	r2, #4
 8007314:	f103 0204 	add.w	r2, r3, #4
 8007318:	600a      	str	r2, [r1, #0]
 800731a:	d1d9      	bne.n	80072d0 <_scanf_float+0x398>
 800731c:	f8d3 8000 	ldr.w	r8, [r3]
 8007320:	ee10 2a10 	vmov	r2, s0
 8007324:	ee10 0a10 	vmov	r0, s0
 8007328:	463b      	mov	r3, r7
 800732a:	4639      	mov	r1, r7
 800732c:	f7f9 fc06 	bl	8000b3c <__aeabi_dcmpun>
 8007330:	b128      	cbz	r0, 800733e <_scanf_float+0x406>
 8007332:	4808      	ldr	r0, [pc, #32]	; (8007354 <_scanf_float+0x41c>)
 8007334:	f000 f810 	bl	8007358 <nanf>
 8007338:	ed88 0a00 	vstr	s0, [r8]
 800733c:	e7cb      	b.n	80072d6 <_scanf_float+0x39e>
 800733e:	4630      	mov	r0, r6
 8007340:	4639      	mov	r1, r7
 8007342:	f7f9 fc59 	bl	8000bf8 <__aeabi_d2f>
 8007346:	f8c8 0000 	str.w	r0, [r8]
 800734a:	e7c4      	b.n	80072d6 <_scanf_float+0x39e>
 800734c:	2500      	movs	r5, #0
 800734e:	e634      	b.n	8006fba <_scanf_float+0x82>
 8007350:	0800b7e4 	.word	0x0800b7e4
 8007354:	0800bbf0 	.word	0x0800bbf0

08007358 <nanf>:
 8007358:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007360 <nanf+0x8>
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	7fc00000 	.word	0x7fc00000

08007364 <siprintf>:
 8007364:	b40e      	push	{r1, r2, r3}
 8007366:	b500      	push	{lr}
 8007368:	b09c      	sub	sp, #112	; 0x70
 800736a:	ab1d      	add	r3, sp, #116	; 0x74
 800736c:	9002      	str	r0, [sp, #8]
 800736e:	9006      	str	r0, [sp, #24]
 8007370:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007374:	4809      	ldr	r0, [pc, #36]	; (800739c <siprintf+0x38>)
 8007376:	9107      	str	r1, [sp, #28]
 8007378:	9104      	str	r1, [sp, #16]
 800737a:	4909      	ldr	r1, [pc, #36]	; (80073a0 <siprintf+0x3c>)
 800737c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007380:	9105      	str	r1, [sp, #20]
 8007382:	6800      	ldr	r0, [r0, #0]
 8007384:	9301      	str	r3, [sp, #4]
 8007386:	a902      	add	r1, sp, #8
 8007388:	f002 fee4 	bl	800a154 <_svfiprintf_r>
 800738c:	9b02      	ldr	r3, [sp, #8]
 800738e:	2200      	movs	r2, #0
 8007390:	701a      	strb	r2, [r3, #0]
 8007392:	b01c      	add	sp, #112	; 0x70
 8007394:	f85d eb04 	ldr.w	lr, [sp], #4
 8007398:	b003      	add	sp, #12
 800739a:	4770      	bx	lr
 800739c:	200000b4 	.word	0x200000b4
 80073a0:	ffff0208 	.word	0xffff0208

080073a4 <sulp>:
 80073a4:	b570      	push	{r4, r5, r6, lr}
 80073a6:	4604      	mov	r4, r0
 80073a8:	460d      	mov	r5, r1
 80073aa:	ec45 4b10 	vmov	d0, r4, r5
 80073ae:	4616      	mov	r6, r2
 80073b0:	f002 fc2e 	bl	8009c10 <__ulp>
 80073b4:	ec51 0b10 	vmov	r0, r1, d0
 80073b8:	b17e      	cbz	r6, 80073da <sulp+0x36>
 80073ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80073be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	dd09      	ble.n	80073da <sulp+0x36>
 80073c6:	051b      	lsls	r3, r3, #20
 80073c8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80073cc:	2400      	movs	r4, #0
 80073ce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80073d2:	4622      	mov	r2, r4
 80073d4:	462b      	mov	r3, r5
 80073d6:	f7f9 f917 	bl	8000608 <__aeabi_dmul>
 80073da:	bd70      	pop	{r4, r5, r6, pc}
 80073dc:	0000      	movs	r0, r0
	...

080073e0 <_strtod_l>:
 80073e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e4:	ed2d 8b02 	vpush	{d8}
 80073e8:	b09d      	sub	sp, #116	; 0x74
 80073ea:	461f      	mov	r7, r3
 80073ec:	2300      	movs	r3, #0
 80073ee:	9318      	str	r3, [sp, #96]	; 0x60
 80073f0:	4ba2      	ldr	r3, [pc, #648]	; (800767c <_strtod_l+0x29c>)
 80073f2:	9213      	str	r2, [sp, #76]	; 0x4c
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	9305      	str	r3, [sp, #20]
 80073f8:	4604      	mov	r4, r0
 80073fa:	4618      	mov	r0, r3
 80073fc:	4688      	mov	r8, r1
 80073fe:	f7f8 feef 	bl	80001e0 <strlen>
 8007402:	f04f 0a00 	mov.w	sl, #0
 8007406:	4605      	mov	r5, r0
 8007408:	f04f 0b00 	mov.w	fp, #0
 800740c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007410:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007412:	781a      	ldrb	r2, [r3, #0]
 8007414:	2a2b      	cmp	r2, #43	; 0x2b
 8007416:	d04e      	beq.n	80074b6 <_strtod_l+0xd6>
 8007418:	d83b      	bhi.n	8007492 <_strtod_l+0xb2>
 800741a:	2a0d      	cmp	r2, #13
 800741c:	d834      	bhi.n	8007488 <_strtod_l+0xa8>
 800741e:	2a08      	cmp	r2, #8
 8007420:	d834      	bhi.n	800748c <_strtod_l+0xac>
 8007422:	2a00      	cmp	r2, #0
 8007424:	d03e      	beq.n	80074a4 <_strtod_l+0xc4>
 8007426:	2300      	movs	r3, #0
 8007428:	930a      	str	r3, [sp, #40]	; 0x28
 800742a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800742c:	7833      	ldrb	r3, [r6, #0]
 800742e:	2b30      	cmp	r3, #48	; 0x30
 8007430:	f040 80b0 	bne.w	8007594 <_strtod_l+0x1b4>
 8007434:	7873      	ldrb	r3, [r6, #1]
 8007436:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800743a:	2b58      	cmp	r3, #88	; 0x58
 800743c:	d168      	bne.n	8007510 <_strtod_l+0x130>
 800743e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007440:	9301      	str	r3, [sp, #4]
 8007442:	ab18      	add	r3, sp, #96	; 0x60
 8007444:	9702      	str	r7, [sp, #8]
 8007446:	9300      	str	r3, [sp, #0]
 8007448:	4a8d      	ldr	r2, [pc, #564]	; (8007680 <_strtod_l+0x2a0>)
 800744a:	ab19      	add	r3, sp, #100	; 0x64
 800744c:	a917      	add	r1, sp, #92	; 0x5c
 800744e:	4620      	mov	r0, r4
 8007450:	f001 fd38 	bl	8008ec4 <__gethex>
 8007454:	f010 0707 	ands.w	r7, r0, #7
 8007458:	4605      	mov	r5, r0
 800745a:	d005      	beq.n	8007468 <_strtod_l+0x88>
 800745c:	2f06      	cmp	r7, #6
 800745e:	d12c      	bne.n	80074ba <_strtod_l+0xda>
 8007460:	3601      	adds	r6, #1
 8007462:	2300      	movs	r3, #0
 8007464:	9617      	str	r6, [sp, #92]	; 0x5c
 8007466:	930a      	str	r3, [sp, #40]	; 0x28
 8007468:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800746a:	2b00      	cmp	r3, #0
 800746c:	f040 8590 	bne.w	8007f90 <_strtod_l+0xbb0>
 8007470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007472:	b1eb      	cbz	r3, 80074b0 <_strtod_l+0xd0>
 8007474:	4652      	mov	r2, sl
 8007476:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800747a:	ec43 2b10 	vmov	d0, r2, r3
 800747e:	b01d      	add	sp, #116	; 0x74
 8007480:	ecbd 8b02 	vpop	{d8}
 8007484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007488:	2a20      	cmp	r2, #32
 800748a:	d1cc      	bne.n	8007426 <_strtod_l+0x46>
 800748c:	3301      	adds	r3, #1
 800748e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007490:	e7be      	b.n	8007410 <_strtod_l+0x30>
 8007492:	2a2d      	cmp	r2, #45	; 0x2d
 8007494:	d1c7      	bne.n	8007426 <_strtod_l+0x46>
 8007496:	2201      	movs	r2, #1
 8007498:	920a      	str	r2, [sp, #40]	; 0x28
 800749a:	1c5a      	adds	r2, r3, #1
 800749c:	9217      	str	r2, [sp, #92]	; 0x5c
 800749e:	785b      	ldrb	r3, [r3, #1]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1c2      	bne.n	800742a <_strtod_l+0x4a>
 80074a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80074a6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f040 856e 	bne.w	8007f8c <_strtod_l+0xbac>
 80074b0:	4652      	mov	r2, sl
 80074b2:	465b      	mov	r3, fp
 80074b4:	e7e1      	b.n	800747a <_strtod_l+0x9a>
 80074b6:	2200      	movs	r2, #0
 80074b8:	e7ee      	b.n	8007498 <_strtod_l+0xb8>
 80074ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80074bc:	b13a      	cbz	r2, 80074ce <_strtod_l+0xee>
 80074be:	2135      	movs	r1, #53	; 0x35
 80074c0:	a81a      	add	r0, sp, #104	; 0x68
 80074c2:	f002 fcb0 	bl	8009e26 <__copybits>
 80074c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80074c8:	4620      	mov	r0, r4
 80074ca:	f002 f86f 	bl	80095ac <_Bfree>
 80074ce:	3f01      	subs	r7, #1
 80074d0:	2f04      	cmp	r7, #4
 80074d2:	d806      	bhi.n	80074e2 <_strtod_l+0x102>
 80074d4:	e8df f007 	tbb	[pc, r7]
 80074d8:	1714030a 	.word	0x1714030a
 80074dc:	0a          	.byte	0x0a
 80074dd:	00          	.byte	0x00
 80074de:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80074e2:	0728      	lsls	r0, r5, #28
 80074e4:	d5c0      	bpl.n	8007468 <_strtod_l+0x88>
 80074e6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80074ea:	e7bd      	b.n	8007468 <_strtod_l+0x88>
 80074ec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80074f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80074f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80074f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80074fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80074fe:	e7f0      	b.n	80074e2 <_strtod_l+0x102>
 8007500:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007684 <_strtod_l+0x2a4>
 8007504:	e7ed      	b.n	80074e2 <_strtod_l+0x102>
 8007506:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800750a:	f04f 3aff 	mov.w	sl, #4294967295
 800750e:	e7e8      	b.n	80074e2 <_strtod_l+0x102>
 8007510:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007512:	1c5a      	adds	r2, r3, #1
 8007514:	9217      	str	r2, [sp, #92]	; 0x5c
 8007516:	785b      	ldrb	r3, [r3, #1]
 8007518:	2b30      	cmp	r3, #48	; 0x30
 800751a:	d0f9      	beq.n	8007510 <_strtod_l+0x130>
 800751c:	2b00      	cmp	r3, #0
 800751e:	d0a3      	beq.n	8007468 <_strtod_l+0x88>
 8007520:	2301      	movs	r3, #1
 8007522:	f04f 0900 	mov.w	r9, #0
 8007526:	9304      	str	r3, [sp, #16]
 8007528:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800752a:	9308      	str	r3, [sp, #32]
 800752c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007530:	464f      	mov	r7, r9
 8007532:	220a      	movs	r2, #10
 8007534:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007536:	7806      	ldrb	r6, [r0, #0]
 8007538:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800753c:	b2d9      	uxtb	r1, r3
 800753e:	2909      	cmp	r1, #9
 8007540:	d92a      	bls.n	8007598 <_strtod_l+0x1b8>
 8007542:	9905      	ldr	r1, [sp, #20]
 8007544:	462a      	mov	r2, r5
 8007546:	f002 ff1f 	bl	800a388 <strncmp>
 800754a:	b398      	cbz	r0, 80075b4 <_strtod_l+0x1d4>
 800754c:	2000      	movs	r0, #0
 800754e:	4632      	mov	r2, r6
 8007550:	463d      	mov	r5, r7
 8007552:	9005      	str	r0, [sp, #20]
 8007554:	4603      	mov	r3, r0
 8007556:	2a65      	cmp	r2, #101	; 0x65
 8007558:	d001      	beq.n	800755e <_strtod_l+0x17e>
 800755a:	2a45      	cmp	r2, #69	; 0x45
 800755c:	d118      	bne.n	8007590 <_strtod_l+0x1b0>
 800755e:	b91d      	cbnz	r5, 8007568 <_strtod_l+0x188>
 8007560:	9a04      	ldr	r2, [sp, #16]
 8007562:	4302      	orrs	r2, r0
 8007564:	d09e      	beq.n	80074a4 <_strtod_l+0xc4>
 8007566:	2500      	movs	r5, #0
 8007568:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800756c:	f108 0201 	add.w	r2, r8, #1
 8007570:	9217      	str	r2, [sp, #92]	; 0x5c
 8007572:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007576:	2a2b      	cmp	r2, #43	; 0x2b
 8007578:	d075      	beq.n	8007666 <_strtod_l+0x286>
 800757a:	2a2d      	cmp	r2, #45	; 0x2d
 800757c:	d07b      	beq.n	8007676 <_strtod_l+0x296>
 800757e:	f04f 0c00 	mov.w	ip, #0
 8007582:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007586:	2909      	cmp	r1, #9
 8007588:	f240 8082 	bls.w	8007690 <_strtod_l+0x2b0>
 800758c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007590:	2600      	movs	r6, #0
 8007592:	e09d      	b.n	80076d0 <_strtod_l+0x2f0>
 8007594:	2300      	movs	r3, #0
 8007596:	e7c4      	b.n	8007522 <_strtod_l+0x142>
 8007598:	2f08      	cmp	r7, #8
 800759a:	bfd8      	it	le
 800759c:	9907      	ldrle	r1, [sp, #28]
 800759e:	f100 0001 	add.w	r0, r0, #1
 80075a2:	bfda      	itte	le
 80075a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80075a8:	9307      	strle	r3, [sp, #28]
 80075aa:	fb02 3909 	mlagt	r9, r2, r9, r3
 80075ae:	3701      	adds	r7, #1
 80075b0:	9017      	str	r0, [sp, #92]	; 0x5c
 80075b2:	e7bf      	b.n	8007534 <_strtod_l+0x154>
 80075b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075b6:	195a      	adds	r2, r3, r5
 80075b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80075ba:	5d5a      	ldrb	r2, [r3, r5]
 80075bc:	2f00      	cmp	r7, #0
 80075be:	d037      	beq.n	8007630 <_strtod_l+0x250>
 80075c0:	9005      	str	r0, [sp, #20]
 80075c2:	463d      	mov	r5, r7
 80075c4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80075c8:	2b09      	cmp	r3, #9
 80075ca:	d912      	bls.n	80075f2 <_strtod_l+0x212>
 80075cc:	2301      	movs	r3, #1
 80075ce:	e7c2      	b.n	8007556 <_strtod_l+0x176>
 80075d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075d2:	1c5a      	adds	r2, r3, #1
 80075d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80075d6:	785a      	ldrb	r2, [r3, #1]
 80075d8:	3001      	adds	r0, #1
 80075da:	2a30      	cmp	r2, #48	; 0x30
 80075dc:	d0f8      	beq.n	80075d0 <_strtod_l+0x1f0>
 80075de:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80075e2:	2b08      	cmp	r3, #8
 80075e4:	f200 84d9 	bhi.w	8007f9a <_strtod_l+0xbba>
 80075e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075ea:	9005      	str	r0, [sp, #20]
 80075ec:	2000      	movs	r0, #0
 80075ee:	9308      	str	r3, [sp, #32]
 80075f0:	4605      	mov	r5, r0
 80075f2:	3a30      	subs	r2, #48	; 0x30
 80075f4:	f100 0301 	add.w	r3, r0, #1
 80075f8:	d014      	beq.n	8007624 <_strtod_l+0x244>
 80075fa:	9905      	ldr	r1, [sp, #20]
 80075fc:	4419      	add	r1, r3
 80075fe:	9105      	str	r1, [sp, #20]
 8007600:	462b      	mov	r3, r5
 8007602:	eb00 0e05 	add.w	lr, r0, r5
 8007606:	210a      	movs	r1, #10
 8007608:	4573      	cmp	r3, lr
 800760a:	d113      	bne.n	8007634 <_strtod_l+0x254>
 800760c:	182b      	adds	r3, r5, r0
 800760e:	2b08      	cmp	r3, #8
 8007610:	f105 0501 	add.w	r5, r5, #1
 8007614:	4405      	add	r5, r0
 8007616:	dc1c      	bgt.n	8007652 <_strtod_l+0x272>
 8007618:	9907      	ldr	r1, [sp, #28]
 800761a:	230a      	movs	r3, #10
 800761c:	fb03 2301 	mla	r3, r3, r1, r2
 8007620:	9307      	str	r3, [sp, #28]
 8007622:	2300      	movs	r3, #0
 8007624:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007626:	1c51      	adds	r1, r2, #1
 8007628:	9117      	str	r1, [sp, #92]	; 0x5c
 800762a:	7852      	ldrb	r2, [r2, #1]
 800762c:	4618      	mov	r0, r3
 800762e:	e7c9      	b.n	80075c4 <_strtod_l+0x1e4>
 8007630:	4638      	mov	r0, r7
 8007632:	e7d2      	b.n	80075da <_strtod_l+0x1fa>
 8007634:	2b08      	cmp	r3, #8
 8007636:	dc04      	bgt.n	8007642 <_strtod_l+0x262>
 8007638:	9e07      	ldr	r6, [sp, #28]
 800763a:	434e      	muls	r6, r1
 800763c:	9607      	str	r6, [sp, #28]
 800763e:	3301      	adds	r3, #1
 8007640:	e7e2      	b.n	8007608 <_strtod_l+0x228>
 8007642:	f103 0c01 	add.w	ip, r3, #1
 8007646:	f1bc 0f10 	cmp.w	ip, #16
 800764a:	bfd8      	it	le
 800764c:	fb01 f909 	mulle.w	r9, r1, r9
 8007650:	e7f5      	b.n	800763e <_strtod_l+0x25e>
 8007652:	2d10      	cmp	r5, #16
 8007654:	bfdc      	itt	le
 8007656:	230a      	movle	r3, #10
 8007658:	fb03 2909 	mlale	r9, r3, r9, r2
 800765c:	e7e1      	b.n	8007622 <_strtod_l+0x242>
 800765e:	2300      	movs	r3, #0
 8007660:	9305      	str	r3, [sp, #20]
 8007662:	2301      	movs	r3, #1
 8007664:	e77c      	b.n	8007560 <_strtod_l+0x180>
 8007666:	f04f 0c00 	mov.w	ip, #0
 800766a:	f108 0202 	add.w	r2, r8, #2
 800766e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007670:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007674:	e785      	b.n	8007582 <_strtod_l+0x1a2>
 8007676:	f04f 0c01 	mov.w	ip, #1
 800767a:	e7f6      	b.n	800766a <_strtod_l+0x28a>
 800767c:	0800ba38 	.word	0x0800ba38
 8007680:	0800b7ec 	.word	0x0800b7ec
 8007684:	7ff00000 	.word	0x7ff00000
 8007688:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800768a:	1c51      	adds	r1, r2, #1
 800768c:	9117      	str	r1, [sp, #92]	; 0x5c
 800768e:	7852      	ldrb	r2, [r2, #1]
 8007690:	2a30      	cmp	r2, #48	; 0x30
 8007692:	d0f9      	beq.n	8007688 <_strtod_l+0x2a8>
 8007694:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007698:	2908      	cmp	r1, #8
 800769a:	f63f af79 	bhi.w	8007590 <_strtod_l+0x1b0>
 800769e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80076a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80076a4:	9206      	str	r2, [sp, #24]
 80076a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80076a8:	1c51      	adds	r1, r2, #1
 80076aa:	9117      	str	r1, [sp, #92]	; 0x5c
 80076ac:	7852      	ldrb	r2, [r2, #1]
 80076ae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80076b2:	2e09      	cmp	r6, #9
 80076b4:	d937      	bls.n	8007726 <_strtod_l+0x346>
 80076b6:	9e06      	ldr	r6, [sp, #24]
 80076b8:	1b89      	subs	r1, r1, r6
 80076ba:	2908      	cmp	r1, #8
 80076bc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80076c0:	dc02      	bgt.n	80076c8 <_strtod_l+0x2e8>
 80076c2:	4576      	cmp	r6, lr
 80076c4:	bfa8      	it	ge
 80076c6:	4676      	movge	r6, lr
 80076c8:	f1bc 0f00 	cmp.w	ip, #0
 80076cc:	d000      	beq.n	80076d0 <_strtod_l+0x2f0>
 80076ce:	4276      	negs	r6, r6
 80076d0:	2d00      	cmp	r5, #0
 80076d2:	d14d      	bne.n	8007770 <_strtod_l+0x390>
 80076d4:	9904      	ldr	r1, [sp, #16]
 80076d6:	4301      	orrs	r1, r0
 80076d8:	f47f aec6 	bne.w	8007468 <_strtod_l+0x88>
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f47f aee1 	bne.w	80074a4 <_strtod_l+0xc4>
 80076e2:	2a69      	cmp	r2, #105	; 0x69
 80076e4:	d027      	beq.n	8007736 <_strtod_l+0x356>
 80076e6:	dc24      	bgt.n	8007732 <_strtod_l+0x352>
 80076e8:	2a49      	cmp	r2, #73	; 0x49
 80076ea:	d024      	beq.n	8007736 <_strtod_l+0x356>
 80076ec:	2a4e      	cmp	r2, #78	; 0x4e
 80076ee:	f47f aed9 	bne.w	80074a4 <_strtod_l+0xc4>
 80076f2:	499f      	ldr	r1, [pc, #636]	; (8007970 <_strtod_l+0x590>)
 80076f4:	a817      	add	r0, sp, #92	; 0x5c
 80076f6:	f001 fe3d 	bl	8009374 <__match>
 80076fa:	2800      	cmp	r0, #0
 80076fc:	f43f aed2 	beq.w	80074a4 <_strtod_l+0xc4>
 8007700:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	2b28      	cmp	r3, #40	; 0x28
 8007706:	d12d      	bne.n	8007764 <_strtod_l+0x384>
 8007708:	499a      	ldr	r1, [pc, #616]	; (8007974 <_strtod_l+0x594>)
 800770a:	aa1a      	add	r2, sp, #104	; 0x68
 800770c:	a817      	add	r0, sp, #92	; 0x5c
 800770e:	f001 fe45 	bl	800939c <__hexnan>
 8007712:	2805      	cmp	r0, #5
 8007714:	d126      	bne.n	8007764 <_strtod_l+0x384>
 8007716:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007718:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800771c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007720:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007724:	e6a0      	b.n	8007468 <_strtod_l+0x88>
 8007726:	210a      	movs	r1, #10
 8007728:	fb01 2e0e 	mla	lr, r1, lr, r2
 800772c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007730:	e7b9      	b.n	80076a6 <_strtod_l+0x2c6>
 8007732:	2a6e      	cmp	r2, #110	; 0x6e
 8007734:	e7db      	b.n	80076ee <_strtod_l+0x30e>
 8007736:	4990      	ldr	r1, [pc, #576]	; (8007978 <_strtod_l+0x598>)
 8007738:	a817      	add	r0, sp, #92	; 0x5c
 800773a:	f001 fe1b 	bl	8009374 <__match>
 800773e:	2800      	cmp	r0, #0
 8007740:	f43f aeb0 	beq.w	80074a4 <_strtod_l+0xc4>
 8007744:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007746:	498d      	ldr	r1, [pc, #564]	; (800797c <_strtod_l+0x59c>)
 8007748:	3b01      	subs	r3, #1
 800774a:	a817      	add	r0, sp, #92	; 0x5c
 800774c:	9317      	str	r3, [sp, #92]	; 0x5c
 800774e:	f001 fe11 	bl	8009374 <__match>
 8007752:	b910      	cbnz	r0, 800775a <_strtod_l+0x37a>
 8007754:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007756:	3301      	adds	r3, #1
 8007758:	9317      	str	r3, [sp, #92]	; 0x5c
 800775a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800798c <_strtod_l+0x5ac>
 800775e:	f04f 0a00 	mov.w	sl, #0
 8007762:	e681      	b.n	8007468 <_strtod_l+0x88>
 8007764:	4886      	ldr	r0, [pc, #536]	; (8007980 <_strtod_l+0x5a0>)
 8007766:	f002 fdf7 	bl	800a358 <nan>
 800776a:	ec5b ab10 	vmov	sl, fp, d0
 800776e:	e67b      	b.n	8007468 <_strtod_l+0x88>
 8007770:	9b05      	ldr	r3, [sp, #20]
 8007772:	9807      	ldr	r0, [sp, #28]
 8007774:	1af3      	subs	r3, r6, r3
 8007776:	2f00      	cmp	r7, #0
 8007778:	bf08      	it	eq
 800777a:	462f      	moveq	r7, r5
 800777c:	2d10      	cmp	r5, #16
 800777e:	9306      	str	r3, [sp, #24]
 8007780:	46a8      	mov	r8, r5
 8007782:	bfa8      	it	ge
 8007784:	f04f 0810 	movge.w	r8, #16
 8007788:	f7f8 fec4 	bl	8000514 <__aeabi_ui2d>
 800778c:	2d09      	cmp	r5, #9
 800778e:	4682      	mov	sl, r0
 8007790:	468b      	mov	fp, r1
 8007792:	dd13      	ble.n	80077bc <_strtod_l+0x3dc>
 8007794:	4b7b      	ldr	r3, [pc, #492]	; (8007984 <_strtod_l+0x5a4>)
 8007796:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800779a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800779e:	f7f8 ff33 	bl	8000608 <__aeabi_dmul>
 80077a2:	4682      	mov	sl, r0
 80077a4:	4648      	mov	r0, r9
 80077a6:	468b      	mov	fp, r1
 80077a8:	f7f8 feb4 	bl	8000514 <__aeabi_ui2d>
 80077ac:	4602      	mov	r2, r0
 80077ae:	460b      	mov	r3, r1
 80077b0:	4650      	mov	r0, sl
 80077b2:	4659      	mov	r1, fp
 80077b4:	f7f8 fd72 	bl	800029c <__adddf3>
 80077b8:	4682      	mov	sl, r0
 80077ba:	468b      	mov	fp, r1
 80077bc:	2d0f      	cmp	r5, #15
 80077be:	dc38      	bgt.n	8007832 <_strtod_l+0x452>
 80077c0:	9b06      	ldr	r3, [sp, #24]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f43f ae50 	beq.w	8007468 <_strtod_l+0x88>
 80077c8:	dd24      	ble.n	8007814 <_strtod_l+0x434>
 80077ca:	2b16      	cmp	r3, #22
 80077cc:	dc0b      	bgt.n	80077e6 <_strtod_l+0x406>
 80077ce:	496d      	ldr	r1, [pc, #436]	; (8007984 <_strtod_l+0x5a4>)
 80077d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80077d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077d8:	4652      	mov	r2, sl
 80077da:	465b      	mov	r3, fp
 80077dc:	f7f8 ff14 	bl	8000608 <__aeabi_dmul>
 80077e0:	4682      	mov	sl, r0
 80077e2:	468b      	mov	fp, r1
 80077e4:	e640      	b.n	8007468 <_strtod_l+0x88>
 80077e6:	9a06      	ldr	r2, [sp, #24]
 80077e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80077ec:	4293      	cmp	r3, r2
 80077ee:	db20      	blt.n	8007832 <_strtod_l+0x452>
 80077f0:	4c64      	ldr	r4, [pc, #400]	; (8007984 <_strtod_l+0x5a4>)
 80077f2:	f1c5 050f 	rsb	r5, r5, #15
 80077f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80077fa:	4652      	mov	r2, sl
 80077fc:	465b      	mov	r3, fp
 80077fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007802:	f7f8 ff01 	bl	8000608 <__aeabi_dmul>
 8007806:	9b06      	ldr	r3, [sp, #24]
 8007808:	1b5d      	subs	r5, r3, r5
 800780a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800780e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007812:	e7e3      	b.n	80077dc <_strtod_l+0x3fc>
 8007814:	9b06      	ldr	r3, [sp, #24]
 8007816:	3316      	adds	r3, #22
 8007818:	db0b      	blt.n	8007832 <_strtod_l+0x452>
 800781a:	9b05      	ldr	r3, [sp, #20]
 800781c:	1b9e      	subs	r6, r3, r6
 800781e:	4b59      	ldr	r3, [pc, #356]	; (8007984 <_strtod_l+0x5a4>)
 8007820:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007824:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007828:	4650      	mov	r0, sl
 800782a:	4659      	mov	r1, fp
 800782c:	f7f9 f816 	bl	800085c <__aeabi_ddiv>
 8007830:	e7d6      	b.n	80077e0 <_strtod_l+0x400>
 8007832:	9b06      	ldr	r3, [sp, #24]
 8007834:	eba5 0808 	sub.w	r8, r5, r8
 8007838:	4498      	add	r8, r3
 800783a:	f1b8 0f00 	cmp.w	r8, #0
 800783e:	dd74      	ble.n	800792a <_strtod_l+0x54a>
 8007840:	f018 030f 	ands.w	r3, r8, #15
 8007844:	d00a      	beq.n	800785c <_strtod_l+0x47c>
 8007846:	494f      	ldr	r1, [pc, #316]	; (8007984 <_strtod_l+0x5a4>)
 8007848:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800784c:	4652      	mov	r2, sl
 800784e:	465b      	mov	r3, fp
 8007850:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007854:	f7f8 fed8 	bl	8000608 <__aeabi_dmul>
 8007858:	4682      	mov	sl, r0
 800785a:	468b      	mov	fp, r1
 800785c:	f038 080f 	bics.w	r8, r8, #15
 8007860:	d04f      	beq.n	8007902 <_strtod_l+0x522>
 8007862:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007866:	dd22      	ble.n	80078ae <_strtod_l+0x4ce>
 8007868:	2500      	movs	r5, #0
 800786a:	462e      	mov	r6, r5
 800786c:	9507      	str	r5, [sp, #28]
 800786e:	9505      	str	r5, [sp, #20]
 8007870:	2322      	movs	r3, #34	; 0x22
 8007872:	f8df b118 	ldr.w	fp, [pc, #280]	; 800798c <_strtod_l+0x5ac>
 8007876:	6023      	str	r3, [r4, #0]
 8007878:	f04f 0a00 	mov.w	sl, #0
 800787c:	9b07      	ldr	r3, [sp, #28]
 800787e:	2b00      	cmp	r3, #0
 8007880:	f43f adf2 	beq.w	8007468 <_strtod_l+0x88>
 8007884:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007886:	4620      	mov	r0, r4
 8007888:	f001 fe90 	bl	80095ac <_Bfree>
 800788c:	9905      	ldr	r1, [sp, #20]
 800788e:	4620      	mov	r0, r4
 8007890:	f001 fe8c 	bl	80095ac <_Bfree>
 8007894:	4631      	mov	r1, r6
 8007896:	4620      	mov	r0, r4
 8007898:	f001 fe88 	bl	80095ac <_Bfree>
 800789c:	9907      	ldr	r1, [sp, #28]
 800789e:	4620      	mov	r0, r4
 80078a0:	f001 fe84 	bl	80095ac <_Bfree>
 80078a4:	4629      	mov	r1, r5
 80078a6:	4620      	mov	r0, r4
 80078a8:	f001 fe80 	bl	80095ac <_Bfree>
 80078ac:	e5dc      	b.n	8007468 <_strtod_l+0x88>
 80078ae:	4b36      	ldr	r3, [pc, #216]	; (8007988 <_strtod_l+0x5a8>)
 80078b0:	9304      	str	r3, [sp, #16]
 80078b2:	2300      	movs	r3, #0
 80078b4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80078b8:	4650      	mov	r0, sl
 80078ba:	4659      	mov	r1, fp
 80078bc:	4699      	mov	r9, r3
 80078be:	f1b8 0f01 	cmp.w	r8, #1
 80078c2:	dc21      	bgt.n	8007908 <_strtod_l+0x528>
 80078c4:	b10b      	cbz	r3, 80078ca <_strtod_l+0x4ea>
 80078c6:	4682      	mov	sl, r0
 80078c8:	468b      	mov	fp, r1
 80078ca:	4b2f      	ldr	r3, [pc, #188]	; (8007988 <_strtod_l+0x5a8>)
 80078cc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80078d0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80078d4:	4652      	mov	r2, sl
 80078d6:	465b      	mov	r3, fp
 80078d8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80078dc:	f7f8 fe94 	bl	8000608 <__aeabi_dmul>
 80078e0:	4b2a      	ldr	r3, [pc, #168]	; (800798c <_strtod_l+0x5ac>)
 80078e2:	460a      	mov	r2, r1
 80078e4:	400b      	ands	r3, r1
 80078e6:	492a      	ldr	r1, [pc, #168]	; (8007990 <_strtod_l+0x5b0>)
 80078e8:	428b      	cmp	r3, r1
 80078ea:	4682      	mov	sl, r0
 80078ec:	d8bc      	bhi.n	8007868 <_strtod_l+0x488>
 80078ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80078f2:	428b      	cmp	r3, r1
 80078f4:	bf86      	itte	hi
 80078f6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007994 <_strtod_l+0x5b4>
 80078fa:	f04f 3aff 	movhi.w	sl, #4294967295
 80078fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007902:	2300      	movs	r3, #0
 8007904:	9304      	str	r3, [sp, #16]
 8007906:	e084      	b.n	8007a12 <_strtod_l+0x632>
 8007908:	f018 0f01 	tst.w	r8, #1
 800790c:	d005      	beq.n	800791a <_strtod_l+0x53a>
 800790e:	9b04      	ldr	r3, [sp, #16]
 8007910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007914:	f7f8 fe78 	bl	8000608 <__aeabi_dmul>
 8007918:	2301      	movs	r3, #1
 800791a:	9a04      	ldr	r2, [sp, #16]
 800791c:	3208      	adds	r2, #8
 800791e:	f109 0901 	add.w	r9, r9, #1
 8007922:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007926:	9204      	str	r2, [sp, #16]
 8007928:	e7c9      	b.n	80078be <_strtod_l+0x4de>
 800792a:	d0ea      	beq.n	8007902 <_strtod_l+0x522>
 800792c:	f1c8 0800 	rsb	r8, r8, #0
 8007930:	f018 020f 	ands.w	r2, r8, #15
 8007934:	d00a      	beq.n	800794c <_strtod_l+0x56c>
 8007936:	4b13      	ldr	r3, [pc, #76]	; (8007984 <_strtod_l+0x5a4>)
 8007938:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800793c:	4650      	mov	r0, sl
 800793e:	4659      	mov	r1, fp
 8007940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007944:	f7f8 ff8a 	bl	800085c <__aeabi_ddiv>
 8007948:	4682      	mov	sl, r0
 800794a:	468b      	mov	fp, r1
 800794c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007950:	d0d7      	beq.n	8007902 <_strtod_l+0x522>
 8007952:	f1b8 0f1f 	cmp.w	r8, #31
 8007956:	dd1f      	ble.n	8007998 <_strtod_l+0x5b8>
 8007958:	2500      	movs	r5, #0
 800795a:	462e      	mov	r6, r5
 800795c:	9507      	str	r5, [sp, #28]
 800795e:	9505      	str	r5, [sp, #20]
 8007960:	2322      	movs	r3, #34	; 0x22
 8007962:	f04f 0a00 	mov.w	sl, #0
 8007966:	f04f 0b00 	mov.w	fp, #0
 800796a:	6023      	str	r3, [r4, #0]
 800796c:	e786      	b.n	800787c <_strtod_l+0x49c>
 800796e:	bf00      	nop
 8007970:	0800b7bd 	.word	0x0800b7bd
 8007974:	0800b800 	.word	0x0800b800
 8007978:	0800b7b5 	.word	0x0800b7b5
 800797c:	0800b944 	.word	0x0800b944
 8007980:	0800bbf0 	.word	0x0800bbf0
 8007984:	0800bad0 	.word	0x0800bad0
 8007988:	0800baa8 	.word	0x0800baa8
 800798c:	7ff00000 	.word	0x7ff00000
 8007990:	7ca00000 	.word	0x7ca00000
 8007994:	7fefffff 	.word	0x7fefffff
 8007998:	f018 0310 	ands.w	r3, r8, #16
 800799c:	bf18      	it	ne
 800799e:	236a      	movne	r3, #106	; 0x6a
 80079a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007d50 <_strtod_l+0x970>
 80079a4:	9304      	str	r3, [sp, #16]
 80079a6:	4650      	mov	r0, sl
 80079a8:	4659      	mov	r1, fp
 80079aa:	2300      	movs	r3, #0
 80079ac:	f018 0f01 	tst.w	r8, #1
 80079b0:	d004      	beq.n	80079bc <_strtod_l+0x5dc>
 80079b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80079b6:	f7f8 fe27 	bl	8000608 <__aeabi_dmul>
 80079ba:	2301      	movs	r3, #1
 80079bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80079c0:	f109 0908 	add.w	r9, r9, #8
 80079c4:	d1f2      	bne.n	80079ac <_strtod_l+0x5cc>
 80079c6:	b10b      	cbz	r3, 80079cc <_strtod_l+0x5ec>
 80079c8:	4682      	mov	sl, r0
 80079ca:	468b      	mov	fp, r1
 80079cc:	9b04      	ldr	r3, [sp, #16]
 80079ce:	b1c3      	cbz	r3, 8007a02 <_strtod_l+0x622>
 80079d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80079d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80079d8:	2b00      	cmp	r3, #0
 80079da:	4659      	mov	r1, fp
 80079dc:	dd11      	ble.n	8007a02 <_strtod_l+0x622>
 80079de:	2b1f      	cmp	r3, #31
 80079e0:	f340 8124 	ble.w	8007c2c <_strtod_l+0x84c>
 80079e4:	2b34      	cmp	r3, #52	; 0x34
 80079e6:	bfde      	ittt	le
 80079e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80079ec:	f04f 33ff 	movle.w	r3, #4294967295
 80079f0:	fa03 f202 	lslle.w	r2, r3, r2
 80079f4:	f04f 0a00 	mov.w	sl, #0
 80079f8:	bfcc      	ite	gt
 80079fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80079fe:	ea02 0b01 	andle.w	fp, r2, r1
 8007a02:	2200      	movs	r2, #0
 8007a04:	2300      	movs	r3, #0
 8007a06:	4650      	mov	r0, sl
 8007a08:	4659      	mov	r1, fp
 8007a0a:	f7f9 f865 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	d1a2      	bne.n	8007958 <_strtod_l+0x578>
 8007a12:	9b07      	ldr	r3, [sp, #28]
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	9908      	ldr	r1, [sp, #32]
 8007a18:	462b      	mov	r3, r5
 8007a1a:	463a      	mov	r2, r7
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f001 fe2d 	bl	800967c <__s2b>
 8007a22:	9007      	str	r0, [sp, #28]
 8007a24:	2800      	cmp	r0, #0
 8007a26:	f43f af1f 	beq.w	8007868 <_strtod_l+0x488>
 8007a2a:	9b05      	ldr	r3, [sp, #20]
 8007a2c:	1b9e      	subs	r6, r3, r6
 8007a2e:	9b06      	ldr	r3, [sp, #24]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	bfb4      	ite	lt
 8007a34:	4633      	movlt	r3, r6
 8007a36:	2300      	movge	r3, #0
 8007a38:	930c      	str	r3, [sp, #48]	; 0x30
 8007a3a:	9b06      	ldr	r3, [sp, #24]
 8007a3c:	2500      	movs	r5, #0
 8007a3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007a42:	9312      	str	r3, [sp, #72]	; 0x48
 8007a44:	462e      	mov	r6, r5
 8007a46:	9b07      	ldr	r3, [sp, #28]
 8007a48:	4620      	mov	r0, r4
 8007a4a:	6859      	ldr	r1, [r3, #4]
 8007a4c:	f001 fd6e 	bl	800952c <_Balloc>
 8007a50:	9005      	str	r0, [sp, #20]
 8007a52:	2800      	cmp	r0, #0
 8007a54:	f43f af0c 	beq.w	8007870 <_strtod_l+0x490>
 8007a58:	9b07      	ldr	r3, [sp, #28]
 8007a5a:	691a      	ldr	r2, [r3, #16]
 8007a5c:	3202      	adds	r2, #2
 8007a5e:	f103 010c 	add.w	r1, r3, #12
 8007a62:	0092      	lsls	r2, r2, #2
 8007a64:	300c      	adds	r0, #12
 8007a66:	f001 fd53 	bl	8009510 <memcpy>
 8007a6a:	ec4b ab10 	vmov	d0, sl, fp
 8007a6e:	aa1a      	add	r2, sp, #104	; 0x68
 8007a70:	a919      	add	r1, sp, #100	; 0x64
 8007a72:	4620      	mov	r0, r4
 8007a74:	f002 f948 	bl	8009d08 <__d2b>
 8007a78:	ec4b ab18 	vmov	d8, sl, fp
 8007a7c:	9018      	str	r0, [sp, #96]	; 0x60
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	f43f aef6 	beq.w	8007870 <_strtod_l+0x490>
 8007a84:	2101      	movs	r1, #1
 8007a86:	4620      	mov	r0, r4
 8007a88:	f001 fe92 	bl	80097b0 <__i2b>
 8007a8c:	4606      	mov	r6, r0
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	f43f aeee 	beq.w	8007870 <_strtod_l+0x490>
 8007a94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a96:	9904      	ldr	r1, [sp, #16]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	bfab      	itete	ge
 8007a9c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007a9e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007aa0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007aa2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007aa6:	bfac      	ite	ge
 8007aa8:	eb03 0902 	addge.w	r9, r3, r2
 8007aac:	1ad7      	sublt	r7, r2, r3
 8007aae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007ab0:	eba3 0801 	sub.w	r8, r3, r1
 8007ab4:	4490      	add	r8, r2
 8007ab6:	4ba1      	ldr	r3, [pc, #644]	; (8007d3c <_strtod_l+0x95c>)
 8007ab8:	f108 38ff 	add.w	r8, r8, #4294967295
 8007abc:	4598      	cmp	r8, r3
 8007abe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007ac2:	f280 80c7 	bge.w	8007c54 <_strtod_l+0x874>
 8007ac6:	eba3 0308 	sub.w	r3, r3, r8
 8007aca:	2b1f      	cmp	r3, #31
 8007acc:	eba2 0203 	sub.w	r2, r2, r3
 8007ad0:	f04f 0101 	mov.w	r1, #1
 8007ad4:	f300 80b1 	bgt.w	8007c3a <_strtod_l+0x85a>
 8007ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8007adc:	930d      	str	r3, [sp, #52]	; 0x34
 8007ade:	2300      	movs	r3, #0
 8007ae0:	9308      	str	r3, [sp, #32]
 8007ae2:	eb09 0802 	add.w	r8, r9, r2
 8007ae6:	9b04      	ldr	r3, [sp, #16]
 8007ae8:	45c1      	cmp	r9, r8
 8007aea:	4417      	add	r7, r2
 8007aec:	441f      	add	r7, r3
 8007aee:	464b      	mov	r3, r9
 8007af0:	bfa8      	it	ge
 8007af2:	4643      	movge	r3, r8
 8007af4:	42bb      	cmp	r3, r7
 8007af6:	bfa8      	it	ge
 8007af8:	463b      	movge	r3, r7
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	bfc2      	ittt	gt
 8007afe:	eba8 0803 	subgt.w	r8, r8, r3
 8007b02:	1aff      	subgt	r7, r7, r3
 8007b04:	eba9 0903 	subgt.w	r9, r9, r3
 8007b08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	dd17      	ble.n	8007b3e <_strtod_l+0x75e>
 8007b0e:	4631      	mov	r1, r6
 8007b10:	461a      	mov	r2, r3
 8007b12:	4620      	mov	r0, r4
 8007b14:	f001 ff0c 	bl	8009930 <__pow5mult>
 8007b18:	4606      	mov	r6, r0
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	f43f aea8 	beq.w	8007870 <_strtod_l+0x490>
 8007b20:	4601      	mov	r1, r0
 8007b22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007b24:	4620      	mov	r0, r4
 8007b26:	f001 fe59 	bl	80097dc <__multiply>
 8007b2a:	900b      	str	r0, [sp, #44]	; 0x2c
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	f43f ae9f 	beq.w	8007870 <_strtod_l+0x490>
 8007b32:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b34:	4620      	mov	r0, r4
 8007b36:	f001 fd39 	bl	80095ac <_Bfree>
 8007b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b3c:	9318      	str	r3, [sp, #96]	; 0x60
 8007b3e:	f1b8 0f00 	cmp.w	r8, #0
 8007b42:	f300 808c 	bgt.w	8007c5e <_strtod_l+0x87e>
 8007b46:	9b06      	ldr	r3, [sp, #24]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	dd08      	ble.n	8007b5e <_strtod_l+0x77e>
 8007b4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b4e:	9905      	ldr	r1, [sp, #20]
 8007b50:	4620      	mov	r0, r4
 8007b52:	f001 feed 	bl	8009930 <__pow5mult>
 8007b56:	9005      	str	r0, [sp, #20]
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	f43f ae89 	beq.w	8007870 <_strtod_l+0x490>
 8007b5e:	2f00      	cmp	r7, #0
 8007b60:	dd08      	ble.n	8007b74 <_strtod_l+0x794>
 8007b62:	9905      	ldr	r1, [sp, #20]
 8007b64:	463a      	mov	r2, r7
 8007b66:	4620      	mov	r0, r4
 8007b68:	f001 ff3c 	bl	80099e4 <__lshift>
 8007b6c:	9005      	str	r0, [sp, #20]
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	f43f ae7e 	beq.w	8007870 <_strtod_l+0x490>
 8007b74:	f1b9 0f00 	cmp.w	r9, #0
 8007b78:	dd08      	ble.n	8007b8c <_strtod_l+0x7ac>
 8007b7a:	4631      	mov	r1, r6
 8007b7c:	464a      	mov	r2, r9
 8007b7e:	4620      	mov	r0, r4
 8007b80:	f001 ff30 	bl	80099e4 <__lshift>
 8007b84:	4606      	mov	r6, r0
 8007b86:	2800      	cmp	r0, #0
 8007b88:	f43f ae72 	beq.w	8007870 <_strtod_l+0x490>
 8007b8c:	9a05      	ldr	r2, [sp, #20]
 8007b8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b90:	4620      	mov	r0, r4
 8007b92:	f001 ffb3 	bl	8009afc <__mdiff>
 8007b96:	4605      	mov	r5, r0
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	f43f ae69 	beq.w	8007870 <_strtod_l+0x490>
 8007b9e:	68c3      	ldr	r3, [r0, #12]
 8007ba0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60c3      	str	r3, [r0, #12]
 8007ba6:	4631      	mov	r1, r6
 8007ba8:	f001 ff8c 	bl	8009ac4 <__mcmp>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	da60      	bge.n	8007c72 <_strtod_l+0x892>
 8007bb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bb2:	ea53 030a 	orrs.w	r3, r3, sl
 8007bb6:	f040 8082 	bne.w	8007cbe <_strtod_l+0x8de>
 8007bba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d17d      	bne.n	8007cbe <_strtod_l+0x8de>
 8007bc2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007bc6:	0d1b      	lsrs	r3, r3, #20
 8007bc8:	051b      	lsls	r3, r3, #20
 8007bca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007bce:	d976      	bls.n	8007cbe <_strtod_l+0x8de>
 8007bd0:	696b      	ldr	r3, [r5, #20]
 8007bd2:	b913      	cbnz	r3, 8007bda <_strtod_l+0x7fa>
 8007bd4:	692b      	ldr	r3, [r5, #16]
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	dd71      	ble.n	8007cbe <_strtod_l+0x8de>
 8007bda:	4629      	mov	r1, r5
 8007bdc:	2201      	movs	r2, #1
 8007bde:	4620      	mov	r0, r4
 8007be0:	f001 ff00 	bl	80099e4 <__lshift>
 8007be4:	4631      	mov	r1, r6
 8007be6:	4605      	mov	r5, r0
 8007be8:	f001 ff6c 	bl	8009ac4 <__mcmp>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	dd66      	ble.n	8007cbe <_strtod_l+0x8de>
 8007bf0:	9904      	ldr	r1, [sp, #16]
 8007bf2:	4a53      	ldr	r2, [pc, #332]	; (8007d40 <_strtod_l+0x960>)
 8007bf4:	465b      	mov	r3, fp
 8007bf6:	2900      	cmp	r1, #0
 8007bf8:	f000 8081 	beq.w	8007cfe <_strtod_l+0x91e>
 8007bfc:	ea02 010b 	and.w	r1, r2, fp
 8007c00:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007c04:	dc7b      	bgt.n	8007cfe <_strtod_l+0x91e>
 8007c06:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007c0a:	f77f aea9 	ble.w	8007960 <_strtod_l+0x580>
 8007c0e:	4b4d      	ldr	r3, [pc, #308]	; (8007d44 <_strtod_l+0x964>)
 8007c10:	4650      	mov	r0, sl
 8007c12:	4659      	mov	r1, fp
 8007c14:	2200      	movs	r2, #0
 8007c16:	f7f8 fcf7 	bl	8000608 <__aeabi_dmul>
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	4303      	orrs	r3, r0
 8007c1e:	bf08      	it	eq
 8007c20:	2322      	moveq	r3, #34	; 0x22
 8007c22:	4682      	mov	sl, r0
 8007c24:	468b      	mov	fp, r1
 8007c26:	bf08      	it	eq
 8007c28:	6023      	streq	r3, [r4, #0]
 8007c2a:	e62b      	b.n	8007884 <_strtod_l+0x4a4>
 8007c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c30:	fa02 f303 	lsl.w	r3, r2, r3
 8007c34:	ea03 0a0a 	and.w	sl, r3, sl
 8007c38:	e6e3      	b.n	8007a02 <_strtod_l+0x622>
 8007c3a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007c3e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007c42:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007c46:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007c4a:	fa01 f308 	lsl.w	r3, r1, r8
 8007c4e:	9308      	str	r3, [sp, #32]
 8007c50:	910d      	str	r1, [sp, #52]	; 0x34
 8007c52:	e746      	b.n	8007ae2 <_strtod_l+0x702>
 8007c54:	2300      	movs	r3, #0
 8007c56:	9308      	str	r3, [sp, #32]
 8007c58:	2301      	movs	r3, #1
 8007c5a:	930d      	str	r3, [sp, #52]	; 0x34
 8007c5c:	e741      	b.n	8007ae2 <_strtod_l+0x702>
 8007c5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c60:	4642      	mov	r2, r8
 8007c62:	4620      	mov	r0, r4
 8007c64:	f001 febe 	bl	80099e4 <__lshift>
 8007c68:	9018      	str	r0, [sp, #96]	; 0x60
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	f47f af6b 	bne.w	8007b46 <_strtod_l+0x766>
 8007c70:	e5fe      	b.n	8007870 <_strtod_l+0x490>
 8007c72:	465f      	mov	r7, fp
 8007c74:	d16e      	bne.n	8007d54 <_strtod_l+0x974>
 8007c76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c7c:	b342      	cbz	r2, 8007cd0 <_strtod_l+0x8f0>
 8007c7e:	4a32      	ldr	r2, [pc, #200]	; (8007d48 <_strtod_l+0x968>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d128      	bne.n	8007cd6 <_strtod_l+0x8f6>
 8007c84:	9b04      	ldr	r3, [sp, #16]
 8007c86:	4651      	mov	r1, sl
 8007c88:	b1eb      	cbz	r3, 8007cc6 <_strtod_l+0x8e6>
 8007c8a:	4b2d      	ldr	r3, [pc, #180]	; (8007d40 <_strtod_l+0x960>)
 8007c8c:	403b      	ands	r3, r7
 8007c8e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c92:	f04f 32ff 	mov.w	r2, #4294967295
 8007c96:	d819      	bhi.n	8007ccc <_strtod_l+0x8ec>
 8007c98:	0d1b      	lsrs	r3, r3, #20
 8007c9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca2:	4299      	cmp	r1, r3
 8007ca4:	d117      	bne.n	8007cd6 <_strtod_l+0x8f6>
 8007ca6:	4b29      	ldr	r3, [pc, #164]	; (8007d4c <_strtod_l+0x96c>)
 8007ca8:	429f      	cmp	r7, r3
 8007caa:	d102      	bne.n	8007cb2 <_strtod_l+0x8d2>
 8007cac:	3101      	adds	r1, #1
 8007cae:	f43f addf 	beq.w	8007870 <_strtod_l+0x490>
 8007cb2:	4b23      	ldr	r3, [pc, #140]	; (8007d40 <_strtod_l+0x960>)
 8007cb4:	403b      	ands	r3, r7
 8007cb6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007cba:	f04f 0a00 	mov.w	sl, #0
 8007cbe:	9b04      	ldr	r3, [sp, #16]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1a4      	bne.n	8007c0e <_strtod_l+0x82e>
 8007cc4:	e5de      	b.n	8007884 <_strtod_l+0x4a4>
 8007cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cca:	e7ea      	b.n	8007ca2 <_strtod_l+0x8c2>
 8007ccc:	4613      	mov	r3, r2
 8007cce:	e7e8      	b.n	8007ca2 <_strtod_l+0x8c2>
 8007cd0:	ea53 030a 	orrs.w	r3, r3, sl
 8007cd4:	d08c      	beq.n	8007bf0 <_strtod_l+0x810>
 8007cd6:	9b08      	ldr	r3, [sp, #32]
 8007cd8:	b1db      	cbz	r3, 8007d12 <_strtod_l+0x932>
 8007cda:	423b      	tst	r3, r7
 8007cdc:	d0ef      	beq.n	8007cbe <_strtod_l+0x8de>
 8007cde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ce0:	9a04      	ldr	r2, [sp, #16]
 8007ce2:	4650      	mov	r0, sl
 8007ce4:	4659      	mov	r1, fp
 8007ce6:	b1c3      	cbz	r3, 8007d1a <_strtod_l+0x93a>
 8007ce8:	f7ff fb5c 	bl	80073a4 <sulp>
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	ec51 0b18 	vmov	r0, r1, d8
 8007cf4:	f7f8 fad2 	bl	800029c <__adddf3>
 8007cf8:	4682      	mov	sl, r0
 8007cfa:	468b      	mov	fp, r1
 8007cfc:	e7df      	b.n	8007cbe <_strtod_l+0x8de>
 8007cfe:	4013      	ands	r3, r2
 8007d00:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007d04:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007d08:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007d0c:	f04f 3aff 	mov.w	sl, #4294967295
 8007d10:	e7d5      	b.n	8007cbe <_strtod_l+0x8de>
 8007d12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d14:	ea13 0f0a 	tst.w	r3, sl
 8007d18:	e7e0      	b.n	8007cdc <_strtod_l+0x8fc>
 8007d1a:	f7ff fb43 	bl	80073a4 <sulp>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	ec51 0b18 	vmov	r0, r1, d8
 8007d26:	f7f8 fab7 	bl	8000298 <__aeabi_dsub>
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	4682      	mov	sl, r0
 8007d30:	468b      	mov	fp, r1
 8007d32:	f7f8 fed1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d36:	2800      	cmp	r0, #0
 8007d38:	d0c1      	beq.n	8007cbe <_strtod_l+0x8de>
 8007d3a:	e611      	b.n	8007960 <_strtod_l+0x580>
 8007d3c:	fffffc02 	.word	0xfffffc02
 8007d40:	7ff00000 	.word	0x7ff00000
 8007d44:	39500000 	.word	0x39500000
 8007d48:	000fffff 	.word	0x000fffff
 8007d4c:	7fefffff 	.word	0x7fefffff
 8007d50:	0800b818 	.word	0x0800b818
 8007d54:	4631      	mov	r1, r6
 8007d56:	4628      	mov	r0, r5
 8007d58:	f002 f832 	bl	8009dc0 <__ratio>
 8007d5c:	ec59 8b10 	vmov	r8, r9, d0
 8007d60:	ee10 0a10 	vmov	r0, s0
 8007d64:	2200      	movs	r2, #0
 8007d66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d6a:	4649      	mov	r1, r9
 8007d6c:	f7f8 fec8 	bl	8000b00 <__aeabi_dcmple>
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d07a      	beq.n	8007e6a <_strtod_l+0xa8a>
 8007d74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d04a      	beq.n	8007e10 <_strtod_l+0xa30>
 8007d7a:	4b95      	ldr	r3, [pc, #596]	; (8007fd0 <_strtod_l+0xbf0>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007d82:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007fd0 <_strtod_l+0xbf0>
 8007d86:	f04f 0800 	mov.w	r8, #0
 8007d8a:	4b92      	ldr	r3, [pc, #584]	; (8007fd4 <_strtod_l+0xbf4>)
 8007d8c:	403b      	ands	r3, r7
 8007d8e:	930d      	str	r3, [sp, #52]	; 0x34
 8007d90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d92:	4b91      	ldr	r3, [pc, #580]	; (8007fd8 <_strtod_l+0xbf8>)
 8007d94:	429a      	cmp	r2, r3
 8007d96:	f040 80b0 	bne.w	8007efa <_strtod_l+0xb1a>
 8007d9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007d9e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007da2:	ec4b ab10 	vmov	d0, sl, fp
 8007da6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007daa:	f001 ff31 	bl	8009c10 <__ulp>
 8007dae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007db2:	ec53 2b10 	vmov	r2, r3, d0
 8007db6:	f7f8 fc27 	bl	8000608 <__aeabi_dmul>
 8007dba:	4652      	mov	r2, sl
 8007dbc:	465b      	mov	r3, fp
 8007dbe:	f7f8 fa6d 	bl	800029c <__adddf3>
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4983      	ldr	r1, [pc, #524]	; (8007fd4 <_strtod_l+0xbf4>)
 8007dc6:	4a85      	ldr	r2, [pc, #532]	; (8007fdc <_strtod_l+0xbfc>)
 8007dc8:	4019      	ands	r1, r3
 8007dca:	4291      	cmp	r1, r2
 8007dcc:	4682      	mov	sl, r0
 8007dce:	d960      	bls.n	8007e92 <_strtod_l+0xab2>
 8007dd0:	ee18 3a90 	vmov	r3, s17
 8007dd4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d104      	bne.n	8007de6 <_strtod_l+0xa06>
 8007ddc:	ee18 3a10 	vmov	r3, s16
 8007de0:	3301      	adds	r3, #1
 8007de2:	f43f ad45 	beq.w	8007870 <_strtod_l+0x490>
 8007de6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007fe8 <_strtod_l+0xc08>
 8007dea:	f04f 3aff 	mov.w	sl, #4294967295
 8007dee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007df0:	4620      	mov	r0, r4
 8007df2:	f001 fbdb 	bl	80095ac <_Bfree>
 8007df6:	9905      	ldr	r1, [sp, #20]
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f001 fbd7 	bl	80095ac <_Bfree>
 8007dfe:	4631      	mov	r1, r6
 8007e00:	4620      	mov	r0, r4
 8007e02:	f001 fbd3 	bl	80095ac <_Bfree>
 8007e06:	4629      	mov	r1, r5
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f001 fbcf 	bl	80095ac <_Bfree>
 8007e0e:	e61a      	b.n	8007a46 <_strtod_l+0x666>
 8007e10:	f1ba 0f00 	cmp.w	sl, #0
 8007e14:	d11b      	bne.n	8007e4e <_strtod_l+0xa6e>
 8007e16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e1a:	b9f3      	cbnz	r3, 8007e5a <_strtod_l+0xa7a>
 8007e1c:	4b6c      	ldr	r3, [pc, #432]	; (8007fd0 <_strtod_l+0xbf0>)
 8007e1e:	2200      	movs	r2, #0
 8007e20:	4640      	mov	r0, r8
 8007e22:	4649      	mov	r1, r9
 8007e24:	f7f8 fe62 	bl	8000aec <__aeabi_dcmplt>
 8007e28:	b9d0      	cbnz	r0, 8007e60 <_strtod_l+0xa80>
 8007e2a:	4640      	mov	r0, r8
 8007e2c:	4649      	mov	r1, r9
 8007e2e:	4b6c      	ldr	r3, [pc, #432]	; (8007fe0 <_strtod_l+0xc00>)
 8007e30:	2200      	movs	r2, #0
 8007e32:	f7f8 fbe9 	bl	8000608 <__aeabi_dmul>
 8007e36:	4680      	mov	r8, r0
 8007e38:	4689      	mov	r9, r1
 8007e3a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007e3e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007e42:	9315      	str	r3, [sp, #84]	; 0x54
 8007e44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007e48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007e4c:	e79d      	b.n	8007d8a <_strtod_l+0x9aa>
 8007e4e:	f1ba 0f01 	cmp.w	sl, #1
 8007e52:	d102      	bne.n	8007e5a <_strtod_l+0xa7a>
 8007e54:	2f00      	cmp	r7, #0
 8007e56:	f43f ad83 	beq.w	8007960 <_strtod_l+0x580>
 8007e5a:	4b62      	ldr	r3, [pc, #392]	; (8007fe4 <_strtod_l+0xc04>)
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	e78e      	b.n	8007d7e <_strtod_l+0x99e>
 8007e60:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007fe0 <_strtod_l+0xc00>
 8007e64:	f04f 0800 	mov.w	r8, #0
 8007e68:	e7e7      	b.n	8007e3a <_strtod_l+0xa5a>
 8007e6a:	4b5d      	ldr	r3, [pc, #372]	; (8007fe0 <_strtod_l+0xc00>)
 8007e6c:	4640      	mov	r0, r8
 8007e6e:	4649      	mov	r1, r9
 8007e70:	2200      	movs	r2, #0
 8007e72:	f7f8 fbc9 	bl	8000608 <__aeabi_dmul>
 8007e76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e78:	4680      	mov	r8, r0
 8007e7a:	4689      	mov	r9, r1
 8007e7c:	b933      	cbnz	r3, 8007e8c <_strtod_l+0xaac>
 8007e7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e82:	900e      	str	r0, [sp, #56]	; 0x38
 8007e84:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e86:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007e8a:	e7dd      	b.n	8007e48 <_strtod_l+0xa68>
 8007e8c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007e90:	e7f9      	b.n	8007e86 <_strtod_l+0xaa6>
 8007e92:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007e96:	9b04      	ldr	r3, [sp, #16]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1a8      	bne.n	8007dee <_strtod_l+0xa0e>
 8007e9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ea0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ea2:	0d1b      	lsrs	r3, r3, #20
 8007ea4:	051b      	lsls	r3, r3, #20
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d1a1      	bne.n	8007dee <_strtod_l+0xa0e>
 8007eaa:	4640      	mov	r0, r8
 8007eac:	4649      	mov	r1, r9
 8007eae:	f7f8 ff0b 	bl	8000cc8 <__aeabi_d2lz>
 8007eb2:	f7f8 fb7b 	bl	80005ac <__aeabi_l2d>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	4640      	mov	r0, r8
 8007ebc:	4649      	mov	r1, r9
 8007ebe:	f7f8 f9eb 	bl	8000298 <__aeabi_dsub>
 8007ec2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ec4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ec8:	ea43 030a 	orr.w	r3, r3, sl
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	4680      	mov	r8, r0
 8007ed0:	4689      	mov	r9, r1
 8007ed2:	d055      	beq.n	8007f80 <_strtod_l+0xba0>
 8007ed4:	a336      	add	r3, pc, #216	; (adr r3, 8007fb0 <_strtod_l+0xbd0>)
 8007ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eda:	f7f8 fe07 	bl	8000aec <__aeabi_dcmplt>
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	f47f acd0 	bne.w	8007884 <_strtod_l+0x4a4>
 8007ee4:	a334      	add	r3, pc, #208	; (adr r3, 8007fb8 <_strtod_l+0xbd8>)
 8007ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eea:	4640      	mov	r0, r8
 8007eec:	4649      	mov	r1, r9
 8007eee:	f7f8 fe1b 	bl	8000b28 <__aeabi_dcmpgt>
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	f43f af7b 	beq.w	8007dee <_strtod_l+0xa0e>
 8007ef8:	e4c4      	b.n	8007884 <_strtod_l+0x4a4>
 8007efa:	9b04      	ldr	r3, [sp, #16]
 8007efc:	b333      	cbz	r3, 8007f4c <_strtod_l+0xb6c>
 8007efe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f00:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007f04:	d822      	bhi.n	8007f4c <_strtod_l+0xb6c>
 8007f06:	a32e      	add	r3, pc, #184	; (adr r3, 8007fc0 <_strtod_l+0xbe0>)
 8007f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0c:	4640      	mov	r0, r8
 8007f0e:	4649      	mov	r1, r9
 8007f10:	f7f8 fdf6 	bl	8000b00 <__aeabi_dcmple>
 8007f14:	b1a0      	cbz	r0, 8007f40 <_strtod_l+0xb60>
 8007f16:	4649      	mov	r1, r9
 8007f18:	4640      	mov	r0, r8
 8007f1a:	f7f8 fe4d 	bl	8000bb8 <__aeabi_d2uiz>
 8007f1e:	2801      	cmp	r0, #1
 8007f20:	bf38      	it	cc
 8007f22:	2001      	movcc	r0, #1
 8007f24:	f7f8 faf6 	bl	8000514 <__aeabi_ui2d>
 8007f28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f2a:	4680      	mov	r8, r0
 8007f2c:	4689      	mov	r9, r1
 8007f2e:	bb23      	cbnz	r3, 8007f7a <_strtod_l+0xb9a>
 8007f30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f34:	9010      	str	r0, [sp, #64]	; 0x40
 8007f36:	9311      	str	r3, [sp, #68]	; 0x44
 8007f38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007f3c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f44:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007f48:	1a9b      	subs	r3, r3, r2
 8007f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007f50:	eeb0 0a48 	vmov.f32	s0, s16
 8007f54:	eef0 0a68 	vmov.f32	s1, s17
 8007f58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007f5c:	f001 fe58 	bl	8009c10 <__ulp>
 8007f60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007f64:	ec53 2b10 	vmov	r2, r3, d0
 8007f68:	f7f8 fb4e 	bl	8000608 <__aeabi_dmul>
 8007f6c:	ec53 2b18 	vmov	r2, r3, d8
 8007f70:	f7f8 f994 	bl	800029c <__adddf3>
 8007f74:	4682      	mov	sl, r0
 8007f76:	468b      	mov	fp, r1
 8007f78:	e78d      	b.n	8007e96 <_strtod_l+0xab6>
 8007f7a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007f7e:	e7db      	b.n	8007f38 <_strtod_l+0xb58>
 8007f80:	a311      	add	r3, pc, #68	; (adr r3, 8007fc8 <_strtod_l+0xbe8>)
 8007f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f86:	f7f8 fdb1 	bl	8000aec <__aeabi_dcmplt>
 8007f8a:	e7b2      	b.n	8007ef2 <_strtod_l+0xb12>
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	930a      	str	r3, [sp, #40]	; 0x28
 8007f90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f94:	6013      	str	r3, [r2, #0]
 8007f96:	f7ff ba6b 	b.w	8007470 <_strtod_l+0x90>
 8007f9a:	2a65      	cmp	r2, #101	; 0x65
 8007f9c:	f43f ab5f 	beq.w	800765e <_strtod_l+0x27e>
 8007fa0:	2a45      	cmp	r2, #69	; 0x45
 8007fa2:	f43f ab5c 	beq.w	800765e <_strtod_l+0x27e>
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	f7ff bb94 	b.w	80076d4 <_strtod_l+0x2f4>
 8007fac:	f3af 8000 	nop.w
 8007fb0:	94a03595 	.word	0x94a03595
 8007fb4:	3fdfffff 	.word	0x3fdfffff
 8007fb8:	35afe535 	.word	0x35afe535
 8007fbc:	3fe00000 	.word	0x3fe00000
 8007fc0:	ffc00000 	.word	0xffc00000
 8007fc4:	41dfffff 	.word	0x41dfffff
 8007fc8:	94a03595 	.word	0x94a03595
 8007fcc:	3fcfffff 	.word	0x3fcfffff
 8007fd0:	3ff00000 	.word	0x3ff00000
 8007fd4:	7ff00000 	.word	0x7ff00000
 8007fd8:	7fe00000 	.word	0x7fe00000
 8007fdc:	7c9fffff 	.word	0x7c9fffff
 8007fe0:	3fe00000 	.word	0x3fe00000
 8007fe4:	bff00000 	.word	0xbff00000
 8007fe8:	7fefffff 	.word	0x7fefffff

08007fec <_strtod_r>:
 8007fec:	4b01      	ldr	r3, [pc, #4]	; (8007ff4 <_strtod_r+0x8>)
 8007fee:	f7ff b9f7 	b.w	80073e0 <_strtod_l>
 8007ff2:	bf00      	nop
 8007ff4:	2000011c 	.word	0x2000011c

08007ff8 <_strtol_l.constprop.0>:
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ffe:	d001      	beq.n	8008004 <_strtol_l.constprop.0+0xc>
 8008000:	2b24      	cmp	r3, #36	; 0x24
 8008002:	d906      	bls.n	8008012 <_strtol_l.constprop.0+0x1a>
 8008004:	f7fe fafc 	bl	8006600 <__errno>
 8008008:	2316      	movs	r3, #22
 800800a:	6003      	str	r3, [r0, #0]
 800800c:	2000      	movs	r0, #0
 800800e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008012:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80080f8 <_strtol_l.constprop.0+0x100>
 8008016:	460d      	mov	r5, r1
 8008018:	462e      	mov	r6, r5
 800801a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800801e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008022:	f017 0708 	ands.w	r7, r7, #8
 8008026:	d1f7      	bne.n	8008018 <_strtol_l.constprop.0+0x20>
 8008028:	2c2d      	cmp	r4, #45	; 0x2d
 800802a:	d132      	bne.n	8008092 <_strtol_l.constprop.0+0x9a>
 800802c:	782c      	ldrb	r4, [r5, #0]
 800802e:	2701      	movs	r7, #1
 8008030:	1cb5      	adds	r5, r6, #2
 8008032:	2b00      	cmp	r3, #0
 8008034:	d05b      	beq.n	80080ee <_strtol_l.constprop.0+0xf6>
 8008036:	2b10      	cmp	r3, #16
 8008038:	d109      	bne.n	800804e <_strtol_l.constprop.0+0x56>
 800803a:	2c30      	cmp	r4, #48	; 0x30
 800803c:	d107      	bne.n	800804e <_strtol_l.constprop.0+0x56>
 800803e:	782c      	ldrb	r4, [r5, #0]
 8008040:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008044:	2c58      	cmp	r4, #88	; 0x58
 8008046:	d14d      	bne.n	80080e4 <_strtol_l.constprop.0+0xec>
 8008048:	786c      	ldrb	r4, [r5, #1]
 800804a:	2310      	movs	r3, #16
 800804c:	3502      	adds	r5, #2
 800804e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008052:	f108 38ff 	add.w	r8, r8, #4294967295
 8008056:	f04f 0c00 	mov.w	ip, #0
 800805a:	fbb8 f9f3 	udiv	r9, r8, r3
 800805e:	4666      	mov	r6, ip
 8008060:	fb03 8a19 	mls	sl, r3, r9, r8
 8008064:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008068:	f1be 0f09 	cmp.w	lr, #9
 800806c:	d816      	bhi.n	800809c <_strtol_l.constprop.0+0xa4>
 800806e:	4674      	mov	r4, lr
 8008070:	42a3      	cmp	r3, r4
 8008072:	dd24      	ble.n	80080be <_strtol_l.constprop.0+0xc6>
 8008074:	f1bc 0f00 	cmp.w	ip, #0
 8008078:	db1e      	blt.n	80080b8 <_strtol_l.constprop.0+0xc0>
 800807a:	45b1      	cmp	r9, r6
 800807c:	d31c      	bcc.n	80080b8 <_strtol_l.constprop.0+0xc0>
 800807e:	d101      	bne.n	8008084 <_strtol_l.constprop.0+0x8c>
 8008080:	45a2      	cmp	sl, r4
 8008082:	db19      	blt.n	80080b8 <_strtol_l.constprop.0+0xc0>
 8008084:	fb06 4603 	mla	r6, r6, r3, r4
 8008088:	f04f 0c01 	mov.w	ip, #1
 800808c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008090:	e7e8      	b.n	8008064 <_strtol_l.constprop.0+0x6c>
 8008092:	2c2b      	cmp	r4, #43	; 0x2b
 8008094:	bf04      	itt	eq
 8008096:	782c      	ldrbeq	r4, [r5, #0]
 8008098:	1cb5      	addeq	r5, r6, #2
 800809a:	e7ca      	b.n	8008032 <_strtol_l.constprop.0+0x3a>
 800809c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80080a0:	f1be 0f19 	cmp.w	lr, #25
 80080a4:	d801      	bhi.n	80080aa <_strtol_l.constprop.0+0xb2>
 80080a6:	3c37      	subs	r4, #55	; 0x37
 80080a8:	e7e2      	b.n	8008070 <_strtol_l.constprop.0+0x78>
 80080aa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80080ae:	f1be 0f19 	cmp.w	lr, #25
 80080b2:	d804      	bhi.n	80080be <_strtol_l.constprop.0+0xc6>
 80080b4:	3c57      	subs	r4, #87	; 0x57
 80080b6:	e7db      	b.n	8008070 <_strtol_l.constprop.0+0x78>
 80080b8:	f04f 3cff 	mov.w	ip, #4294967295
 80080bc:	e7e6      	b.n	800808c <_strtol_l.constprop.0+0x94>
 80080be:	f1bc 0f00 	cmp.w	ip, #0
 80080c2:	da05      	bge.n	80080d0 <_strtol_l.constprop.0+0xd8>
 80080c4:	2322      	movs	r3, #34	; 0x22
 80080c6:	6003      	str	r3, [r0, #0]
 80080c8:	4646      	mov	r6, r8
 80080ca:	b942      	cbnz	r2, 80080de <_strtol_l.constprop.0+0xe6>
 80080cc:	4630      	mov	r0, r6
 80080ce:	e79e      	b.n	800800e <_strtol_l.constprop.0+0x16>
 80080d0:	b107      	cbz	r7, 80080d4 <_strtol_l.constprop.0+0xdc>
 80080d2:	4276      	negs	r6, r6
 80080d4:	2a00      	cmp	r2, #0
 80080d6:	d0f9      	beq.n	80080cc <_strtol_l.constprop.0+0xd4>
 80080d8:	f1bc 0f00 	cmp.w	ip, #0
 80080dc:	d000      	beq.n	80080e0 <_strtol_l.constprop.0+0xe8>
 80080de:	1e69      	subs	r1, r5, #1
 80080e0:	6011      	str	r1, [r2, #0]
 80080e2:	e7f3      	b.n	80080cc <_strtol_l.constprop.0+0xd4>
 80080e4:	2430      	movs	r4, #48	; 0x30
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1b1      	bne.n	800804e <_strtol_l.constprop.0+0x56>
 80080ea:	2308      	movs	r3, #8
 80080ec:	e7af      	b.n	800804e <_strtol_l.constprop.0+0x56>
 80080ee:	2c30      	cmp	r4, #48	; 0x30
 80080f0:	d0a5      	beq.n	800803e <_strtol_l.constprop.0+0x46>
 80080f2:	230a      	movs	r3, #10
 80080f4:	e7ab      	b.n	800804e <_strtol_l.constprop.0+0x56>
 80080f6:	bf00      	nop
 80080f8:	0800b841 	.word	0x0800b841

080080fc <_strtol_r>:
 80080fc:	f7ff bf7c 	b.w	8007ff8 <_strtol_l.constprop.0>

08008100 <quorem>:
 8008100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008104:	6903      	ldr	r3, [r0, #16]
 8008106:	690c      	ldr	r4, [r1, #16]
 8008108:	42a3      	cmp	r3, r4
 800810a:	4607      	mov	r7, r0
 800810c:	f2c0 8081 	blt.w	8008212 <quorem+0x112>
 8008110:	3c01      	subs	r4, #1
 8008112:	f101 0814 	add.w	r8, r1, #20
 8008116:	f100 0514 	add.w	r5, r0, #20
 800811a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800811e:	9301      	str	r3, [sp, #4]
 8008120:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008124:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008128:	3301      	adds	r3, #1
 800812a:	429a      	cmp	r2, r3
 800812c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008130:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008134:	fbb2 f6f3 	udiv	r6, r2, r3
 8008138:	d331      	bcc.n	800819e <quorem+0x9e>
 800813a:	f04f 0e00 	mov.w	lr, #0
 800813e:	4640      	mov	r0, r8
 8008140:	46ac      	mov	ip, r5
 8008142:	46f2      	mov	sl, lr
 8008144:	f850 2b04 	ldr.w	r2, [r0], #4
 8008148:	b293      	uxth	r3, r2
 800814a:	fb06 e303 	mla	r3, r6, r3, lr
 800814e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008152:	b29b      	uxth	r3, r3
 8008154:	ebaa 0303 	sub.w	r3, sl, r3
 8008158:	f8dc a000 	ldr.w	sl, [ip]
 800815c:	0c12      	lsrs	r2, r2, #16
 800815e:	fa13 f38a 	uxtah	r3, r3, sl
 8008162:	fb06 e202 	mla	r2, r6, r2, lr
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	9b00      	ldr	r3, [sp, #0]
 800816a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800816e:	b292      	uxth	r2, r2
 8008170:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008174:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008178:	f8bd 3000 	ldrh.w	r3, [sp]
 800817c:	4581      	cmp	r9, r0
 800817e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008182:	f84c 3b04 	str.w	r3, [ip], #4
 8008186:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800818a:	d2db      	bcs.n	8008144 <quorem+0x44>
 800818c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008190:	b92b      	cbnz	r3, 800819e <quorem+0x9e>
 8008192:	9b01      	ldr	r3, [sp, #4]
 8008194:	3b04      	subs	r3, #4
 8008196:	429d      	cmp	r5, r3
 8008198:	461a      	mov	r2, r3
 800819a:	d32e      	bcc.n	80081fa <quorem+0xfa>
 800819c:	613c      	str	r4, [r7, #16]
 800819e:	4638      	mov	r0, r7
 80081a0:	f001 fc90 	bl	8009ac4 <__mcmp>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	db24      	blt.n	80081f2 <quorem+0xf2>
 80081a8:	3601      	adds	r6, #1
 80081aa:	4628      	mov	r0, r5
 80081ac:	f04f 0c00 	mov.w	ip, #0
 80081b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80081b4:	f8d0 e000 	ldr.w	lr, [r0]
 80081b8:	b293      	uxth	r3, r2
 80081ba:	ebac 0303 	sub.w	r3, ip, r3
 80081be:	0c12      	lsrs	r2, r2, #16
 80081c0:	fa13 f38e 	uxtah	r3, r3, lr
 80081c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80081c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081d2:	45c1      	cmp	r9, r8
 80081d4:	f840 3b04 	str.w	r3, [r0], #4
 80081d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80081dc:	d2e8      	bcs.n	80081b0 <quorem+0xb0>
 80081de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081e6:	b922      	cbnz	r2, 80081f2 <quorem+0xf2>
 80081e8:	3b04      	subs	r3, #4
 80081ea:	429d      	cmp	r5, r3
 80081ec:	461a      	mov	r2, r3
 80081ee:	d30a      	bcc.n	8008206 <quorem+0x106>
 80081f0:	613c      	str	r4, [r7, #16]
 80081f2:	4630      	mov	r0, r6
 80081f4:	b003      	add	sp, #12
 80081f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081fa:	6812      	ldr	r2, [r2, #0]
 80081fc:	3b04      	subs	r3, #4
 80081fe:	2a00      	cmp	r2, #0
 8008200:	d1cc      	bne.n	800819c <quorem+0x9c>
 8008202:	3c01      	subs	r4, #1
 8008204:	e7c7      	b.n	8008196 <quorem+0x96>
 8008206:	6812      	ldr	r2, [r2, #0]
 8008208:	3b04      	subs	r3, #4
 800820a:	2a00      	cmp	r2, #0
 800820c:	d1f0      	bne.n	80081f0 <quorem+0xf0>
 800820e:	3c01      	subs	r4, #1
 8008210:	e7eb      	b.n	80081ea <quorem+0xea>
 8008212:	2000      	movs	r0, #0
 8008214:	e7ee      	b.n	80081f4 <quorem+0xf4>
	...

08008218 <_dtoa_r>:
 8008218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821c:	ed2d 8b04 	vpush	{d8-d9}
 8008220:	ec57 6b10 	vmov	r6, r7, d0
 8008224:	b093      	sub	sp, #76	; 0x4c
 8008226:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008228:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800822c:	9106      	str	r1, [sp, #24]
 800822e:	ee10 aa10 	vmov	sl, s0
 8008232:	4604      	mov	r4, r0
 8008234:	9209      	str	r2, [sp, #36]	; 0x24
 8008236:	930c      	str	r3, [sp, #48]	; 0x30
 8008238:	46bb      	mov	fp, r7
 800823a:	b975      	cbnz	r5, 800825a <_dtoa_r+0x42>
 800823c:	2010      	movs	r0, #16
 800823e:	f001 f94d 	bl	80094dc <malloc>
 8008242:	4602      	mov	r2, r0
 8008244:	6260      	str	r0, [r4, #36]	; 0x24
 8008246:	b920      	cbnz	r0, 8008252 <_dtoa_r+0x3a>
 8008248:	4ba7      	ldr	r3, [pc, #668]	; (80084e8 <_dtoa_r+0x2d0>)
 800824a:	21ea      	movs	r1, #234	; 0xea
 800824c:	48a7      	ldr	r0, [pc, #668]	; (80084ec <_dtoa_r+0x2d4>)
 800824e:	f002 f8bd 	bl	800a3cc <__assert_func>
 8008252:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008256:	6005      	str	r5, [r0, #0]
 8008258:	60c5      	str	r5, [r0, #12]
 800825a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800825c:	6819      	ldr	r1, [r3, #0]
 800825e:	b151      	cbz	r1, 8008276 <_dtoa_r+0x5e>
 8008260:	685a      	ldr	r2, [r3, #4]
 8008262:	604a      	str	r2, [r1, #4]
 8008264:	2301      	movs	r3, #1
 8008266:	4093      	lsls	r3, r2
 8008268:	608b      	str	r3, [r1, #8]
 800826a:	4620      	mov	r0, r4
 800826c:	f001 f99e 	bl	80095ac <_Bfree>
 8008270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008272:	2200      	movs	r2, #0
 8008274:	601a      	str	r2, [r3, #0]
 8008276:	1e3b      	subs	r3, r7, #0
 8008278:	bfaa      	itet	ge
 800827a:	2300      	movge	r3, #0
 800827c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008280:	f8c8 3000 	strge.w	r3, [r8]
 8008284:	4b9a      	ldr	r3, [pc, #616]	; (80084f0 <_dtoa_r+0x2d8>)
 8008286:	bfbc      	itt	lt
 8008288:	2201      	movlt	r2, #1
 800828a:	f8c8 2000 	strlt.w	r2, [r8]
 800828e:	ea33 030b 	bics.w	r3, r3, fp
 8008292:	d11b      	bne.n	80082cc <_dtoa_r+0xb4>
 8008294:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008296:	f242 730f 	movw	r3, #9999	; 0x270f
 800829a:	6013      	str	r3, [r2, #0]
 800829c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082a0:	4333      	orrs	r3, r6
 80082a2:	f000 8592 	beq.w	8008dca <_dtoa_r+0xbb2>
 80082a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082a8:	b963      	cbnz	r3, 80082c4 <_dtoa_r+0xac>
 80082aa:	4b92      	ldr	r3, [pc, #584]	; (80084f4 <_dtoa_r+0x2dc>)
 80082ac:	e022      	b.n	80082f4 <_dtoa_r+0xdc>
 80082ae:	4b92      	ldr	r3, [pc, #584]	; (80084f8 <_dtoa_r+0x2e0>)
 80082b0:	9301      	str	r3, [sp, #4]
 80082b2:	3308      	adds	r3, #8
 80082b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80082b6:	6013      	str	r3, [r2, #0]
 80082b8:	9801      	ldr	r0, [sp, #4]
 80082ba:	b013      	add	sp, #76	; 0x4c
 80082bc:	ecbd 8b04 	vpop	{d8-d9}
 80082c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c4:	4b8b      	ldr	r3, [pc, #556]	; (80084f4 <_dtoa_r+0x2dc>)
 80082c6:	9301      	str	r3, [sp, #4]
 80082c8:	3303      	adds	r3, #3
 80082ca:	e7f3      	b.n	80082b4 <_dtoa_r+0x9c>
 80082cc:	2200      	movs	r2, #0
 80082ce:	2300      	movs	r3, #0
 80082d0:	4650      	mov	r0, sl
 80082d2:	4659      	mov	r1, fp
 80082d4:	f7f8 fc00 	bl	8000ad8 <__aeabi_dcmpeq>
 80082d8:	ec4b ab19 	vmov	d9, sl, fp
 80082dc:	4680      	mov	r8, r0
 80082de:	b158      	cbz	r0, 80082f8 <_dtoa_r+0xe0>
 80082e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082e2:	2301      	movs	r3, #1
 80082e4:	6013      	str	r3, [r2, #0]
 80082e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f000 856b 	beq.w	8008dc4 <_dtoa_r+0xbac>
 80082ee:	4883      	ldr	r0, [pc, #524]	; (80084fc <_dtoa_r+0x2e4>)
 80082f0:	6018      	str	r0, [r3, #0]
 80082f2:	1e43      	subs	r3, r0, #1
 80082f4:	9301      	str	r3, [sp, #4]
 80082f6:	e7df      	b.n	80082b8 <_dtoa_r+0xa0>
 80082f8:	ec4b ab10 	vmov	d0, sl, fp
 80082fc:	aa10      	add	r2, sp, #64	; 0x40
 80082fe:	a911      	add	r1, sp, #68	; 0x44
 8008300:	4620      	mov	r0, r4
 8008302:	f001 fd01 	bl	8009d08 <__d2b>
 8008306:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800830a:	ee08 0a10 	vmov	s16, r0
 800830e:	2d00      	cmp	r5, #0
 8008310:	f000 8084 	beq.w	800841c <_dtoa_r+0x204>
 8008314:	ee19 3a90 	vmov	r3, s19
 8008318:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800831c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008320:	4656      	mov	r6, sl
 8008322:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008326:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800832a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800832e:	4b74      	ldr	r3, [pc, #464]	; (8008500 <_dtoa_r+0x2e8>)
 8008330:	2200      	movs	r2, #0
 8008332:	4630      	mov	r0, r6
 8008334:	4639      	mov	r1, r7
 8008336:	f7f7 ffaf 	bl	8000298 <__aeabi_dsub>
 800833a:	a365      	add	r3, pc, #404	; (adr r3, 80084d0 <_dtoa_r+0x2b8>)
 800833c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008340:	f7f8 f962 	bl	8000608 <__aeabi_dmul>
 8008344:	a364      	add	r3, pc, #400	; (adr r3, 80084d8 <_dtoa_r+0x2c0>)
 8008346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834a:	f7f7 ffa7 	bl	800029c <__adddf3>
 800834e:	4606      	mov	r6, r0
 8008350:	4628      	mov	r0, r5
 8008352:	460f      	mov	r7, r1
 8008354:	f7f8 f8ee 	bl	8000534 <__aeabi_i2d>
 8008358:	a361      	add	r3, pc, #388	; (adr r3, 80084e0 <_dtoa_r+0x2c8>)
 800835a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835e:	f7f8 f953 	bl	8000608 <__aeabi_dmul>
 8008362:	4602      	mov	r2, r0
 8008364:	460b      	mov	r3, r1
 8008366:	4630      	mov	r0, r6
 8008368:	4639      	mov	r1, r7
 800836a:	f7f7 ff97 	bl	800029c <__adddf3>
 800836e:	4606      	mov	r6, r0
 8008370:	460f      	mov	r7, r1
 8008372:	f7f8 fbf9 	bl	8000b68 <__aeabi_d2iz>
 8008376:	2200      	movs	r2, #0
 8008378:	9000      	str	r0, [sp, #0]
 800837a:	2300      	movs	r3, #0
 800837c:	4630      	mov	r0, r6
 800837e:	4639      	mov	r1, r7
 8008380:	f7f8 fbb4 	bl	8000aec <__aeabi_dcmplt>
 8008384:	b150      	cbz	r0, 800839c <_dtoa_r+0x184>
 8008386:	9800      	ldr	r0, [sp, #0]
 8008388:	f7f8 f8d4 	bl	8000534 <__aeabi_i2d>
 800838c:	4632      	mov	r2, r6
 800838e:	463b      	mov	r3, r7
 8008390:	f7f8 fba2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008394:	b910      	cbnz	r0, 800839c <_dtoa_r+0x184>
 8008396:	9b00      	ldr	r3, [sp, #0]
 8008398:	3b01      	subs	r3, #1
 800839a:	9300      	str	r3, [sp, #0]
 800839c:	9b00      	ldr	r3, [sp, #0]
 800839e:	2b16      	cmp	r3, #22
 80083a0:	d85a      	bhi.n	8008458 <_dtoa_r+0x240>
 80083a2:	9a00      	ldr	r2, [sp, #0]
 80083a4:	4b57      	ldr	r3, [pc, #348]	; (8008504 <_dtoa_r+0x2ec>)
 80083a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ae:	ec51 0b19 	vmov	r0, r1, d9
 80083b2:	f7f8 fb9b 	bl	8000aec <__aeabi_dcmplt>
 80083b6:	2800      	cmp	r0, #0
 80083b8:	d050      	beq.n	800845c <_dtoa_r+0x244>
 80083ba:	9b00      	ldr	r3, [sp, #0]
 80083bc:	3b01      	subs	r3, #1
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	2300      	movs	r3, #0
 80083c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80083c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083c6:	1b5d      	subs	r5, r3, r5
 80083c8:	1e6b      	subs	r3, r5, #1
 80083ca:	9305      	str	r3, [sp, #20]
 80083cc:	bf45      	ittet	mi
 80083ce:	f1c5 0301 	rsbmi	r3, r5, #1
 80083d2:	9304      	strmi	r3, [sp, #16]
 80083d4:	2300      	movpl	r3, #0
 80083d6:	2300      	movmi	r3, #0
 80083d8:	bf4c      	ite	mi
 80083da:	9305      	strmi	r3, [sp, #20]
 80083dc:	9304      	strpl	r3, [sp, #16]
 80083de:	9b00      	ldr	r3, [sp, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	db3d      	blt.n	8008460 <_dtoa_r+0x248>
 80083e4:	9b05      	ldr	r3, [sp, #20]
 80083e6:	9a00      	ldr	r2, [sp, #0]
 80083e8:	920a      	str	r2, [sp, #40]	; 0x28
 80083ea:	4413      	add	r3, r2
 80083ec:	9305      	str	r3, [sp, #20]
 80083ee:	2300      	movs	r3, #0
 80083f0:	9307      	str	r3, [sp, #28]
 80083f2:	9b06      	ldr	r3, [sp, #24]
 80083f4:	2b09      	cmp	r3, #9
 80083f6:	f200 8089 	bhi.w	800850c <_dtoa_r+0x2f4>
 80083fa:	2b05      	cmp	r3, #5
 80083fc:	bfc4      	itt	gt
 80083fe:	3b04      	subgt	r3, #4
 8008400:	9306      	strgt	r3, [sp, #24]
 8008402:	9b06      	ldr	r3, [sp, #24]
 8008404:	f1a3 0302 	sub.w	r3, r3, #2
 8008408:	bfcc      	ite	gt
 800840a:	2500      	movgt	r5, #0
 800840c:	2501      	movle	r5, #1
 800840e:	2b03      	cmp	r3, #3
 8008410:	f200 8087 	bhi.w	8008522 <_dtoa_r+0x30a>
 8008414:	e8df f003 	tbb	[pc, r3]
 8008418:	59383a2d 	.word	0x59383a2d
 800841c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008420:	441d      	add	r5, r3
 8008422:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008426:	2b20      	cmp	r3, #32
 8008428:	bfc1      	itttt	gt
 800842a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800842e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008432:	fa0b f303 	lslgt.w	r3, fp, r3
 8008436:	fa26 f000 	lsrgt.w	r0, r6, r0
 800843a:	bfda      	itte	le
 800843c:	f1c3 0320 	rsble	r3, r3, #32
 8008440:	fa06 f003 	lslle.w	r0, r6, r3
 8008444:	4318      	orrgt	r0, r3
 8008446:	f7f8 f865 	bl	8000514 <__aeabi_ui2d>
 800844a:	2301      	movs	r3, #1
 800844c:	4606      	mov	r6, r0
 800844e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008452:	3d01      	subs	r5, #1
 8008454:	930e      	str	r3, [sp, #56]	; 0x38
 8008456:	e76a      	b.n	800832e <_dtoa_r+0x116>
 8008458:	2301      	movs	r3, #1
 800845a:	e7b2      	b.n	80083c2 <_dtoa_r+0x1aa>
 800845c:	900b      	str	r0, [sp, #44]	; 0x2c
 800845e:	e7b1      	b.n	80083c4 <_dtoa_r+0x1ac>
 8008460:	9b04      	ldr	r3, [sp, #16]
 8008462:	9a00      	ldr	r2, [sp, #0]
 8008464:	1a9b      	subs	r3, r3, r2
 8008466:	9304      	str	r3, [sp, #16]
 8008468:	4253      	negs	r3, r2
 800846a:	9307      	str	r3, [sp, #28]
 800846c:	2300      	movs	r3, #0
 800846e:	930a      	str	r3, [sp, #40]	; 0x28
 8008470:	e7bf      	b.n	80083f2 <_dtoa_r+0x1da>
 8008472:	2300      	movs	r3, #0
 8008474:	9308      	str	r3, [sp, #32]
 8008476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008478:	2b00      	cmp	r3, #0
 800847a:	dc55      	bgt.n	8008528 <_dtoa_r+0x310>
 800847c:	2301      	movs	r3, #1
 800847e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008482:	461a      	mov	r2, r3
 8008484:	9209      	str	r2, [sp, #36]	; 0x24
 8008486:	e00c      	b.n	80084a2 <_dtoa_r+0x28a>
 8008488:	2301      	movs	r3, #1
 800848a:	e7f3      	b.n	8008474 <_dtoa_r+0x25c>
 800848c:	2300      	movs	r3, #0
 800848e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008490:	9308      	str	r3, [sp, #32]
 8008492:	9b00      	ldr	r3, [sp, #0]
 8008494:	4413      	add	r3, r2
 8008496:	9302      	str	r3, [sp, #8]
 8008498:	3301      	adds	r3, #1
 800849a:	2b01      	cmp	r3, #1
 800849c:	9303      	str	r3, [sp, #12]
 800849e:	bfb8      	it	lt
 80084a0:	2301      	movlt	r3, #1
 80084a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80084a4:	2200      	movs	r2, #0
 80084a6:	6042      	str	r2, [r0, #4]
 80084a8:	2204      	movs	r2, #4
 80084aa:	f102 0614 	add.w	r6, r2, #20
 80084ae:	429e      	cmp	r6, r3
 80084b0:	6841      	ldr	r1, [r0, #4]
 80084b2:	d93d      	bls.n	8008530 <_dtoa_r+0x318>
 80084b4:	4620      	mov	r0, r4
 80084b6:	f001 f839 	bl	800952c <_Balloc>
 80084ba:	9001      	str	r0, [sp, #4]
 80084bc:	2800      	cmp	r0, #0
 80084be:	d13b      	bne.n	8008538 <_dtoa_r+0x320>
 80084c0:	4b11      	ldr	r3, [pc, #68]	; (8008508 <_dtoa_r+0x2f0>)
 80084c2:	4602      	mov	r2, r0
 80084c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80084c8:	e6c0      	b.n	800824c <_dtoa_r+0x34>
 80084ca:	2301      	movs	r3, #1
 80084cc:	e7df      	b.n	800848e <_dtoa_r+0x276>
 80084ce:	bf00      	nop
 80084d0:	636f4361 	.word	0x636f4361
 80084d4:	3fd287a7 	.word	0x3fd287a7
 80084d8:	8b60c8b3 	.word	0x8b60c8b3
 80084dc:	3fc68a28 	.word	0x3fc68a28
 80084e0:	509f79fb 	.word	0x509f79fb
 80084e4:	3fd34413 	.word	0x3fd34413
 80084e8:	0800b94e 	.word	0x0800b94e
 80084ec:	0800b965 	.word	0x0800b965
 80084f0:	7ff00000 	.word	0x7ff00000
 80084f4:	0800b94a 	.word	0x0800b94a
 80084f8:	0800b941 	.word	0x0800b941
 80084fc:	0800b7c1 	.word	0x0800b7c1
 8008500:	3ff80000 	.word	0x3ff80000
 8008504:	0800bad0 	.word	0x0800bad0
 8008508:	0800b9c0 	.word	0x0800b9c0
 800850c:	2501      	movs	r5, #1
 800850e:	2300      	movs	r3, #0
 8008510:	9306      	str	r3, [sp, #24]
 8008512:	9508      	str	r5, [sp, #32]
 8008514:	f04f 33ff 	mov.w	r3, #4294967295
 8008518:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800851c:	2200      	movs	r2, #0
 800851e:	2312      	movs	r3, #18
 8008520:	e7b0      	b.n	8008484 <_dtoa_r+0x26c>
 8008522:	2301      	movs	r3, #1
 8008524:	9308      	str	r3, [sp, #32]
 8008526:	e7f5      	b.n	8008514 <_dtoa_r+0x2fc>
 8008528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800852a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800852e:	e7b8      	b.n	80084a2 <_dtoa_r+0x28a>
 8008530:	3101      	adds	r1, #1
 8008532:	6041      	str	r1, [r0, #4]
 8008534:	0052      	lsls	r2, r2, #1
 8008536:	e7b8      	b.n	80084aa <_dtoa_r+0x292>
 8008538:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800853a:	9a01      	ldr	r2, [sp, #4]
 800853c:	601a      	str	r2, [r3, #0]
 800853e:	9b03      	ldr	r3, [sp, #12]
 8008540:	2b0e      	cmp	r3, #14
 8008542:	f200 809d 	bhi.w	8008680 <_dtoa_r+0x468>
 8008546:	2d00      	cmp	r5, #0
 8008548:	f000 809a 	beq.w	8008680 <_dtoa_r+0x468>
 800854c:	9b00      	ldr	r3, [sp, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	dd32      	ble.n	80085b8 <_dtoa_r+0x3a0>
 8008552:	4ab7      	ldr	r2, [pc, #732]	; (8008830 <_dtoa_r+0x618>)
 8008554:	f003 030f 	and.w	r3, r3, #15
 8008558:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800855c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008560:	9b00      	ldr	r3, [sp, #0]
 8008562:	05d8      	lsls	r0, r3, #23
 8008564:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008568:	d516      	bpl.n	8008598 <_dtoa_r+0x380>
 800856a:	4bb2      	ldr	r3, [pc, #712]	; (8008834 <_dtoa_r+0x61c>)
 800856c:	ec51 0b19 	vmov	r0, r1, d9
 8008570:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008574:	f7f8 f972 	bl	800085c <__aeabi_ddiv>
 8008578:	f007 070f 	and.w	r7, r7, #15
 800857c:	4682      	mov	sl, r0
 800857e:	468b      	mov	fp, r1
 8008580:	2503      	movs	r5, #3
 8008582:	4eac      	ldr	r6, [pc, #688]	; (8008834 <_dtoa_r+0x61c>)
 8008584:	b957      	cbnz	r7, 800859c <_dtoa_r+0x384>
 8008586:	4642      	mov	r2, r8
 8008588:	464b      	mov	r3, r9
 800858a:	4650      	mov	r0, sl
 800858c:	4659      	mov	r1, fp
 800858e:	f7f8 f965 	bl	800085c <__aeabi_ddiv>
 8008592:	4682      	mov	sl, r0
 8008594:	468b      	mov	fp, r1
 8008596:	e028      	b.n	80085ea <_dtoa_r+0x3d2>
 8008598:	2502      	movs	r5, #2
 800859a:	e7f2      	b.n	8008582 <_dtoa_r+0x36a>
 800859c:	07f9      	lsls	r1, r7, #31
 800859e:	d508      	bpl.n	80085b2 <_dtoa_r+0x39a>
 80085a0:	4640      	mov	r0, r8
 80085a2:	4649      	mov	r1, r9
 80085a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80085a8:	f7f8 f82e 	bl	8000608 <__aeabi_dmul>
 80085ac:	3501      	adds	r5, #1
 80085ae:	4680      	mov	r8, r0
 80085b0:	4689      	mov	r9, r1
 80085b2:	107f      	asrs	r7, r7, #1
 80085b4:	3608      	adds	r6, #8
 80085b6:	e7e5      	b.n	8008584 <_dtoa_r+0x36c>
 80085b8:	f000 809b 	beq.w	80086f2 <_dtoa_r+0x4da>
 80085bc:	9b00      	ldr	r3, [sp, #0]
 80085be:	4f9d      	ldr	r7, [pc, #628]	; (8008834 <_dtoa_r+0x61c>)
 80085c0:	425e      	negs	r6, r3
 80085c2:	4b9b      	ldr	r3, [pc, #620]	; (8008830 <_dtoa_r+0x618>)
 80085c4:	f006 020f 	and.w	r2, r6, #15
 80085c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d0:	ec51 0b19 	vmov	r0, r1, d9
 80085d4:	f7f8 f818 	bl	8000608 <__aeabi_dmul>
 80085d8:	1136      	asrs	r6, r6, #4
 80085da:	4682      	mov	sl, r0
 80085dc:	468b      	mov	fp, r1
 80085de:	2300      	movs	r3, #0
 80085e0:	2502      	movs	r5, #2
 80085e2:	2e00      	cmp	r6, #0
 80085e4:	d17a      	bne.n	80086dc <_dtoa_r+0x4c4>
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d1d3      	bne.n	8008592 <_dtoa_r+0x37a>
 80085ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f000 8082 	beq.w	80086f6 <_dtoa_r+0x4de>
 80085f2:	4b91      	ldr	r3, [pc, #580]	; (8008838 <_dtoa_r+0x620>)
 80085f4:	2200      	movs	r2, #0
 80085f6:	4650      	mov	r0, sl
 80085f8:	4659      	mov	r1, fp
 80085fa:	f7f8 fa77 	bl	8000aec <__aeabi_dcmplt>
 80085fe:	2800      	cmp	r0, #0
 8008600:	d079      	beq.n	80086f6 <_dtoa_r+0x4de>
 8008602:	9b03      	ldr	r3, [sp, #12]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d076      	beq.n	80086f6 <_dtoa_r+0x4de>
 8008608:	9b02      	ldr	r3, [sp, #8]
 800860a:	2b00      	cmp	r3, #0
 800860c:	dd36      	ble.n	800867c <_dtoa_r+0x464>
 800860e:	9b00      	ldr	r3, [sp, #0]
 8008610:	4650      	mov	r0, sl
 8008612:	4659      	mov	r1, fp
 8008614:	1e5f      	subs	r7, r3, #1
 8008616:	2200      	movs	r2, #0
 8008618:	4b88      	ldr	r3, [pc, #544]	; (800883c <_dtoa_r+0x624>)
 800861a:	f7f7 fff5 	bl	8000608 <__aeabi_dmul>
 800861e:	9e02      	ldr	r6, [sp, #8]
 8008620:	4682      	mov	sl, r0
 8008622:	468b      	mov	fp, r1
 8008624:	3501      	adds	r5, #1
 8008626:	4628      	mov	r0, r5
 8008628:	f7f7 ff84 	bl	8000534 <__aeabi_i2d>
 800862c:	4652      	mov	r2, sl
 800862e:	465b      	mov	r3, fp
 8008630:	f7f7 ffea 	bl	8000608 <__aeabi_dmul>
 8008634:	4b82      	ldr	r3, [pc, #520]	; (8008840 <_dtoa_r+0x628>)
 8008636:	2200      	movs	r2, #0
 8008638:	f7f7 fe30 	bl	800029c <__adddf3>
 800863c:	46d0      	mov	r8, sl
 800863e:	46d9      	mov	r9, fp
 8008640:	4682      	mov	sl, r0
 8008642:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008646:	2e00      	cmp	r6, #0
 8008648:	d158      	bne.n	80086fc <_dtoa_r+0x4e4>
 800864a:	4b7e      	ldr	r3, [pc, #504]	; (8008844 <_dtoa_r+0x62c>)
 800864c:	2200      	movs	r2, #0
 800864e:	4640      	mov	r0, r8
 8008650:	4649      	mov	r1, r9
 8008652:	f7f7 fe21 	bl	8000298 <__aeabi_dsub>
 8008656:	4652      	mov	r2, sl
 8008658:	465b      	mov	r3, fp
 800865a:	4680      	mov	r8, r0
 800865c:	4689      	mov	r9, r1
 800865e:	f7f8 fa63 	bl	8000b28 <__aeabi_dcmpgt>
 8008662:	2800      	cmp	r0, #0
 8008664:	f040 8295 	bne.w	8008b92 <_dtoa_r+0x97a>
 8008668:	4652      	mov	r2, sl
 800866a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800866e:	4640      	mov	r0, r8
 8008670:	4649      	mov	r1, r9
 8008672:	f7f8 fa3b 	bl	8000aec <__aeabi_dcmplt>
 8008676:	2800      	cmp	r0, #0
 8008678:	f040 8289 	bne.w	8008b8e <_dtoa_r+0x976>
 800867c:	ec5b ab19 	vmov	sl, fp, d9
 8008680:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008682:	2b00      	cmp	r3, #0
 8008684:	f2c0 8148 	blt.w	8008918 <_dtoa_r+0x700>
 8008688:	9a00      	ldr	r2, [sp, #0]
 800868a:	2a0e      	cmp	r2, #14
 800868c:	f300 8144 	bgt.w	8008918 <_dtoa_r+0x700>
 8008690:	4b67      	ldr	r3, [pc, #412]	; (8008830 <_dtoa_r+0x618>)
 8008692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008696:	e9d3 8900 	ldrd	r8, r9, [r3]
 800869a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800869c:	2b00      	cmp	r3, #0
 800869e:	f280 80d5 	bge.w	800884c <_dtoa_r+0x634>
 80086a2:	9b03      	ldr	r3, [sp, #12]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f300 80d1 	bgt.w	800884c <_dtoa_r+0x634>
 80086aa:	f040 826f 	bne.w	8008b8c <_dtoa_r+0x974>
 80086ae:	4b65      	ldr	r3, [pc, #404]	; (8008844 <_dtoa_r+0x62c>)
 80086b0:	2200      	movs	r2, #0
 80086b2:	4640      	mov	r0, r8
 80086b4:	4649      	mov	r1, r9
 80086b6:	f7f7 ffa7 	bl	8000608 <__aeabi_dmul>
 80086ba:	4652      	mov	r2, sl
 80086bc:	465b      	mov	r3, fp
 80086be:	f7f8 fa29 	bl	8000b14 <__aeabi_dcmpge>
 80086c2:	9e03      	ldr	r6, [sp, #12]
 80086c4:	4637      	mov	r7, r6
 80086c6:	2800      	cmp	r0, #0
 80086c8:	f040 8245 	bne.w	8008b56 <_dtoa_r+0x93e>
 80086cc:	9d01      	ldr	r5, [sp, #4]
 80086ce:	2331      	movs	r3, #49	; 0x31
 80086d0:	f805 3b01 	strb.w	r3, [r5], #1
 80086d4:	9b00      	ldr	r3, [sp, #0]
 80086d6:	3301      	adds	r3, #1
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	e240      	b.n	8008b5e <_dtoa_r+0x946>
 80086dc:	07f2      	lsls	r2, r6, #31
 80086de:	d505      	bpl.n	80086ec <_dtoa_r+0x4d4>
 80086e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086e4:	f7f7 ff90 	bl	8000608 <__aeabi_dmul>
 80086e8:	3501      	adds	r5, #1
 80086ea:	2301      	movs	r3, #1
 80086ec:	1076      	asrs	r6, r6, #1
 80086ee:	3708      	adds	r7, #8
 80086f0:	e777      	b.n	80085e2 <_dtoa_r+0x3ca>
 80086f2:	2502      	movs	r5, #2
 80086f4:	e779      	b.n	80085ea <_dtoa_r+0x3d2>
 80086f6:	9f00      	ldr	r7, [sp, #0]
 80086f8:	9e03      	ldr	r6, [sp, #12]
 80086fa:	e794      	b.n	8008626 <_dtoa_r+0x40e>
 80086fc:	9901      	ldr	r1, [sp, #4]
 80086fe:	4b4c      	ldr	r3, [pc, #304]	; (8008830 <_dtoa_r+0x618>)
 8008700:	4431      	add	r1, r6
 8008702:	910d      	str	r1, [sp, #52]	; 0x34
 8008704:	9908      	ldr	r1, [sp, #32]
 8008706:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800870a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800870e:	2900      	cmp	r1, #0
 8008710:	d043      	beq.n	800879a <_dtoa_r+0x582>
 8008712:	494d      	ldr	r1, [pc, #308]	; (8008848 <_dtoa_r+0x630>)
 8008714:	2000      	movs	r0, #0
 8008716:	f7f8 f8a1 	bl	800085c <__aeabi_ddiv>
 800871a:	4652      	mov	r2, sl
 800871c:	465b      	mov	r3, fp
 800871e:	f7f7 fdbb 	bl	8000298 <__aeabi_dsub>
 8008722:	9d01      	ldr	r5, [sp, #4]
 8008724:	4682      	mov	sl, r0
 8008726:	468b      	mov	fp, r1
 8008728:	4649      	mov	r1, r9
 800872a:	4640      	mov	r0, r8
 800872c:	f7f8 fa1c 	bl	8000b68 <__aeabi_d2iz>
 8008730:	4606      	mov	r6, r0
 8008732:	f7f7 feff 	bl	8000534 <__aeabi_i2d>
 8008736:	4602      	mov	r2, r0
 8008738:	460b      	mov	r3, r1
 800873a:	4640      	mov	r0, r8
 800873c:	4649      	mov	r1, r9
 800873e:	f7f7 fdab 	bl	8000298 <__aeabi_dsub>
 8008742:	3630      	adds	r6, #48	; 0x30
 8008744:	f805 6b01 	strb.w	r6, [r5], #1
 8008748:	4652      	mov	r2, sl
 800874a:	465b      	mov	r3, fp
 800874c:	4680      	mov	r8, r0
 800874e:	4689      	mov	r9, r1
 8008750:	f7f8 f9cc 	bl	8000aec <__aeabi_dcmplt>
 8008754:	2800      	cmp	r0, #0
 8008756:	d163      	bne.n	8008820 <_dtoa_r+0x608>
 8008758:	4642      	mov	r2, r8
 800875a:	464b      	mov	r3, r9
 800875c:	4936      	ldr	r1, [pc, #216]	; (8008838 <_dtoa_r+0x620>)
 800875e:	2000      	movs	r0, #0
 8008760:	f7f7 fd9a 	bl	8000298 <__aeabi_dsub>
 8008764:	4652      	mov	r2, sl
 8008766:	465b      	mov	r3, fp
 8008768:	f7f8 f9c0 	bl	8000aec <__aeabi_dcmplt>
 800876c:	2800      	cmp	r0, #0
 800876e:	f040 80b5 	bne.w	80088dc <_dtoa_r+0x6c4>
 8008772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008774:	429d      	cmp	r5, r3
 8008776:	d081      	beq.n	800867c <_dtoa_r+0x464>
 8008778:	4b30      	ldr	r3, [pc, #192]	; (800883c <_dtoa_r+0x624>)
 800877a:	2200      	movs	r2, #0
 800877c:	4650      	mov	r0, sl
 800877e:	4659      	mov	r1, fp
 8008780:	f7f7 ff42 	bl	8000608 <__aeabi_dmul>
 8008784:	4b2d      	ldr	r3, [pc, #180]	; (800883c <_dtoa_r+0x624>)
 8008786:	4682      	mov	sl, r0
 8008788:	468b      	mov	fp, r1
 800878a:	4640      	mov	r0, r8
 800878c:	4649      	mov	r1, r9
 800878e:	2200      	movs	r2, #0
 8008790:	f7f7 ff3a 	bl	8000608 <__aeabi_dmul>
 8008794:	4680      	mov	r8, r0
 8008796:	4689      	mov	r9, r1
 8008798:	e7c6      	b.n	8008728 <_dtoa_r+0x510>
 800879a:	4650      	mov	r0, sl
 800879c:	4659      	mov	r1, fp
 800879e:	f7f7 ff33 	bl	8000608 <__aeabi_dmul>
 80087a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087a4:	9d01      	ldr	r5, [sp, #4]
 80087a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80087a8:	4682      	mov	sl, r0
 80087aa:	468b      	mov	fp, r1
 80087ac:	4649      	mov	r1, r9
 80087ae:	4640      	mov	r0, r8
 80087b0:	f7f8 f9da 	bl	8000b68 <__aeabi_d2iz>
 80087b4:	4606      	mov	r6, r0
 80087b6:	f7f7 febd 	bl	8000534 <__aeabi_i2d>
 80087ba:	3630      	adds	r6, #48	; 0x30
 80087bc:	4602      	mov	r2, r0
 80087be:	460b      	mov	r3, r1
 80087c0:	4640      	mov	r0, r8
 80087c2:	4649      	mov	r1, r9
 80087c4:	f7f7 fd68 	bl	8000298 <__aeabi_dsub>
 80087c8:	f805 6b01 	strb.w	r6, [r5], #1
 80087cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087ce:	429d      	cmp	r5, r3
 80087d0:	4680      	mov	r8, r0
 80087d2:	4689      	mov	r9, r1
 80087d4:	f04f 0200 	mov.w	r2, #0
 80087d8:	d124      	bne.n	8008824 <_dtoa_r+0x60c>
 80087da:	4b1b      	ldr	r3, [pc, #108]	; (8008848 <_dtoa_r+0x630>)
 80087dc:	4650      	mov	r0, sl
 80087de:	4659      	mov	r1, fp
 80087e0:	f7f7 fd5c 	bl	800029c <__adddf3>
 80087e4:	4602      	mov	r2, r0
 80087e6:	460b      	mov	r3, r1
 80087e8:	4640      	mov	r0, r8
 80087ea:	4649      	mov	r1, r9
 80087ec:	f7f8 f99c 	bl	8000b28 <__aeabi_dcmpgt>
 80087f0:	2800      	cmp	r0, #0
 80087f2:	d173      	bne.n	80088dc <_dtoa_r+0x6c4>
 80087f4:	4652      	mov	r2, sl
 80087f6:	465b      	mov	r3, fp
 80087f8:	4913      	ldr	r1, [pc, #76]	; (8008848 <_dtoa_r+0x630>)
 80087fa:	2000      	movs	r0, #0
 80087fc:	f7f7 fd4c 	bl	8000298 <__aeabi_dsub>
 8008800:	4602      	mov	r2, r0
 8008802:	460b      	mov	r3, r1
 8008804:	4640      	mov	r0, r8
 8008806:	4649      	mov	r1, r9
 8008808:	f7f8 f970 	bl	8000aec <__aeabi_dcmplt>
 800880c:	2800      	cmp	r0, #0
 800880e:	f43f af35 	beq.w	800867c <_dtoa_r+0x464>
 8008812:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008814:	1e6b      	subs	r3, r5, #1
 8008816:	930f      	str	r3, [sp, #60]	; 0x3c
 8008818:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800881c:	2b30      	cmp	r3, #48	; 0x30
 800881e:	d0f8      	beq.n	8008812 <_dtoa_r+0x5fa>
 8008820:	9700      	str	r7, [sp, #0]
 8008822:	e049      	b.n	80088b8 <_dtoa_r+0x6a0>
 8008824:	4b05      	ldr	r3, [pc, #20]	; (800883c <_dtoa_r+0x624>)
 8008826:	f7f7 feef 	bl	8000608 <__aeabi_dmul>
 800882a:	4680      	mov	r8, r0
 800882c:	4689      	mov	r9, r1
 800882e:	e7bd      	b.n	80087ac <_dtoa_r+0x594>
 8008830:	0800bad0 	.word	0x0800bad0
 8008834:	0800baa8 	.word	0x0800baa8
 8008838:	3ff00000 	.word	0x3ff00000
 800883c:	40240000 	.word	0x40240000
 8008840:	401c0000 	.word	0x401c0000
 8008844:	40140000 	.word	0x40140000
 8008848:	3fe00000 	.word	0x3fe00000
 800884c:	9d01      	ldr	r5, [sp, #4]
 800884e:	4656      	mov	r6, sl
 8008850:	465f      	mov	r7, fp
 8008852:	4642      	mov	r2, r8
 8008854:	464b      	mov	r3, r9
 8008856:	4630      	mov	r0, r6
 8008858:	4639      	mov	r1, r7
 800885a:	f7f7 ffff 	bl	800085c <__aeabi_ddiv>
 800885e:	f7f8 f983 	bl	8000b68 <__aeabi_d2iz>
 8008862:	4682      	mov	sl, r0
 8008864:	f7f7 fe66 	bl	8000534 <__aeabi_i2d>
 8008868:	4642      	mov	r2, r8
 800886a:	464b      	mov	r3, r9
 800886c:	f7f7 fecc 	bl	8000608 <__aeabi_dmul>
 8008870:	4602      	mov	r2, r0
 8008872:	460b      	mov	r3, r1
 8008874:	4630      	mov	r0, r6
 8008876:	4639      	mov	r1, r7
 8008878:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800887c:	f7f7 fd0c 	bl	8000298 <__aeabi_dsub>
 8008880:	f805 6b01 	strb.w	r6, [r5], #1
 8008884:	9e01      	ldr	r6, [sp, #4]
 8008886:	9f03      	ldr	r7, [sp, #12]
 8008888:	1bae      	subs	r6, r5, r6
 800888a:	42b7      	cmp	r7, r6
 800888c:	4602      	mov	r2, r0
 800888e:	460b      	mov	r3, r1
 8008890:	d135      	bne.n	80088fe <_dtoa_r+0x6e6>
 8008892:	f7f7 fd03 	bl	800029c <__adddf3>
 8008896:	4642      	mov	r2, r8
 8008898:	464b      	mov	r3, r9
 800889a:	4606      	mov	r6, r0
 800889c:	460f      	mov	r7, r1
 800889e:	f7f8 f943 	bl	8000b28 <__aeabi_dcmpgt>
 80088a2:	b9d0      	cbnz	r0, 80088da <_dtoa_r+0x6c2>
 80088a4:	4642      	mov	r2, r8
 80088a6:	464b      	mov	r3, r9
 80088a8:	4630      	mov	r0, r6
 80088aa:	4639      	mov	r1, r7
 80088ac:	f7f8 f914 	bl	8000ad8 <__aeabi_dcmpeq>
 80088b0:	b110      	cbz	r0, 80088b8 <_dtoa_r+0x6a0>
 80088b2:	f01a 0f01 	tst.w	sl, #1
 80088b6:	d110      	bne.n	80088da <_dtoa_r+0x6c2>
 80088b8:	4620      	mov	r0, r4
 80088ba:	ee18 1a10 	vmov	r1, s16
 80088be:	f000 fe75 	bl	80095ac <_Bfree>
 80088c2:	2300      	movs	r3, #0
 80088c4:	9800      	ldr	r0, [sp, #0]
 80088c6:	702b      	strb	r3, [r5, #0]
 80088c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088ca:	3001      	adds	r0, #1
 80088cc:	6018      	str	r0, [r3, #0]
 80088ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f43f acf1 	beq.w	80082b8 <_dtoa_r+0xa0>
 80088d6:	601d      	str	r5, [r3, #0]
 80088d8:	e4ee      	b.n	80082b8 <_dtoa_r+0xa0>
 80088da:	9f00      	ldr	r7, [sp, #0]
 80088dc:	462b      	mov	r3, r5
 80088de:	461d      	mov	r5, r3
 80088e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088e4:	2a39      	cmp	r2, #57	; 0x39
 80088e6:	d106      	bne.n	80088f6 <_dtoa_r+0x6de>
 80088e8:	9a01      	ldr	r2, [sp, #4]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d1f7      	bne.n	80088de <_dtoa_r+0x6c6>
 80088ee:	9901      	ldr	r1, [sp, #4]
 80088f0:	2230      	movs	r2, #48	; 0x30
 80088f2:	3701      	adds	r7, #1
 80088f4:	700a      	strb	r2, [r1, #0]
 80088f6:	781a      	ldrb	r2, [r3, #0]
 80088f8:	3201      	adds	r2, #1
 80088fa:	701a      	strb	r2, [r3, #0]
 80088fc:	e790      	b.n	8008820 <_dtoa_r+0x608>
 80088fe:	4ba6      	ldr	r3, [pc, #664]	; (8008b98 <_dtoa_r+0x980>)
 8008900:	2200      	movs	r2, #0
 8008902:	f7f7 fe81 	bl	8000608 <__aeabi_dmul>
 8008906:	2200      	movs	r2, #0
 8008908:	2300      	movs	r3, #0
 800890a:	4606      	mov	r6, r0
 800890c:	460f      	mov	r7, r1
 800890e:	f7f8 f8e3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008912:	2800      	cmp	r0, #0
 8008914:	d09d      	beq.n	8008852 <_dtoa_r+0x63a>
 8008916:	e7cf      	b.n	80088b8 <_dtoa_r+0x6a0>
 8008918:	9a08      	ldr	r2, [sp, #32]
 800891a:	2a00      	cmp	r2, #0
 800891c:	f000 80d7 	beq.w	8008ace <_dtoa_r+0x8b6>
 8008920:	9a06      	ldr	r2, [sp, #24]
 8008922:	2a01      	cmp	r2, #1
 8008924:	f300 80ba 	bgt.w	8008a9c <_dtoa_r+0x884>
 8008928:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800892a:	2a00      	cmp	r2, #0
 800892c:	f000 80b2 	beq.w	8008a94 <_dtoa_r+0x87c>
 8008930:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008934:	9e07      	ldr	r6, [sp, #28]
 8008936:	9d04      	ldr	r5, [sp, #16]
 8008938:	9a04      	ldr	r2, [sp, #16]
 800893a:	441a      	add	r2, r3
 800893c:	9204      	str	r2, [sp, #16]
 800893e:	9a05      	ldr	r2, [sp, #20]
 8008940:	2101      	movs	r1, #1
 8008942:	441a      	add	r2, r3
 8008944:	4620      	mov	r0, r4
 8008946:	9205      	str	r2, [sp, #20]
 8008948:	f000 ff32 	bl	80097b0 <__i2b>
 800894c:	4607      	mov	r7, r0
 800894e:	2d00      	cmp	r5, #0
 8008950:	dd0c      	ble.n	800896c <_dtoa_r+0x754>
 8008952:	9b05      	ldr	r3, [sp, #20]
 8008954:	2b00      	cmp	r3, #0
 8008956:	dd09      	ble.n	800896c <_dtoa_r+0x754>
 8008958:	42ab      	cmp	r3, r5
 800895a:	9a04      	ldr	r2, [sp, #16]
 800895c:	bfa8      	it	ge
 800895e:	462b      	movge	r3, r5
 8008960:	1ad2      	subs	r2, r2, r3
 8008962:	9204      	str	r2, [sp, #16]
 8008964:	9a05      	ldr	r2, [sp, #20]
 8008966:	1aed      	subs	r5, r5, r3
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	9305      	str	r3, [sp, #20]
 800896c:	9b07      	ldr	r3, [sp, #28]
 800896e:	b31b      	cbz	r3, 80089b8 <_dtoa_r+0x7a0>
 8008970:	9b08      	ldr	r3, [sp, #32]
 8008972:	2b00      	cmp	r3, #0
 8008974:	f000 80af 	beq.w	8008ad6 <_dtoa_r+0x8be>
 8008978:	2e00      	cmp	r6, #0
 800897a:	dd13      	ble.n	80089a4 <_dtoa_r+0x78c>
 800897c:	4639      	mov	r1, r7
 800897e:	4632      	mov	r2, r6
 8008980:	4620      	mov	r0, r4
 8008982:	f000 ffd5 	bl	8009930 <__pow5mult>
 8008986:	ee18 2a10 	vmov	r2, s16
 800898a:	4601      	mov	r1, r0
 800898c:	4607      	mov	r7, r0
 800898e:	4620      	mov	r0, r4
 8008990:	f000 ff24 	bl	80097dc <__multiply>
 8008994:	ee18 1a10 	vmov	r1, s16
 8008998:	4680      	mov	r8, r0
 800899a:	4620      	mov	r0, r4
 800899c:	f000 fe06 	bl	80095ac <_Bfree>
 80089a0:	ee08 8a10 	vmov	s16, r8
 80089a4:	9b07      	ldr	r3, [sp, #28]
 80089a6:	1b9a      	subs	r2, r3, r6
 80089a8:	d006      	beq.n	80089b8 <_dtoa_r+0x7a0>
 80089aa:	ee18 1a10 	vmov	r1, s16
 80089ae:	4620      	mov	r0, r4
 80089b0:	f000 ffbe 	bl	8009930 <__pow5mult>
 80089b4:	ee08 0a10 	vmov	s16, r0
 80089b8:	2101      	movs	r1, #1
 80089ba:	4620      	mov	r0, r4
 80089bc:	f000 fef8 	bl	80097b0 <__i2b>
 80089c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	4606      	mov	r6, r0
 80089c6:	f340 8088 	ble.w	8008ada <_dtoa_r+0x8c2>
 80089ca:	461a      	mov	r2, r3
 80089cc:	4601      	mov	r1, r0
 80089ce:	4620      	mov	r0, r4
 80089d0:	f000 ffae 	bl	8009930 <__pow5mult>
 80089d4:	9b06      	ldr	r3, [sp, #24]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	4606      	mov	r6, r0
 80089da:	f340 8081 	ble.w	8008ae0 <_dtoa_r+0x8c8>
 80089de:	f04f 0800 	mov.w	r8, #0
 80089e2:	6933      	ldr	r3, [r6, #16]
 80089e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80089e8:	6918      	ldr	r0, [r3, #16]
 80089ea:	f000 fe91 	bl	8009710 <__hi0bits>
 80089ee:	f1c0 0020 	rsb	r0, r0, #32
 80089f2:	9b05      	ldr	r3, [sp, #20]
 80089f4:	4418      	add	r0, r3
 80089f6:	f010 001f 	ands.w	r0, r0, #31
 80089fa:	f000 8092 	beq.w	8008b22 <_dtoa_r+0x90a>
 80089fe:	f1c0 0320 	rsb	r3, r0, #32
 8008a02:	2b04      	cmp	r3, #4
 8008a04:	f340 808a 	ble.w	8008b1c <_dtoa_r+0x904>
 8008a08:	f1c0 001c 	rsb	r0, r0, #28
 8008a0c:	9b04      	ldr	r3, [sp, #16]
 8008a0e:	4403      	add	r3, r0
 8008a10:	9304      	str	r3, [sp, #16]
 8008a12:	9b05      	ldr	r3, [sp, #20]
 8008a14:	4403      	add	r3, r0
 8008a16:	4405      	add	r5, r0
 8008a18:	9305      	str	r3, [sp, #20]
 8008a1a:	9b04      	ldr	r3, [sp, #16]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	dd07      	ble.n	8008a30 <_dtoa_r+0x818>
 8008a20:	ee18 1a10 	vmov	r1, s16
 8008a24:	461a      	mov	r2, r3
 8008a26:	4620      	mov	r0, r4
 8008a28:	f000 ffdc 	bl	80099e4 <__lshift>
 8008a2c:	ee08 0a10 	vmov	s16, r0
 8008a30:	9b05      	ldr	r3, [sp, #20]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	dd05      	ble.n	8008a42 <_dtoa_r+0x82a>
 8008a36:	4631      	mov	r1, r6
 8008a38:	461a      	mov	r2, r3
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	f000 ffd2 	bl	80099e4 <__lshift>
 8008a40:	4606      	mov	r6, r0
 8008a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d06e      	beq.n	8008b26 <_dtoa_r+0x90e>
 8008a48:	ee18 0a10 	vmov	r0, s16
 8008a4c:	4631      	mov	r1, r6
 8008a4e:	f001 f839 	bl	8009ac4 <__mcmp>
 8008a52:	2800      	cmp	r0, #0
 8008a54:	da67      	bge.n	8008b26 <_dtoa_r+0x90e>
 8008a56:	9b00      	ldr	r3, [sp, #0]
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	ee18 1a10 	vmov	r1, s16
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	220a      	movs	r2, #10
 8008a62:	2300      	movs	r3, #0
 8008a64:	4620      	mov	r0, r4
 8008a66:	f000 fdc3 	bl	80095f0 <__multadd>
 8008a6a:	9b08      	ldr	r3, [sp, #32]
 8008a6c:	ee08 0a10 	vmov	s16, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f000 81b1 	beq.w	8008dd8 <_dtoa_r+0xbc0>
 8008a76:	2300      	movs	r3, #0
 8008a78:	4639      	mov	r1, r7
 8008a7a:	220a      	movs	r2, #10
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f000 fdb7 	bl	80095f0 <__multadd>
 8008a82:	9b02      	ldr	r3, [sp, #8]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	4607      	mov	r7, r0
 8008a88:	f300 808e 	bgt.w	8008ba8 <_dtoa_r+0x990>
 8008a8c:	9b06      	ldr	r3, [sp, #24]
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	dc51      	bgt.n	8008b36 <_dtoa_r+0x91e>
 8008a92:	e089      	b.n	8008ba8 <_dtoa_r+0x990>
 8008a94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a9a:	e74b      	b.n	8008934 <_dtoa_r+0x71c>
 8008a9c:	9b03      	ldr	r3, [sp, #12]
 8008a9e:	1e5e      	subs	r6, r3, #1
 8008aa0:	9b07      	ldr	r3, [sp, #28]
 8008aa2:	42b3      	cmp	r3, r6
 8008aa4:	bfbf      	itttt	lt
 8008aa6:	9b07      	ldrlt	r3, [sp, #28]
 8008aa8:	9607      	strlt	r6, [sp, #28]
 8008aaa:	1af2      	sublt	r2, r6, r3
 8008aac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008aae:	bfb6      	itet	lt
 8008ab0:	189b      	addlt	r3, r3, r2
 8008ab2:	1b9e      	subge	r6, r3, r6
 8008ab4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008ab6:	9b03      	ldr	r3, [sp, #12]
 8008ab8:	bfb8      	it	lt
 8008aba:	2600      	movlt	r6, #0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	bfb7      	itett	lt
 8008ac0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008ac4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008ac8:	1a9d      	sublt	r5, r3, r2
 8008aca:	2300      	movlt	r3, #0
 8008acc:	e734      	b.n	8008938 <_dtoa_r+0x720>
 8008ace:	9e07      	ldr	r6, [sp, #28]
 8008ad0:	9d04      	ldr	r5, [sp, #16]
 8008ad2:	9f08      	ldr	r7, [sp, #32]
 8008ad4:	e73b      	b.n	800894e <_dtoa_r+0x736>
 8008ad6:	9a07      	ldr	r2, [sp, #28]
 8008ad8:	e767      	b.n	80089aa <_dtoa_r+0x792>
 8008ada:	9b06      	ldr	r3, [sp, #24]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	dc18      	bgt.n	8008b12 <_dtoa_r+0x8fa>
 8008ae0:	f1ba 0f00 	cmp.w	sl, #0
 8008ae4:	d115      	bne.n	8008b12 <_dtoa_r+0x8fa>
 8008ae6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008aea:	b993      	cbnz	r3, 8008b12 <_dtoa_r+0x8fa>
 8008aec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008af0:	0d1b      	lsrs	r3, r3, #20
 8008af2:	051b      	lsls	r3, r3, #20
 8008af4:	b183      	cbz	r3, 8008b18 <_dtoa_r+0x900>
 8008af6:	9b04      	ldr	r3, [sp, #16]
 8008af8:	3301      	adds	r3, #1
 8008afa:	9304      	str	r3, [sp, #16]
 8008afc:	9b05      	ldr	r3, [sp, #20]
 8008afe:	3301      	adds	r3, #1
 8008b00:	9305      	str	r3, [sp, #20]
 8008b02:	f04f 0801 	mov.w	r8, #1
 8008b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f47f af6a 	bne.w	80089e2 <_dtoa_r+0x7ca>
 8008b0e:	2001      	movs	r0, #1
 8008b10:	e76f      	b.n	80089f2 <_dtoa_r+0x7da>
 8008b12:	f04f 0800 	mov.w	r8, #0
 8008b16:	e7f6      	b.n	8008b06 <_dtoa_r+0x8ee>
 8008b18:	4698      	mov	r8, r3
 8008b1a:	e7f4      	b.n	8008b06 <_dtoa_r+0x8ee>
 8008b1c:	f43f af7d 	beq.w	8008a1a <_dtoa_r+0x802>
 8008b20:	4618      	mov	r0, r3
 8008b22:	301c      	adds	r0, #28
 8008b24:	e772      	b.n	8008a0c <_dtoa_r+0x7f4>
 8008b26:	9b03      	ldr	r3, [sp, #12]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	dc37      	bgt.n	8008b9c <_dtoa_r+0x984>
 8008b2c:	9b06      	ldr	r3, [sp, #24]
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	dd34      	ble.n	8008b9c <_dtoa_r+0x984>
 8008b32:	9b03      	ldr	r3, [sp, #12]
 8008b34:	9302      	str	r3, [sp, #8]
 8008b36:	9b02      	ldr	r3, [sp, #8]
 8008b38:	b96b      	cbnz	r3, 8008b56 <_dtoa_r+0x93e>
 8008b3a:	4631      	mov	r1, r6
 8008b3c:	2205      	movs	r2, #5
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f000 fd56 	bl	80095f0 <__multadd>
 8008b44:	4601      	mov	r1, r0
 8008b46:	4606      	mov	r6, r0
 8008b48:	ee18 0a10 	vmov	r0, s16
 8008b4c:	f000 ffba 	bl	8009ac4 <__mcmp>
 8008b50:	2800      	cmp	r0, #0
 8008b52:	f73f adbb 	bgt.w	80086cc <_dtoa_r+0x4b4>
 8008b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b58:	9d01      	ldr	r5, [sp, #4]
 8008b5a:	43db      	mvns	r3, r3
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	f04f 0800 	mov.w	r8, #0
 8008b62:	4631      	mov	r1, r6
 8008b64:	4620      	mov	r0, r4
 8008b66:	f000 fd21 	bl	80095ac <_Bfree>
 8008b6a:	2f00      	cmp	r7, #0
 8008b6c:	f43f aea4 	beq.w	80088b8 <_dtoa_r+0x6a0>
 8008b70:	f1b8 0f00 	cmp.w	r8, #0
 8008b74:	d005      	beq.n	8008b82 <_dtoa_r+0x96a>
 8008b76:	45b8      	cmp	r8, r7
 8008b78:	d003      	beq.n	8008b82 <_dtoa_r+0x96a>
 8008b7a:	4641      	mov	r1, r8
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f000 fd15 	bl	80095ac <_Bfree>
 8008b82:	4639      	mov	r1, r7
 8008b84:	4620      	mov	r0, r4
 8008b86:	f000 fd11 	bl	80095ac <_Bfree>
 8008b8a:	e695      	b.n	80088b8 <_dtoa_r+0x6a0>
 8008b8c:	2600      	movs	r6, #0
 8008b8e:	4637      	mov	r7, r6
 8008b90:	e7e1      	b.n	8008b56 <_dtoa_r+0x93e>
 8008b92:	9700      	str	r7, [sp, #0]
 8008b94:	4637      	mov	r7, r6
 8008b96:	e599      	b.n	80086cc <_dtoa_r+0x4b4>
 8008b98:	40240000 	.word	0x40240000
 8008b9c:	9b08      	ldr	r3, [sp, #32]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	f000 80ca 	beq.w	8008d38 <_dtoa_r+0xb20>
 8008ba4:	9b03      	ldr	r3, [sp, #12]
 8008ba6:	9302      	str	r3, [sp, #8]
 8008ba8:	2d00      	cmp	r5, #0
 8008baa:	dd05      	ble.n	8008bb8 <_dtoa_r+0x9a0>
 8008bac:	4639      	mov	r1, r7
 8008bae:	462a      	mov	r2, r5
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f000 ff17 	bl	80099e4 <__lshift>
 8008bb6:	4607      	mov	r7, r0
 8008bb8:	f1b8 0f00 	cmp.w	r8, #0
 8008bbc:	d05b      	beq.n	8008c76 <_dtoa_r+0xa5e>
 8008bbe:	6879      	ldr	r1, [r7, #4]
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	f000 fcb3 	bl	800952c <_Balloc>
 8008bc6:	4605      	mov	r5, r0
 8008bc8:	b928      	cbnz	r0, 8008bd6 <_dtoa_r+0x9be>
 8008bca:	4b87      	ldr	r3, [pc, #540]	; (8008de8 <_dtoa_r+0xbd0>)
 8008bcc:	4602      	mov	r2, r0
 8008bce:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008bd2:	f7ff bb3b 	b.w	800824c <_dtoa_r+0x34>
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	3202      	adds	r2, #2
 8008bda:	0092      	lsls	r2, r2, #2
 8008bdc:	f107 010c 	add.w	r1, r7, #12
 8008be0:	300c      	adds	r0, #12
 8008be2:	f000 fc95 	bl	8009510 <memcpy>
 8008be6:	2201      	movs	r2, #1
 8008be8:	4629      	mov	r1, r5
 8008bea:	4620      	mov	r0, r4
 8008bec:	f000 fefa 	bl	80099e4 <__lshift>
 8008bf0:	9b01      	ldr	r3, [sp, #4]
 8008bf2:	f103 0901 	add.w	r9, r3, #1
 8008bf6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	9305      	str	r3, [sp, #20]
 8008bfe:	f00a 0301 	and.w	r3, sl, #1
 8008c02:	46b8      	mov	r8, r7
 8008c04:	9304      	str	r3, [sp, #16]
 8008c06:	4607      	mov	r7, r0
 8008c08:	4631      	mov	r1, r6
 8008c0a:	ee18 0a10 	vmov	r0, s16
 8008c0e:	f7ff fa77 	bl	8008100 <quorem>
 8008c12:	4641      	mov	r1, r8
 8008c14:	9002      	str	r0, [sp, #8]
 8008c16:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008c1a:	ee18 0a10 	vmov	r0, s16
 8008c1e:	f000 ff51 	bl	8009ac4 <__mcmp>
 8008c22:	463a      	mov	r2, r7
 8008c24:	9003      	str	r0, [sp, #12]
 8008c26:	4631      	mov	r1, r6
 8008c28:	4620      	mov	r0, r4
 8008c2a:	f000 ff67 	bl	8009afc <__mdiff>
 8008c2e:	68c2      	ldr	r2, [r0, #12]
 8008c30:	f109 3bff 	add.w	fp, r9, #4294967295
 8008c34:	4605      	mov	r5, r0
 8008c36:	bb02      	cbnz	r2, 8008c7a <_dtoa_r+0xa62>
 8008c38:	4601      	mov	r1, r0
 8008c3a:	ee18 0a10 	vmov	r0, s16
 8008c3e:	f000 ff41 	bl	8009ac4 <__mcmp>
 8008c42:	4602      	mov	r2, r0
 8008c44:	4629      	mov	r1, r5
 8008c46:	4620      	mov	r0, r4
 8008c48:	9207      	str	r2, [sp, #28]
 8008c4a:	f000 fcaf 	bl	80095ac <_Bfree>
 8008c4e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008c52:	ea43 0102 	orr.w	r1, r3, r2
 8008c56:	9b04      	ldr	r3, [sp, #16]
 8008c58:	430b      	orrs	r3, r1
 8008c5a:	464d      	mov	r5, r9
 8008c5c:	d10f      	bne.n	8008c7e <_dtoa_r+0xa66>
 8008c5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c62:	d02a      	beq.n	8008cba <_dtoa_r+0xaa2>
 8008c64:	9b03      	ldr	r3, [sp, #12]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	dd02      	ble.n	8008c70 <_dtoa_r+0xa58>
 8008c6a:	9b02      	ldr	r3, [sp, #8]
 8008c6c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008c70:	f88b a000 	strb.w	sl, [fp]
 8008c74:	e775      	b.n	8008b62 <_dtoa_r+0x94a>
 8008c76:	4638      	mov	r0, r7
 8008c78:	e7ba      	b.n	8008bf0 <_dtoa_r+0x9d8>
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	e7e2      	b.n	8008c44 <_dtoa_r+0xa2c>
 8008c7e:	9b03      	ldr	r3, [sp, #12]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	db04      	blt.n	8008c8e <_dtoa_r+0xa76>
 8008c84:	9906      	ldr	r1, [sp, #24]
 8008c86:	430b      	orrs	r3, r1
 8008c88:	9904      	ldr	r1, [sp, #16]
 8008c8a:	430b      	orrs	r3, r1
 8008c8c:	d122      	bne.n	8008cd4 <_dtoa_r+0xabc>
 8008c8e:	2a00      	cmp	r2, #0
 8008c90:	ddee      	ble.n	8008c70 <_dtoa_r+0xa58>
 8008c92:	ee18 1a10 	vmov	r1, s16
 8008c96:	2201      	movs	r2, #1
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f000 fea3 	bl	80099e4 <__lshift>
 8008c9e:	4631      	mov	r1, r6
 8008ca0:	ee08 0a10 	vmov	s16, r0
 8008ca4:	f000 ff0e 	bl	8009ac4 <__mcmp>
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	dc03      	bgt.n	8008cb4 <_dtoa_r+0xa9c>
 8008cac:	d1e0      	bne.n	8008c70 <_dtoa_r+0xa58>
 8008cae:	f01a 0f01 	tst.w	sl, #1
 8008cb2:	d0dd      	beq.n	8008c70 <_dtoa_r+0xa58>
 8008cb4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008cb8:	d1d7      	bne.n	8008c6a <_dtoa_r+0xa52>
 8008cba:	2339      	movs	r3, #57	; 0x39
 8008cbc:	f88b 3000 	strb.w	r3, [fp]
 8008cc0:	462b      	mov	r3, r5
 8008cc2:	461d      	mov	r5, r3
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008cca:	2a39      	cmp	r2, #57	; 0x39
 8008ccc:	d071      	beq.n	8008db2 <_dtoa_r+0xb9a>
 8008cce:	3201      	adds	r2, #1
 8008cd0:	701a      	strb	r2, [r3, #0]
 8008cd2:	e746      	b.n	8008b62 <_dtoa_r+0x94a>
 8008cd4:	2a00      	cmp	r2, #0
 8008cd6:	dd07      	ble.n	8008ce8 <_dtoa_r+0xad0>
 8008cd8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008cdc:	d0ed      	beq.n	8008cba <_dtoa_r+0xaa2>
 8008cde:	f10a 0301 	add.w	r3, sl, #1
 8008ce2:	f88b 3000 	strb.w	r3, [fp]
 8008ce6:	e73c      	b.n	8008b62 <_dtoa_r+0x94a>
 8008ce8:	9b05      	ldr	r3, [sp, #20]
 8008cea:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008cee:	4599      	cmp	r9, r3
 8008cf0:	d047      	beq.n	8008d82 <_dtoa_r+0xb6a>
 8008cf2:	ee18 1a10 	vmov	r1, s16
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	220a      	movs	r2, #10
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f000 fc78 	bl	80095f0 <__multadd>
 8008d00:	45b8      	cmp	r8, r7
 8008d02:	ee08 0a10 	vmov	s16, r0
 8008d06:	f04f 0300 	mov.w	r3, #0
 8008d0a:	f04f 020a 	mov.w	r2, #10
 8008d0e:	4641      	mov	r1, r8
 8008d10:	4620      	mov	r0, r4
 8008d12:	d106      	bne.n	8008d22 <_dtoa_r+0xb0a>
 8008d14:	f000 fc6c 	bl	80095f0 <__multadd>
 8008d18:	4680      	mov	r8, r0
 8008d1a:	4607      	mov	r7, r0
 8008d1c:	f109 0901 	add.w	r9, r9, #1
 8008d20:	e772      	b.n	8008c08 <_dtoa_r+0x9f0>
 8008d22:	f000 fc65 	bl	80095f0 <__multadd>
 8008d26:	4639      	mov	r1, r7
 8008d28:	4680      	mov	r8, r0
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	220a      	movs	r2, #10
 8008d2e:	4620      	mov	r0, r4
 8008d30:	f000 fc5e 	bl	80095f0 <__multadd>
 8008d34:	4607      	mov	r7, r0
 8008d36:	e7f1      	b.n	8008d1c <_dtoa_r+0xb04>
 8008d38:	9b03      	ldr	r3, [sp, #12]
 8008d3a:	9302      	str	r3, [sp, #8]
 8008d3c:	9d01      	ldr	r5, [sp, #4]
 8008d3e:	ee18 0a10 	vmov	r0, s16
 8008d42:	4631      	mov	r1, r6
 8008d44:	f7ff f9dc 	bl	8008100 <quorem>
 8008d48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008d4c:	9b01      	ldr	r3, [sp, #4]
 8008d4e:	f805 ab01 	strb.w	sl, [r5], #1
 8008d52:	1aea      	subs	r2, r5, r3
 8008d54:	9b02      	ldr	r3, [sp, #8]
 8008d56:	4293      	cmp	r3, r2
 8008d58:	dd09      	ble.n	8008d6e <_dtoa_r+0xb56>
 8008d5a:	ee18 1a10 	vmov	r1, s16
 8008d5e:	2300      	movs	r3, #0
 8008d60:	220a      	movs	r2, #10
 8008d62:	4620      	mov	r0, r4
 8008d64:	f000 fc44 	bl	80095f0 <__multadd>
 8008d68:	ee08 0a10 	vmov	s16, r0
 8008d6c:	e7e7      	b.n	8008d3e <_dtoa_r+0xb26>
 8008d6e:	9b02      	ldr	r3, [sp, #8]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	bfc8      	it	gt
 8008d74:	461d      	movgt	r5, r3
 8008d76:	9b01      	ldr	r3, [sp, #4]
 8008d78:	bfd8      	it	le
 8008d7a:	2501      	movle	r5, #1
 8008d7c:	441d      	add	r5, r3
 8008d7e:	f04f 0800 	mov.w	r8, #0
 8008d82:	ee18 1a10 	vmov	r1, s16
 8008d86:	2201      	movs	r2, #1
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f000 fe2b 	bl	80099e4 <__lshift>
 8008d8e:	4631      	mov	r1, r6
 8008d90:	ee08 0a10 	vmov	s16, r0
 8008d94:	f000 fe96 	bl	8009ac4 <__mcmp>
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	dc91      	bgt.n	8008cc0 <_dtoa_r+0xaa8>
 8008d9c:	d102      	bne.n	8008da4 <_dtoa_r+0xb8c>
 8008d9e:	f01a 0f01 	tst.w	sl, #1
 8008da2:	d18d      	bne.n	8008cc0 <_dtoa_r+0xaa8>
 8008da4:	462b      	mov	r3, r5
 8008da6:	461d      	mov	r5, r3
 8008da8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008dac:	2a30      	cmp	r2, #48	; 0x30
 8008dae:	d0fa      	beq.n	8008da6 <_dtoa_r+0xb8e>
 8008db0:	e6d7      	b.n	8008b62 <_dtoa_r+0x94a>
 8008db2:	9a01      	ldr	r2, [sp, #4]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d184      	bne.n	8008cc2 <_dtoa_r+0xaaa>
 8008db8:	9b00      	ldr	r3, [sp, #0]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	9300      	str	r3, [sp, #0]
 8008dbe:	2331      	movs	r3, #49	; 0x31
 8008dc0:	7013      	strb	r3, [r2, #0]
 8008dc2:	e6ce      	b.n	8008b62 <_dtoa_r+0x94a>
 8008dc4:	4b09      	ldr	r3, [pc, #36]	; (8008dec <_dtoa_r+0xbd4>)
 8008dc6:	f7ff ba95 	b.w	80082f4 <_dtoa_r+0xdc>
 8008dca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f47f aa6e 	bne.w	80082ae <_dtoa_r+0x96>
 8008dd2:	4b07      	ldr	r3, [pc, #28]	; (8008df0 <_dtoa_r+0xbd8>)
 8008dd4:	f7ff ba8e 	b.w	80082f4 <_dtoa_r+0xdc>
 8008dd8:	9b02      	ldr	r3, [sp, #8]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	dcae      	bgt.n	8008d3c <_dtoa_r+0xb24>
 8008dde:	9b06      	ldr	r3, [sp, #24]
 8008de0:	2b02      	cmp	r3, #2
 8008de2:	f73f aea8 	bgt.w	8008b36 <_dtoa_r+0x91e>
 8008de6:	e7a9      	b.n	8008d3c <_dtoa_r+0xb24>
 8008de8:	0800b9c0 	.word	0x0800b9c0
 8008dec:	0800b7c0 	.word	0x0800b7c0
 8008df0:	0800b941 	.word	0x0800b941

08008df4 <rshift>:
 8008df4:	6903      	ldr	r3, [r0, #16]
 8008df6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008dfa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008dfe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008e02:	f100 0414 	add.w	r4, r0, #20
 8008e06:	dd45      	ble.n	8008e94 <rshift+0xa0>
 8008e08:	f011 011f 	ands.w	r1, r1, #31
 8008e0c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008e10:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008e14:	d10c      	bne.n	8008e30 <rshift+0x3c>
 8008e16:	f100 0710 	add.w	r7, r0, #16
 8008e1a:	4629      	mov	r1, r5
 8008e1c:	42b1      	cmp	r1, r6
 8008e1e:	d334      	bcc.n	8008e8a <rshift+0x96>
 8008e20:	1a9b      	subs	r3, r3, r2
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	1eea      	subs	r2, r5, #3
 8008e26:	4296      	cmp	r6, r2
 8008e28:	bf38      	it	cc
 8008e2a:	2300      	movcc	r3, #0
 8008e2c:	4423      	add	r3, r4
 8008e2e:	e015      	b.n	8008e5c <rshift+0x68>
 8008e30:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008e34:	f1c1 0820 	rsb	r8, r1, #32
 8008e38:	40cf      	lsrs	r7, r1
 8008e3a:	f105 0e04 	add.w	lr, r5, #4
 8008e3e:	46a1      	mov	r9, r4
 8008e40:	4576      	cmp	r6, lr
 8008e42:	46f4      	mov	ip, lr
 8008e44:	d815      	bhi.n	8008e72 <rshift+0x7e>
 8008e46:	1a9a      	subs	r2, r3, r2
 8008e48:	0092      	lsls	r2, r2, #2
 8008e4a:	3a04      	subs	r2, #4
 8008e4c:	3501      	adds	r5, #1
 8008e4e:	42ae      	cmp	r6, r5
 8008e50:	bf38      	it	cc
 8008e52:	2200      	movcc	r2, #0
 8008e54:	18a3      	adds	r3, r4, r2
 8008e56:	50a7      	str	r7, [r4, r2]
 8008e58:	b107      	cbz	r7, 8008e5c <rshift+0x68>
 8008e5a:	3304      	adds	r3, #4
 8008e5c:	1b1a      	subs	r2, r3, r4
 8008e5e:	42a3      	cmp	r3, r4
 8008e60:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008e64:	bf08      	it	eq
 8008e66:	2300      	moveq	r3, #0
 8008e68:	6102      	str	r2, [r0, #16]
 8008e6a:	bf08      	it	eq
 8008e6c:	6143      	streq	r3, [r0, #20]
 8008e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e72:	f8dc c000 	ldr.w	ip, [ip]
 8008e76:	fa0c fc08 	lsl.w	ip, ip, r8
 8008e7a:	ea4c 0707 	orr.w	r7, ip, r7
 8008e7e:	f849 7b04 	str.w	r7, [r9], #4
 8008e82:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e86:	40cf      	lsrs	r7, r1
 8008e88:	e7da      	b.n	8008e40 <rshift+0x4c>
 8008e8a:	f851 cb04 	ldr.w	ip, [r1], #4
 8008e8e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008e92:	e7c3      	b.n	8008e1c <rshift+0x28>
 8008e94:	4623      	mov	r3, r4
 8008e96:	e7e1      	b.n	8008e5c <rshift+0x68>

08008e98 <__hexdig_fun>:
 8008e98:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008e9c:	2b09      	cmp	r3, #9
 8008e9e:	d802      	bhi.n	8008ea6 <__hexdig_fun+0xe>
 8008ea0:	3820      	subs	r0, #32
 8008ea2:	b2c0      	uxtb	r0, r0
 8008ea4:	4770      	bx	lr
 8008ea6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008eaa:	2b05      	cmp	r3, #5
 8008eac:	d801      	bhi.n	8008eb2 <__hexdig_fun+0x1a>
 8008eae:	3847      	subs	r0, #71	; 0x47
 8008eb0:	e7f7      	b.n	8008ea2 <__hexdig_fun+0xa>
 8008eb2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008eb6:	2b05      	cmp	r3, #5
 8008eb8:	d801      	bhi.n	8008ebe <__hexdig_fun+0x26>
 8008eba:	3827      	subs	r0, #39	; 0x27
 8008ebc:	e7f1      	b.n	8008ea2 <__hexdig_fun+0xa>
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	4770      	bx	lr
	...

08008ec4 <__gethex>:
 8008ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec8:	ed2d 8b02 	vpush	{d8}
 8008ecc:	b089      	sub	sp, #36	; 0x24
 8008ece:	ee08 0a10 	vmov	s16, r0
 8008ed2:	9304      	str	r3, [sp, #16]
 8008ed4:	4bb4      	ldr	r3, [pc, #720]	; (80091a8 <__gethex+0x2e4>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	9301      	str	r3, [sp, #4]
 8008eda:	4618      	mov	r0, r3
 8008edc:	468b      	mov	fp, r1
 8008ede:	4690      	mov	r8, r2
 8008ee0:	f7f7 f97e 	bl	80001e0 <strlen>
 8008ee4:	9b01      	ldr	r3, [sp, #4]
 8008ee6:	f8db 2000 	ldr.w	r2, [fp]
 8008eea:	4403      	add	r3, r0
 8008eec:	4682      	mov	sl, r0
 8008eee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008ef2:	9305      	str	r3, [sp, #20]
 8008ef4:	1c93      	adds	r3, r2, #2
 8008ef6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008efa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008efe:	32fe      	adds	r2, #254	; 0xfe
 8008f00:	18d1      	adds	r1, r2, r3
 8008f02:	461f      	mov	r7, r3
 8008f04:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008f08:	9100      	str	r1, [sp, #0]
 8008f0a:	2830      	cmp	r0, #48	; 0x30
 8008f0c:	d0f8      	beq.n	8008f00 <__gethex+0x3c>
 8008f0e:	f7ff ffc3 	bl	8008e98 <__hexdig_fun>
 8008f12:	4604      	mov	r4, r0
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d13a      	bne.n	8008f8e <__gethex+0xca>
 8008f18:	9901      	ldr	r1, [sp, #4]
 8008f1a:	4652      	mov	r2, sl
 8008f1c:	4638      	mov	r0, r7
 8008f1e:	f001 fa33 	bl	800a388 <strncmp>
 8008f22:	4605      	mov	r5, r0
 8008f24:	2800      	cmp	r0, #0
 8008f26:	d168      	bne.n	8008ffa <__gethex+0x136>
 8008f28:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008f2c:	eb07 060a 	add.w	r6, r7, sl
 8008f30:	f7ff ffb2 	bl	8008e98 <__hexdig_fun>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	d062      	beq.n	8008ffe <__gethex+0x13a>
 8008f38:	4633      	mov	r3, r6
 8008f3a:	7818      	ldrb	r0, [r3, #0]
 8008f3c:	2830      	cmp	r0, #48	; 0x30
 8008f3e:	461f      	mov	r7, r3
 8008f40:	f103 0301 	add.w	r3, r3, #1
 8008f44:	d0f9      	beq.n	8008f3a <__gethex+0x76>
 8008f46:	f7ff ffa7 	bl	8008e98 <__hexdig_fun>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	fab0 f480 	clz	r4, r0
 8008f50:	0964      	lsrs	r4, r4, #5
 8008f52:	4635      	mov	r5, r6
 8008f54:	9300      	str	r3, [sp, #0]
 8008f56:	463a      	mov	r2, r7
 8008f58:	4616      	mov	r6, r2
 8008f5a:	3201      	adds	r2, #1
 8008f5c:	7830      	ldrb	r0, [r6, #0]
 8008f5e:	f7ff ff9b 	bl	8008e98 <__hexdig_fun>
 8008f62:	2800      	cmp	r0, #0
 8008f64:	d1f8      	bne.n	8008f58 <__gethex+0x94>
 8008f66:	9901      	ldr	r1, [sp, #4]
 8008f68:	4652      	mov	r2, sl
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	f001 fa0c 	bl	800a388 <strncmp>
 8008f70:	b980      	cbnz	r0, 8008f94 <__gethex+0xd0>
 8008f72:	b94d      	cbnz	r5, 8008f88 <__gethex+0xc4>
 8008f74:	eb06 050a 	add.w	r5, r6, sl
 8008f78:	462a      	mov	r2, r5
 8008f7a:	4616      	mov	r6, r2
 8008f7c:	3201      	adds	r2, #1
 8008f7e:	7830      	ldrb	r0, [r6, #0]
 8008f80:	f7ff ff8a 	bl	8008e98 <__hexdig_fun>
 8008f84:	2800      	cmp	r0, #0
 8008f86:	d1f8      	bne.n	8008f7a <__gethex+0xb6>
 8008f88:	1bad      	subs	r5, r5, r6
 8008f8a:	00ad      	lsls	r5, r5, #2
 8008f8c:	e004      	b.n	8008f98 <__gethex+0xd4>
 8008f8e:	2400      	movs	r4, #0
 8008f90:	4625      	mov	r5, r4
 8008f92:	e7e0      	b.n	8008f56 <__gethex+0x92>
 8008f94:	2d00      	cmp	r5, #0
 8008f96:	d1f7      	bne.n	8008f88 <__gethex+0xc4>
 8008f98:	7833      	ldrb	r3, [r6, #0]
 8008f9a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008f9e:	2b50      	cmp	r3, #80	; 0x50
 8008fa0:	d13b      	bne.n	800901a <__gethex+0x156>
 8008fa2:	7873      	ldrb	r3, [r6, #1]
 8008fa4:	2b2b      	cmp	r3, #43	; 0x2b
 8008fa6:	d02c      	beq.n	8009002 <__gethex+0x13e>
 8008fa8:	2b2d      	cmp	r3, #45	; 0x2d
 8008faa:	d02e      	beq.n	800900a <__gethex+0x146>
 8008fac:	1c71      	adds	r1, r6, #1
 8008fae:	f04f 0900 	mov.w	r9, #0
 8008fb2:	7808      	ldrb	r0, [r1, #0]
 8008fb4:	f7ff ff70 	bl	8008e98 <__hexdig_fun>
 8008fb8:	1e43      	subs	r3, r0, #1
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	2b18      	cmp	r3, #24
 8008fbe:	d82c      	bhi.n	800901a <__gethex+0x156>
 8008fc0:	f1a0 0210 	sub.w	r2, r0, #16
 8008fc4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008fc8:	f7ff ff66 	bl	8008e98 <__hexdig_fun>
 8008fcc:	1e43      	subs	r3, r0, #1
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	2b18      	cmp	r3, #24
 8008fd2:	d91d      	bls.n	8009010 <__gethex+0x14c>
 8008fd4:	f1b9 0f00 	cmp.w	r9, #0
 8008fd8:	d000      	beq.n	8008fdc <__gethex+0x118>
 8008fda:	4252      	negs	r2, r2
 8008fdc:	4415      	add	r5, r2
 8008fde:	f8cb 1000 	str.w	r1, [fp]
 8008fe2:	b1e4      	cbz	r4, 800901e <__gethex+0x15a>
 8008fe4:	9b00      	ldr	r3, [sp, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	bf14      	ite	ne
 8008fea:	2700      	movne	r7, #0
 8008fec:	2706      	moveq	r7, #6
 8008fee:	4638      	mov	r0, r7
 8008ff0:	b009      	add	sp, #36	; 0x24
 8008ff2:	ecbd 8b02 	vpop	{d8}
 8008ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ffa:	463e      	mov	r6, r7
 8008ffc:	4625      	mov	r5, r4
 8008ffe:	2401      	movs	r4, #1
 8009000:	e7ca      	b.n	8008f98 <__gethex+0xd4>
 8009002:	f04f 0900 	mov.w	r9, #0
 8009006:	1cb1      	adds	r1, r6, #2
 8009008:	e7d3      	b.n	8008fb2 <__gethex+0xee>
 800900a:	f04f 0901 	mov.w	r9, #1
 800900e:	e7fa      	b.n	8009006 <__gethex+0x142>
 8009010:	230a      	movs	r3, #10
 8009012:	fb03 0202 	mla	r2, r3, r2, r0
 8009016:	3a10      	subs	r2, #16
 8009018:	e7d4      	b.n	8008fc4 <__gethex+0x100>
 800901a:	4631      	mov	r1, r6
 800901c:	e7df      	b.n	8008fde <__gethex+0x11a>
 800901e:	1bf3      	subs	r3, r6, r7
 8009020:	3b01      	subs	r3, #1
 8009022:	4621      	mov	r1, r4
 8009024:	2b07      	cmp	r3, #7
 8009026:	dc0b      	bgt.n	8009040 <__gethex+0x17c>
 8009028:	ee18 0a10 	vmov	r0, s16
 800902c:	f000 fa7e 	bl	800952c <_Balloc>
 8009030:	4604      	mov	r4, r0
 8009032:	b940      	cbnz	r0, 8009046 <__gethex+0x182>
 8009034:	4b5d      	ldr	r3, [pc, #372]	; (80091ac <__gethex+0x2e8>)
 8009036:	4602      	mov	r2, r0
 8009038:	21de      	movs	r1, #222	; 0xde
 800903a:	485d      	ldr	r0, [pc, #372]	; (80091b0 <__gethex+0x2ec>)
 800903c:	f001 f9c6 	bl	800a3cc <__assert_func>
 8009040:	3101      	adds	r1, #1
 8009042:	105b      	asrs	r3, r3, #1
 8009044:	e7ee      	b.n	8009024 <__gethex+0x160>
 8009046:	f100 0914 	add.w	r9, r0, #20
 800904a:	f04f 0b00 	mov.w	fp, #0
 800904e:	f1ca 0301 	rsb	r3, sl, #1
 8009052:	f8cd 9008 	str.w	r9, [sp, #8]
 8009056:	f8cd b000 	str.w	fp, [sp]
 800905a:	9306      	str	r3, [sp, #24]
 800905c:	42b7      	cmp	r7, r6
 800905e:	d340      	bcc.n	80090e2 <__gethex+0x21e>
 8009060:	9802      	ldr	r0, [sp, #8]
 8009062:	9b00      	ldr	r3, [sp, #0]
 8009064:	f840 3b04 	str.w	r3, [r0], #4
 8009068:	eba0 0009 	sub.w	r0, r0, r9
 800906c:	1080      	asrs	r0, r0, #2
 800906e:	0146      	lsls	r6, r0, #5
 8009070:	6120      	str	r0, [r4, #16]
 8009072:	4618      	mov	r0, r3
 8009074:	f000 fb4c 	bl	8009710 <__hi0bits>
 8009078:	1a30      	subs	r0, r6, r0
 800907a:	f8d8 6000 	ldr.w	r6, [r8]
 800907e:	42b0      	cmp	r0, r6
 8009080:	dd63      	ble.n	800914a <__gethex+0x286>
 8009082:	1b87      	subs	r7, r0, r6
 8009084:	4639      	mov	r1, r7
 8009086:	4620      	mov	r0, r4
 8009088:	f000 fef0 	bl	8009e6c <__any_on>
 800908c:	4682      	mov	sl, r0
 800908e:	b1a8      	cbz	r0, 80090bc <__gethex+0x1f8>
 8009090:	1e7b      	subs	r3, r7, #1
 8009092:	1159      	asrs	r1, r3, #5
 8009094:	f003 021f 	and.w	r2, r3, #31
 8009098:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800909c:	f04f 0a01 	mov.w	sl, #1
 80090a0:	fa0a f202 	lsl.w	r2, sl, r2
 80090a4:	420a      	tst	r2, r1
 80090a6:	d009      	beq.n	80090bc <__gethex+0x1f8>
 80090a8:	4553      	cmp	r3, sl
 80090aa:	dd05      	ble.n	80090b8 <__gethex+0x1f4>
 80090ac:	1eb9      	subs	r1, r7, #2
 80090ae:	4620      	mov	r0, r4
 80090b0:	f000 fedc 	bl	8009e6c <__any_on>
 80090b4:	2800      	cmp	r0, #0
 80090b6:	d145      	bne.n	8009144 <__gethex+0x280>
 80090b8:	f04f 0a02 	mov.w	sl, #2
 80090bc:	4639      	mov	r1, r7
 80090be:	4620      	mov	r0, r4
 80090c0:	f7ff fe98 	bl	8008df4 <rshift>
 80090c4:	443d      	add	r5, r7
 80090c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80090ca:	42ab      	cmp	r3, r5
 80090cc:	da4c      	bge.n	8009168 <__gethex+0x2a4>
 80090ce:	ee18 0a10 	vmov	r0, s16
 80090d2:	4621      	mov	r1, r4
 80090d4:	f000 fa6a 	bl	80095ac <_Bfree>
 80090d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80090da:	2300      	movs	r3, #0
 80090dc:	6013      	str	r3, [r2, #0]
 80090de:	27a3      	movs	r7, #163	; 0xa3
 80090e0:	e785      	b.n	8008fee <__gethex+0x12a>
 80090e2:	1e73      	subs	r3, r6, #1
 80090e4:	9a05      	ldr	r2, [sp, #20]
 80090e6:	9303      	str	r3, [sp, #12]
 80090e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d019      	beq.n	8009124 <__gethex+0x260>
 80090f0:	f1bb 0f20 	cmp.w	fp, #32
 80090f4:	d107      	bne.n	8009106 <__gethex+0x242>
 80090f6:	9b02      	ldr	r3, [sp, #8]
 80090f8:	9a00      	ldr	r2, [sp, #0]
 80090fa:	f843 2b04 	str.w	r2, [r3], #4
 80090fe:	9302      	str	r3, [sp, #8]
 8009100:	2300      	movs	r3, #0
 8009102:	9300      	str	r3, [sp, #0]
 8009104:	469b      	mov	fp, r3
 8009106:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800910a:	f7ff fec5 	bl	8008e98 <__hexdig_fun>
 800910e:	9b00      	ldr	r3, [sp, #0]
 8009110:	f000 000f 	and.w	r0, r0, #15
 8009114:	fa00 f00b 	lsl.w	r0, r0, fp
 8009118:	4303      	orrs	r3, r0
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	f10b 0b04 	add.w	fp, fp, #4
 8009120:	9b03      	ldr	r3, [sp, #12]
 8009122:	e00d      	b.n	8009140 <__gethex+0x27c>
 8009124:	9b03      	ldr	r3, [sp, #12]
 8009126:	9a06      	ldr	r2, [sp, #24]
 8009128:	4413      	add	r3, r2
 800912a:	42bb      	cmp	r3, r7
 800912c:	d3e0      	bcc.n	80090f0 <__gethex+0x22c>
 800912e:	4618      	mov	r0, r3
 8009130:	9901      	ldr	r1, [sp, #4]
 8009132:	9307      	str	r3, [sp, #28]
 8009134:	4652      	mov	r2, sl
 8009136:	f001 f927 	bl	800a388 <strncmp>
 800913a:	9b07      	ldr	r3, [sp, #28]
 800913c:	2800      	cmp	r0, #0
 800913e:	d1d7      	bne.n	80090f0 <__gethex+0x22c>
 8009140:	461e      	mov	r6, r3
 8009142:	e78b      	b.n	800905c <__gethex+0x198>
 8009144:	f04f 0a03 	mov.w	sl, #3
 8009148:	e7b8      	b.n	80090bc <__gethex+0x1f8>
 800914a:	da0a      	bge.n	8009162 <__gethex+0x29e>
 800914c:	1a37      	subs	r7, r6, r0
 800914e:	4621      	mov	r1, r4
 8009150:	ee18 0a10 	vmov	r0, s16
 8009154:	463a      	mov	r2, r7
 8009156:	f000 fc45 	bl	80099e4 <__lshift>
 800915a:	1bed      	subs	r5, r5, r7
 800915c:	4604      	mov	r4, r0
 800915e:	f100 0914 	add.w	r9, r0, #20
 8009162:	f04f 0a00 	mov.w	sl, #0
 8009166:	e7ae      	b.n	80090c6 <__gethex+0x202>
 8009168:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800916c:	42a8      	cmp	r0, r5
 800916e:	dd72      	ble.n	8009256 <__gethex+0x392>
 8009170:	1b45      	subs	r5, r0, r5
 8009172:	42ae      	cmp	r6, r5
 8009174:	dc36      	bgt.n	80091e4 <__gethex+0x320>
 8009176:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800917a:	2b02      	cmp	r3, #2
 800917c:	d02a      	beq.n	80091d4 <__gethex+0x310>
 800917e:	2b03      	cmp	r3, #3
 8009180:	d02c      	beq.n	80091dc <__gethex+0x318>
 8009182:	2b01      	cmp	r3, #1
 8009184:	d11c      	bne.n	80091c0 <__gethex+0x2fc>
 8009186:	42ae      	cmp	r6, r5
 8009188:	d11a      	bne.n	80091c0 <__gethex+0x2fc>
 800918a:	2e01      	cmp	r6, #1
 800918c:	d112      	bne.n	80091b4 <__gethex+0x2f0>
 800918e:	9a04      	ldr	r2, [sp, #16]
 8009190:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009194:	6013      	str	r3, [r2, #0]
 8009196:	2301      	movs	r3, #1
 8009198:	6123      	str	r3, [r4, #16]
 800919a:	f8c9 3000 	str.w	r3, [r9]
 800919e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80091a0:	2762      	movs	r7, #98	; 0x62
 80091a2:	601c      	str	r4, [r3, #0]
 80091a4:	e723      	b.n	8008fee <__gethex+0x12a>
 80091a6:	bf00      	nop
 80091a8:	0800ba38 	.word	0x0800ba38
 80091ac:	0800b9c0 	.word	0x0800b9c0
 80091b0:	0800b9d1 	.word	0x0800b9d1
 80091b4:	1e71      	subs	r1, r6, #1
 80091b6:	4620      	mov	r0, r4
 80091b8:	f000 fe58 	bl	8009e6c <__any_on>
 80091bc:	2800      	cmp	r0, #0
 80091be:	d1e6      	bne.n	800918e <__gethex+0x2ca>
 80091c0:	ee18 0a10 	vmov	r0, s16
 80091c4:	4621      	mov	r1, r4
 80091c6:	f000 f9f1 	bl	80095ac <_Bfree>
 80091ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80091cc:	2300      	movs	r3, #0
 80091ce:	6013      	str	r3, [r2, #0]
 80091d0:	2750      	movs	r7, #80	; 0x50
 80091d2:	e70c      	b.n	8008fee <__gethex+0x12a>
 80091d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1f2      	bne.n	80091c0 <__gethex+0x2fc>
 80091da:	e7d8      	b.n	800918e <__gethex+0x2ca>
 80091dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1d5      	bne.n	800918e <__gethex+0x2ca>
 80091e2:	e7ed      	b.n	80091c0 <__gethex+0x2fc>
 80091e4:	1e6f      	subs	r7, r5, #1
 80091e6:	f1ba 0f00 	cmp.w	sl, #0
 80091ea:	d131      	bne.n	8009250 <__gethex+0x38c>
 80091ec:	b127      	cbz	r7, 80091f8 <__gethex+0x334>
 80091ee:	4639      	mov	r1, r7
 80091f0:	4620      	mov	r0, r4
 80091f2:	f000 fe3b 	bl	8009e6c <__any_on>
 80091f6:	4682      	mov	sl, r0
 80091f8:	117b      	asrs	r3, r7, #5
 80091fa:	2101      	movs	r1, #1
 80091fc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009200:	f007 071f 	and.w	r7, r7, #31
 8009204:	fa01 f707 	lsl.w	r7, r1, r7
 8009208:	421f      	tst	r7, r3
 800920a:	4629      	mov	r1, r5
 800920c:	4620      	mov	r0, r4
 800920e:	bf18      	it	ne
 8009210:	f04a 0a02 	orrne.w	sl, sl, #2
 8009214:	1b76      	subs	r6, r6, r5
 8009216:	f7ff fded 	bl	8008df4 <rshift>
 800921a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800921e:	2702      	movs	r7, #2
 8009220:	f1ba 0f00 	cmp.w	sl, #0
 8009224:	d048      	beq.n	80092b8 <__gethex+0x3f4>
 8009226:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800922a:	2b02      	cmp	r3, #2
 800922c:	d015      	beq.n	800925a <__gethex+0x396>
 800922e:	2b03      	cmp	r3, #3
 8009230:	d017      	beq.n	8009262 <__gethex+0x39e>
 8009232:	2b01      	cmp	r3, #1
 8009234:	d109      	bne.n	800924a <__gethex+0x386>
 8009236:	f01a 0f02 	tst.w	sl, #2
 800923a:	d006      	beq.n	800924a <__gethex+0x386>
 800923c:	f8d9 0000 	ldr.w	r0, [r9]
 8009240:	ea4a 0a00 	orr.w	sl, sl, r0
 8009244:	f01a 0f01 	tst.w	sl, #1
 8009248:	d10e      	bne.n	8009268 <__gethex+0x3a4>
 800924a:	f047 0710 	orr.w	r7, r7, #16
 800924e:	e033      	b.n	80092b8 <__gethex+0x3f4>
 8009250:	f04f 0a01 	mov.w	sl, #1
 8009254:	e7d0      	b.n	80091f8 <__gethex+0x334>
 8009256:	2701      	movs	r7, #1
 8009258:	e7e2      	b.n	8009220 <__gethex+0x35c>
 800925a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800925c:	f1c3 0301 	rsb	r3, r3, #1
 8009260:	9315      	str	r3, [sp, #84]	; 0x54
 8009262:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009264:	2b00      	cmp	r3, #0
 8009266:	d0f0      	beq.n	800924a <__gethex+0x386>
 8009268:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800926c:	f104 0314 	add.w	r3, r4, #20
 8009270:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009274:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009278:	f04f 0c00 	mov.w	ip, #0
 800927c:	4618      	mov	r0, r3
 800927e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009282:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009286:	d01c      	beq.n	80092c2 <__gethex+0x3fe>
 8009288:	3201      	adds	r2, #1
 800928a:	6002      	str	r2, [r0, #0]
 800928c:	2f02      	cmp	r7, #2
 800928e:	f104 0314 	add.w	r3, r4, #20
 8009292:	d13f      	bne.n	8009314 <__gethex+0x450>
 8009294:	f8d8 2000 	ldr.w	r2, [r8]
 8009298:	3a01      	subs	r2, #1
 800929a:	42b2      	cmp	r2, r6
 800929c:	d10a      	bne.n	80092b4 <__gethex+0x3f0>
 800929e:	1171      	asrs	r1, r6, #5
 80092a0:	2201      	movs	r2, #1
 80092a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80092a6:	f006 061f 	and.w	r6, r6, #31
 80092aa:	fa02 f606 	lsl.w	r6, r2, r6
 80092ae:	421e      	tst	r6, r3
 80092b0:	bf18      	it	ne
 80092b2:	4617      	movne	r7, r2
 80092b4:	f047 0720 	orr.w	r7, r7, #32
 80092b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80092ba:	601c      	str	r4, [r3, #0]
 80092bc:	9b04      	ldr	r3, [sp, #16]
 80092be:	601d      	str	r5, [r3, #0]
 80092c0:	e695      	b.n	8008fee <__gethex+0x12a>
 80092c2:	4299      	cmp	r1, r3
 80092c4:	f843 cc04 	str.w	ip, [r3, #-4]
 80092c8:	d8d8      	bhi.n	800927c <__gethex+0x3b8>
 80092ca:	68a3      	ldr	r3, [r4, #8]
 80092cc:	459b      	cmp	fp, r3
 80092ce:	db19      	blt.n	8009304 <__gethex+0x440>
 80092d0:	6861      	ldr	r1, [r4, #4]
 80092d2:	ee18 0a10 	vmov	r0, s16
 80092d6:	3101      	adds	r1, #1
 80092d8:	f000 f928 	bl	800952c <_Balloc>
 80092dc:	4681      	mov	r9, r0
 80092de:	b918      	cbnz	r0, 80092e8 <__gethex+0x424>
 80092e0:	4b1a      	ldr	r3, [pc, #104]	; (800934c <__gethex+0x488>)
 80092e2:	4602      	mov	r2, r0
 80092e4:	2184      	movs	r1, #132	; 0x84
 80092e6:	e6a8      	b.n	800903a <__gethex+0x176>
 80092e8:	6922      	ldr	r2, [r4, #16]
 80092ea:	3202      	adds	r2, #2
 80092ec:	f104 010c 	add.w	r1, r4, #12
 80092f0:	0092      	lsls	r2, r2, #2
 80092f2:	300c      	adds	r0, #12
 80092f4:	f000 f90c 	bl	8009510 <memcpy>
 80092f8:	4621      	mov	r1, r4
 80092fa:	ee18 0a10 	vmov	r0, s16
 80092fe:	f000 f955 	bl	80095ac <_Bfree>
 8009302:	464c      	mov	r4, r9
 8009304:	6923      	ldr	r3, [r4, #16]
 8009306:	1c5a      	adds	r2, r3, #1
 8009308:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800930c:	6122      	str	r2, [r4, #16]
 800930e:	2201      	movs	r2, #1
 8009310:	615a      	str	r2, [r3, #20]
 8009312:	e7bb      	b.n	800928c <__gethex+0x3c8>
 8009314:	6922      	ldr	r2, [r4, #16]
 8009316:	455a      	cmp	r2, fp
 8009318:	dd0b      	ble.n	8009332 <__gethex+0x46e>
 800931a:	2101      	movs	r1, #1
 800931c:	4620      	mov	r0, r4
 800931e:	f7ff fd69 	bl	8008df4 <rshift>
 8009322:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009326:	3501      	adds	r5, #1
 8009328:	42ab      	cmp	r3, r5
 800932a:	f6ff aed0 	blt.w	80090ce <__gethex+0x20a>
 800932e:	2701      	movs	r7, #1
 8009330:	e7c0      	b.n	80092b4 <__gethex+0x3f0>
 8009332:	f016 061f 	ands.w	r6, r6, #31
 8009336:	d0fa      	beq.n	800932e <__gethex+0x46a>
 8009338:	4453      	add	r3, sl
 800933a:	f1c6 0620 	rsb	r6, r6, #32
 800933e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009342:	f000 f9e5 	bl	8009710 <__hi0bits>
 8009346:	42b0      	cmp	r0, r6
 8009348:	dbe7      	blt.n	800931a <__gethex+0x456>
 800934a:	e7f0      	b.n	800932e <__gethex+0x46a>
 800934c:	0800b9c0 	.word	0x0800b9c0

08009350 <L_shift>:
 8009350:	f1c2 0208 	rsb	r2, r2, #8
 8009354:	0092      	lsls	r2, r2, #2
 8009356:	b570      	push	{r4, r5, r6, lr}
 8009358:	f1c2 0620 	rsb	r6, r2, #32
 800935c:	6843      	ldr	r3, [r0, #4]
 800935e:	6804      	ldr	r4, [r0, #0]
 8009360:	fa03 f506 	lsl.w	r5, r3, r6
 8009364:	432c      	orrs	r4, r5
 8009366:	40d3      	lsrs	r3, r2
 8009368:	6004      	str	r4, [r0, #0]
 800936a:	f840 3f04 	str.w	r3, [r0, #4]!
 800936e:	4288      	cmp	r0, r1
 8009370:	d3f4      	bcc.n	800935c <L_shift+0xc>
 8009372:	bd70      	pop	{r4, r5, r6, pc}

08009374 <__match>:
 8009374:	b530      	push	{r4, r5, lr}
 8009376:	6803      	ldr	r3, [r0, #0]
 8009378:	3301      	adds	r3, #1
 800937a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800937e:	b914      	cbnz	r4, 8009386 <__match+0x12>
 8009380:	6003      	str	r3, [r0, #0]
 8009382:	2001      	movs	r0, #1
 8009384:	bd30      	pop	{r4, r5, pc}
 8009386:	f813 2b01 	ldrb.w	r2, [r3], #1
 800938a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800938e:	2d19      	cmp	r5, #25
 8009390:	bf98      	it	ls
 8009392:	3220      	addls	r2, #32
 8009394:	42a2      	cmp	r2, r4
 8009396:	d0f0      	beq.n	800937a <__match+0x6>
 8009398:	2000      	movs	r0, #0
 800939a:	e7f3      	b.n	8009384 <__match+0x10>

0800939c <__hexnan>:
 800939c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a0:	680b      	ldr	r3, [r1, #0]
 80093a2:	115e      	asrs	r6, r3, #5
 80093a4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80093a8:	f013 031f 	ands.w	r3, r3, #31
 80093ac:	b087      	sub	sp, #28
 80093ae:	bf18      	it	ne
 80093b0:	3604      	addne	r6, #4
 80093b2:	2500      	movs	r5, #0
 80093b4:	1f37      	subs	r7, r6, #4
 80093b6:	4690      	mov	r8, r2
 80093b8:	6802      	ldr	r2, [r0, #0]
 80093ba:	9301      	str	r3, [sp, #4]
 80093bc:	4682      	mov	sl, r0
 80093be:	f846 5c04 	str.w	r5, [r6, #-4]
 80093c2:	46b9      	mov	r9, r7
 80093c4:	463c      	mov	r4, r7
 80093c6:	9502      	str	r5, [sp, #8]
 80093c8:	46ab      	mov	fp, r5
 80093ca:	7851      	ldrb	r1, [r2, #1]
 80093cc:	1c53      	adds	r3, r2, #1
 80093ce:	9303      	str	r3, [sp, #12]
 80093d0:	b341      	cbz	r1, 8009424 <__hexnan+0x88>
 80093d2:	4608      	mov	r0, r1
 80093d4:	9205      	str	r2, [sp, #20]
 80093d6:	9104      	str	r1, [sp, #16]
 80093d8:	f7ff fd5e 	bl	8008e98 <__hexdig_fun>
 80093dc:	2800      	cmp	r0, #0
 80093de:	d14f      	bne.n	8009480 <__hexnan+0xe4>
 80093e0:	9904      	ldr	r1, [sp, #16]
 80093e2:	9a05      	ldr	r2, [sp, #20]
 80093e4:	2920      	cmp	r1, #32
 80093e6:	d818      	bhi.n	800941a <__hexnan+0x7e>
 80093e8:	9b02      	ldr	r3, [sp, #8]
 80093ea:	459b      	cmp	fp, r3
 80093ec:	dd13      	ble.n	8009416 <__hexnan+0x7a>
 80093ee:	454c      	cmp	r4, r9
 80093f0:	d206      	bcs.n	8009400 <__hexnan+0x64>
 80093f2:	2d07      	cmp	r5, #7
 80093f4:	dc04      	bgt.n	8009400 <__hexnan+0x64>
 80093f6:	462a      	mov	r2, r5
 80093f8:	4649      	mov	r1, r9
 80093fa:	4620      	mov	r0, r4
 80093fc:	f7ff ffa8 	bl	8009350 <L_shift>
 8009400:	4544      	cmp	r4, r8
 8009402:	d950      	bls.n	80094a6 <__hexnan+0x10a>
 8009404:	2300      	movs	r3, #0
 8009406:	f1a4 0904 	sub.w	r9, r4, #4
 800940a:	f844 3c04 	str.w	r3, [r4, #-4]
 800940e:	f8cd b008 	str.w	fp, [sp, #8]
 8009412:	464c      	mov	r4, r9
 8009414:	461d      	mov	r5, r3
 8009416:	9a03      	ldr	r2, [sp, #12]
 8009418:	e7d7      	b.n	80093ca <__hexnan+0x2e>
 800941a:	2929      	cmp	r1, #41	; 0x29
 800941c:	d156      	bne.n	80094cc <__hexnan+0x130>
 800941e:	3202      	adds	r2, #2
 8009420:	f8ca 2000 	str.w	r2, [sl]
 8009424:	f1bb 0f00 	cmp.w	fp, #0
 8009428:	d050      	beq.n	80094cc <__hexnan+0x130>
 800942a:	454c      	cmp	r4, r9
 800942c:	d206      	bcs.n	800943c <__hexnan+0xa0>
 800942e:	2d07      	cmp	r5, #7
 8009430:	dc04      	bgt.n	800943c <__hexnan+0xa0>
 8009432:	462a      	mov	r2, r5
 8009434:	4649      	mov	r1, r9
 8009436:	4620      	mov	r0, r4
 8009438:	f7ff ff8a 	bl	8009350 <L_shift>
 800943c:	4544      	cmp	r4, r8
 800943e:	d934      	bls.n	80094aa <__hexnan+0x10e>
 8009440:	f1a8 0204 	sub.w	r2, r8, #4
 8009444:	4623      	mov	r3, r4
 8009446:	f853 1b04 	ldr.w	r1, [r3], #4
 800944a:	f842 1f04 	str.w	r1, [r2, #4]!
 800944e:	429f      	cmp	r7, r3
 8009450:	d2f9      	bcs.n	8009446 <__hexnan+0xaa>
 8009452:	1b3b      	subs	r3, r7, r4
 8009454:	f023 0303 	bic.w	r3, r3, #3
 8009458:	3304      	adds	r3, #4
 800945a:	3401      	adds	r4, #1
 800945c:	3e03      	subs	r6, #3
 800945e:	42b4      	cmp	r4, r6
 8009460:	bf88      	it	hi
 8009462:	2304      	movhi	r3, #4
 8009464:	4443      	add	r3, r8
 8009466:	2200      	movs	r2, #0
 8009468:	f843 2b04 	str.w	r2, [r3], #4
 800946c:	429f      	cmp	r7, r3
 800946e:	d2fb      	bcs.n	8009468 <__hexnan+0xcc>
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	b91b      	cbnz	r3, 800947c <__hexnan+0xe0>
 8009474:	4547      	cmp	r7, r8
 8009476:	d127      	bne.n	80094c8 <__hexnan+0x12c>
 8009478:	2301      	movs	r3, #1
 800947a:	603b      	str	r3, [r7, #0]
 800947c:	2005      	movs	r0, #5
 800947e:	e026      	b.n	80094ce <__hexnan+0x132>
 8009480:	3501      	adds	r5, #1
 8009482:	2d08      	cmp	r5, #8
 8009484:	f10b 0b01 	add.w	fp, fp, #1
 8009488:	dd06      	ble.n	8009498 <__hexnan+0xfc>
 800948a:	4544      	cmp	r4, r8
 800948c:	d9c3      	bls.n	8009416 <__hexnan+0x7a>
 800948e:	2300      	movs	r3, #0
 8009490:	f844 3c04 	str.w	r3, [r4, #-4]
 8009494:	2501      	movs	r5, #1
 8009496:	3c04      	subs	r4, #4
 8009498:	6822      	ldr	r2, [r4, #0]
 800949a:	f000 000f 	and.w	r0, r0, #15
 800949e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80094a2:	6022      	str	r2, [r4, #0]
 80094a4:	e7b7      	b.n	8009416 <__hexnan+0x7a>
 80094a6:	2508      	movs	r5, #8
 80094a8:	e7b5      	b.n	8009416 <__hexnan+0x7a>
 80094aa:	9b01      	ldr	r3, [sp, #4]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d0df      	beq.n	8009470 <__hexnan+0xd4>
 80094b0:	f04f 32ff 	mov.w	r2, #4294967295
 80094b4:	f1c3 0320 	rsb	r3, r3, #32
 80094b8:	fa22 f303 	lsr.w	r3, r2, r3
 80094bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80094c0:	401a      	ands	r2, r3
 80094c2:	f846 2c04 	str.w	r2, [r6, #-4]
 80094c6:	e7d3      	b.n	8009470 <__hexnan+0xd4>
 80094c8:	3f04      	subs	r7, #4
 80094ca:	e7d1      	b.n	8009470 <__hexnan+0xd4>
 80094cc:	2004      	movs	r0, #4
 80094ce:	b007      	add	sp, #28
 80094d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080094d4 <_localeconv_r>:
 80094d4:	4800      	ldr	r0, [pc, #0]	; (80094d8 <_localeconv_r+0x4>)
 80094d6:	4770      	bx	lr
 80094d8:	2000020c 	.word	0x2000020c

080094dc <malloc>:
 80094dc:	4b02      	ldr	r3, [pc, #8]	; (80094e8 <malloc+0xc>)
 80094de:	4601      	mov	r1, r0
 80094e0:	6818      	ldr	r0, [r3, #0]
 80094e2:	f000 bd67 	b.w	8009fb4 <_malloc_r>
 80094e6:	bf00      	nop
 80094e8:	200000b4 	.word	0x200000b4

080094ec <__ascii_mbtowc>:
 80094ec:	b082      	sub	sp, #8
 80094ee:	b901      	cbnz	r1, 80094f2 <__ascii_mbtowc+0x6>
 80094f0:	a901      	add	r1, sp, #4
 80094f2:	b142      	cbz	r2, 8009506 <__ascii_mbtowc+0x1a>
 80094f4:	b14b      	cbz	r3, 800950a <__ascii_mbtowc+0x1e>
 80094f6:	7813      	ldrb	r3, [r2, #0]
 80094f8:	600b      	str	r3, [r1, #0]
 80094fa:	7812      	ldrb	r2, [r2, #0]
 80094fc:	1e10      	subs	r0, r2, #0
 80094fe:	bf18      	it	ne
 8009500:	2001      	movne	r0, #1
 8009502:	b002      	add	sp, #8
 8009504:	4770      	bx	lr
 8009506:	4610      	mov	r0, r2
 8009508:	e7fb      	b.n	8009502 <__ascii_mbtowc+0x16>
 800950a:	f06f 0001 	mvn.w	r0, #1
 800950e:	e7f8      	b.n	8009502 <__ascii_mbtowc+0x16>

08009510 <memcpy>:
 8009510:	440a      	add	r2, r1
 8009512:	4291      	cmp	r1, r2
 8009514:	f100 33ff 	add.w	r3, r0, #4294967295
 8009518:	d100      	bne.n	800951c <memcpy+0xc>
 800951a:	4770      	bx	lr
 800951c:	b510      	push	{r4, lr}
 800951e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009522:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009526:	4291      	cmp	r1, r2
 8009528:	d1f9      	bne.n	800951e <memcpy+0xe>
 800952a:	bd10      	pop	{r4, pc}

0800952c <_Balloc>:
 800952c:	b570      	push	{r4, r5, r6, lr}
 800952e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009530:	4604      	mov	r4, r0
 8009532:	460d      	mov	r5, r1
 8009534:	b976      	cbnz	r6, 8009554 <_Balloc+0x28>
 8009536:	2010      	movs	r0, #16
 8009538:	f7ff ffd0 	bl	80094dc <malloc>
 800953c:	4602      	mov	r2, r0
 800953e:	6260      	str	r0, [r4, #36]	; 0x24
 8009540:	b920      	cbnz	r0, 800954c <_Balloc+0x20>
 8009542:	4b18      	ldr	r3, [pc, #96]	; (80095a4 <_Balloc+0x78>)
 8009544:	4818      	ldr	r0, [pc, #96]	; (80095a8 <_Balloc+0x7c>)
 8009546:	2166      	movs	r1, #102	; 0x66
 8009548:	f000 ff40 	bl	800a3cc <__assert_func>
 800954c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009550:	6006      	str	r6, [r0, #0]
 8009552:	60c6      	str	r6, [r0, #12]
 8009554:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009556:	68f3      	ldr	r3, [r6, #12]
 8009558:	b183      	cbz	r3, 800957c <_Balloc+0x50>
 800955a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009562:	b9b8      	cbnz	r0, 8009594 <_Balloc+0x68>
 8009564:	2101      	movs	r1, #1
 8009566:	fa01 f605 	lsl.w	r6, r1, r5
 800956a:	1d72      	adds	r2, r6, #5
 800956c:	0092      	lsls	r2, r2, #2
 800956e:	4620      	mov	r0, r4
 8009570:	f000 fc9d 	bl	8009eae <_calloc_r>
 8009574:	b160      	cbz	r0, 8009590 <_Balloc+0x64>
 8009576:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800957a:	e00e      	b.n	800959a <_Balloc+0x6e>
 800957c:	2221      	movs	r2, #33	; 0x21
 800957e:	2104      	movs	r1, #4
 8009580:	4620      	mov	r0, r4
 8009582:	f000 fc94 	bl	8009eae <_calloc_r>
 8009586:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009588:	60f0      	str	r0, [r6, #12]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d1e4      	bne.n	800955a <_Balloc+0x2e>
 8009590:	2000      	movs	r0, #0
 8009592:	bd70      	pop	{r4, r5, r6, pc}
 8009594:	6802      	ldr	r2, [r0, #0]
 8009596:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800959a:	2300      	movs	r3, #0
 800959c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80095a0:	e7f7      	b.n	8009592 <_Balloc+0x66>
 80095a2:	bf00      	nop
 80095a4:	0800b94e 	.word	0x0800b94e
 80095a8:	0800ba4c 	.word	0x0800ba4c

080095ac <_Bfree>:
 80095ac:	b570      	push	{r4, r5, r6, lr}
 80095ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80095b0:	4605      	mov	r5, r0
 80095b2:	460c      	mov	r4, r1
 80095b4:	b976      	cbnz	r6, 80095d4 <_Bfree+0x28>
 80095b6:	2010      	movs	r0, #16
 80095b8:	f7ff ff90 	bl	80094dc <malloc>
 80095bc:	4602      	mov	r2, r0
 80095be:	6268      	str	r0, [r5, #36]	; 0x24
 80095c0:	b920      	cbnz	r0, 80095cc <_Bfree+0x20>
 80095c2:	4b09      	ldr	r3, [pc, #36]	; (80095e8 <_Bfree+0x3c>)
 80095c4:	4809      	ldr	r0, [pc, #36]	; (80095ec <_Bfree+0x40>)
 80095c6:	218a      	movs	r1, #138	; 0x8a
 80095c8:	f000 ff00 	bl	800a3cc <__assert_func>
 80095cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095d0:	6006      	str	r6, [r0, #0]
 80095d2:	60c6      	str	r6, [r0, #12]
 80095d4:	b13c      	cbz	r4, 80095e6 <_Bfree+0x3a>
 80095d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80095d8:	6862      	ldr	r2, [r4, #4]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80095e0:	6021      	str	r1, [r4, #0]
 80095e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80095e6:	bd70      	pop	{r4, r5, r6, pc}
 80095e8:	0800b94e 	.word	0x0800b94e
 80095ec:	0800ba4c 	.word	0x0800ba4c

080095f0 <__multadd>:
 80095f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095f4:	690d      	ldr	r5, [r1, #16]
 80095f6:	4607      	mov	r7, r0
 80095f8:	460c      	mov	r4, r1
 80095fa:	461e      	mov	r6, r3
 80095fc:	f101 0c14 	add.w	ip, r1, #20
 8009600:	2000      	movs	r0, #0
 8009602:	f8dc 3000 	ldr.w	r3, [ip]
 8009606:	b299      	uxth	r1, r3
 8009608:	fb02 6101 	mla	r1, r2, r1, r6
 800960c:	0c1e      	lsrs	r6, r3, #16
 800960e:	0c0b      	lsrs	r3, r1, #16
 8009610:	fb02 3306 	mla	r3, r2, r6, r3
 8009614:	b289      	uxth	r1, r1
 8009616:	3001      	adds	r0, #1
 8009618:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800961c:	4285      	cmp	r5, r0
 800961e:	f84c 1b04 	str.w	r1, [ip], #4
 8009622:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009626:	dcec      	bgt.n	8009602 <__multadd+0x12>
 8009628:	b30e      	cbz	r6, 800966e <__multadd+0x7e>
 800962a:	68a3      	ldr	r3, [r4, #8]
 800962c:	42ab      	cmp	r3, r5
 800962e:	dc19      	bgt.n	8009664 <__multadd+0x74>
 8009630:	6861      	ldr	r1, [r4, #4]
 8009632:	4638      	mov	r0, r7
 8009634:	3101      	adds	r1, #1
 8009636:	f7ff ff79 	bl	800952c <_Balloc>
 800963a:	4680      	mov	r8, r0
 800963c:	b928      	cbnz	r0, 800964a <__multadd+0x5a>
 800963e:	4602      	mov	r2, r0
 8009640:	4b0c      	ldr	r3, [pc, #48]	; (8009674 <__multadd+0x84>)
 8009642:	480d      	ldr	r0, [pc, #52]	; (8009678 <__multadd+0x88>)
 8009644:	21b5      	movs	r1, #181	; 0xb5
 8009646:	f000 fec1 	bl	800a3cc <__assert_func>
 800964a:	6922      	ldr	r2, [r4, #16]
 800964c:	3202      	adds	r2, #2
 800964e:	f104 010c 	add.w	r1, r4, #12
 8009652:	0092      	lsls	r2, r2, #2
 8009654:	300c      	adds	r0, #12
 8009656:	f7ff ff5b 	bl	8009510 <memcpy>
 800965a:	4621      	mov	r1, r4
 800965c:	4638      	mov	r0, r7
 800965e:	f7ff ffa5 	bl	80095ac <_Bfree>
 8009662:	4644      	mov	r4, r8
 8009664:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009668:	3501      	adds	r5, #1
 800966a:	615e      	str	r6, [r3, #20]
 800966c:	6125      	str	r5, [r4, #16]
 800966e:	4620      	mov	r0, r4
 8009670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009674:	0800b9c0 	.word	0x0800b9c0
 8009678:	0800ba4c 	.word	0x0800ba4c

0800967c <__s2b>:
 800967c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009680:	460c      	mov	r4, r1
 8009682:	4615      	mov	r5, r2
 8009684:	461f      	mov	r7, r3
 8009686:	2209      	movs	r2, #9
 8009688:	3308      	adds	r3, #8
 800968a:	4606      	mov	r6, r0
 800968c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009690:	2100      	movs	r1, #0
 8009692:	2201      	movs	r2, #1
 8009694:	429a      	cmp	r2, r3
 8009696:	db09      	blt.n	80096ac <__s2b+0x30>
 8009698:	4630      	mov	r0, r6
 800969a:	f7ff ff47 	bl	800952c <_Balloc>
 800969e:	b940      	cbnz	r0, 80096b2 <__s2b+0x36>
 80096a0:	4602      	mov	r2, r0
 80096a2:	4b19      	ldr	r3, [pc, #100]	; (8009708 <__s2b+0x8c>)
 80096a4:	4819      	ldr	r0, [pc, #100]	; (800970c <__s2b+0x90>)
 80096a6:	21ce      	movs	r1, #206	; 0xce
 80096a8:	f000 fe90 	bl	800a3cc <__assert_func>
 80096ac:	0052      	lsls	r2, r2, #1
 80096ae:	3101      	adds	r1, #1
 80096b0:	e7f0      	b.n	8009694 <__s2b+0x18>
 80096b2:	9b08      	ldr	r3, [sp, #32]
 80096b4:	6143      	str	r3, [r0, #20]
 80096b6:	2d09      	cmp	r5, #9
 80096b8:	f04f 0301 	mov.w	r3, #1
 80096bc:	6103      	str	r3, [r0, #16]
 80096be:	dd16      	ble.n	80096ee <__s2b+0x72>
 80096c0:	f104 0909 	add.w	r9, r4, #9
 80096c4:	46c8      	mov	r8, r9
 80096c6:	442c      	add	r4, r5
 80096c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80096cc:	4601      	mov	r1, r0
 80096ce:	3b30      	subs	r3, #48	; 0x30
 80096d0:	220a      	movs	r2, #10
 80096d2:	4630      	mov	r0, r6
 80096d4:	f7ff ff8c 	bl	80095f0 <__multadd>
 80096d8:	45a0      	cmp	r8, r4
 80096da:	d1f5      	bne.n	80096c8 <__s2b+0x4c>
 80096dc:	f1a5 0408 	sub.w	r4, r5, #8
 80096e0:	444c      	add	r4, r9
 80096e2:	1b2d      	subs	r5, r5, r4
 80096e4:	1963      	adds	r3, r4, r5
 80096e6:	42bb      	cmp	r3, r7
 80096e8:	db04      	blt.n	80096f4 <__s2b+0x78>
 80096ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ee:	340a      	adds	r4, #10
 80096f0:	2509      	movs	r5, #9
 80096f2:	e7f6      	b.n	80096e2 <__s2b+0x66>
 80096f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80096f8:	4601      	mov	r1, r0
 80096fa:	3b30      	subs	r3, #48	; 0x30
 80096fc:	220a      	movs	r2, #10
 80096fe:	4630      	mov	r0, r6
 8009700:	f7ff ff76 	bl	80095f0 <__multadd>
 8009704:	e7ee      	b.n	80096e4 <__s2b+0x68>
 8009706:	bf00      	nop
 8009708:	0800b9c0 	.word	0x0800b9c0
 800970c:	0800ba4c 	.word	0x0800ba4c

08009710 <__hi0bits>:
 8009710:	0c03      	lsrs	r3, r0, #16
 8009712:	041b      	lsls	r3, r3, #16
 8009714:	b9d3      	cbnz	r3, 800974c <__hi0bits+0x3c>
 8009716:	0400      	lsls	r0, r0, #16
 8009718:	2310      	movs	r3, #16
 800971a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800971e:	bf04      	itt	eq
 8009720:	0200      	lsleq	r0, r0, #8
 8009722:	3308      	addeq	r3, #8
 8009724:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009728:	bf04      	itt	eq
 800972a:	0100      	lsleq	r0, r0, #4
 800972c:	3304      	addeq	r3, #4
 800972e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009732:	bf04      	itt	eq
 8009734:	0080      	lsleq	r0, r0, #2
 8009736:	3302      	addeq	r3, #2
 8009738:	2800      	cmp	r0, #0
 800973a:	db05      	blt.n	8009748 <__hi0bits+0x38>
 800973c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009740:	f103 0301 	add.w	r3, r3, #1
 8009744:	bf08      	it	eq
 8009746:	2320      	moveq	r3, #32
 8009748:	4618      	mov	r0, r3
 800974a:	4770      	bx	lr
 800974c:	2300      	movs	r3, #0
 800974e:	e7e4      	b.n	800971a <__hi0bits+0xa>

08009750 <__lo0bits>:
 8009750:	6803      	ldr	r3, [r0, #0]
 8009752:	f013 0207 	ands.w	r2, r3, #7
 8009756:	4601      	mov	r1, r0
 8009758:	d00b      	beq.n	8009772 <__lo0bits+0x22>
 800975a:	07da      	lsls	r2, r3, #31
 800975c:	d423      	bmi.n	80097a6 <__lo0bits+0x56>
 800975e:	0798      	lsls	r0, r3, #30
 8009760:	bf49      	itett	mi
 8009762:	085b      	lsrmi	r3, r3, #1
 8009764:	089b      	lsrpl	r3, r3, #2
 8009766:	2001      	movmi	r0, #1
 8009768:	600b      	strmi	r3, [r1, #0]
 800976a:	bf5c      	itt	pl
 800976c:	600b      	strpl	r3, [r1, #0]
 800976e:	2002      	movpl	r0, #2
 8009770:	4770      	bx	lr
 8009772:	b298      	uxth	r0, r3
 8009774:	b9a8      	cbnz	r0, 80097a2 <__lo0bits+0x52>
 8009776:	0c1b      	lsrs	r3, r3, #16
 8009778:	2010      	movs	r0, #16
 800977a:	b2da      	uxtb	r2, r3
 800977c:	b90a      	cbnz	r2, 8009782 <__lo0bits+0x32>
 800977e:	3008      	adds	r0, #8
 8009780:	0a1b      	lsrs	r3, r3, #8
 8009782:	071a      	lsls	r2, r3, #28
 8009784:	bf04      	itt	eq
 8009786:	091b      	lsreq	r3, r3, #4
 8009788:	3004      	addeq	r0, #4
 800978a:	079a      	lsls	r2, r3, #30
 800978c:	bf04      	itt	eq
 800978e:	089b      	lsreq	r3, r3, #2
 8009790:	3002      	addeq	r0, #2
 8009792:	07da      	lsls	r2, r3, #31
 8009794:	d403      	bmi.n	800979e <__lo0bits+0x4e>
 8009796:	085b      	lsrs	r3, r3, #1
 8009798:	f100 0001 	add.w	r0, r0, #1
 800979c:	d005      	beq.n	80097aa <__lo0bits+0x5a>
 800979e:	600b      	str	r3, [r1, #0]
 80097a0:	4770      	bx	lr
 80097a2:	4610      	mov	r0, r2
 80097a4:	e7e9      	b.n	800977a <__lo0bits+0x2a>
 80097a6:	2000      	movs	r0, #0
 80097a8:	4770      	bx	lr
 80097aa:	2020      	movs	r0, #32
 80097ac:	4770      	bx	lr
	...

080097b0 <__i2b>:
 80097b0:	b510      	push	{r4, lr}
 80097b2:	460c      	mov	r4, r1
 80097b4:	2101      	movs	r1, #1
 80097b6:	f7ff feb9 	bl	800952c <_Balloc>
 80097ba:	4602      	mov	r2, r0
 80097bc:	b928      	cbnz	r0, 80097ca <__i2b+0x1a>
 80097be:	4b05      	ldr	r3, [pc, #20]	; (80097d4 <__i2b+0x24>)
 80097c0:	4805      	ldr	r0, [pc, #20]	; (80097d8 <__i2b+0x28>)
 80097c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80097c6:	f000 fe01 	bl	800a3cc <__assert_func>
 80097ca:	2301      	movs	r3, #1
 80097cc:	6144      	str	r4, [r0, #20]
 80097ce:	6103      	str	r3, [r0, #16]
 80097d0:	bd10      	pop	{r4, pc}
 80097d2:	bf00      	nop
 80097d4:	0800b9c0 	.word	0x0800b9c0
 80097d8:	0800ba4c 	.word	0x0800ba4c

080097dc <__multiply>:
 80097dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e0:	4691      	mov	r9, r2
 80097e2:	690a      	ldr	r2, [r1, #16]
 80097e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	bfb8      	it	lt
 80097ec:	460b      	movlt	r3, r1
 80097ee:	460c      	mov	r4, r1
 80097f0:	bfbc      	itt	lt
 80097f2:	464c      	movlt	r4, r9
 80097f4:	4699      	movlt	r9, r3
 80097f6:	6927      	ldr	r7, [r4, #16]
 80097f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80097fc:	68a3      	ldr	r3, [r4, #8]
 80097fe:	6861      	ldr	r1, [r4, #4]
 8009800:	eb07 060a 	add.w	r6, r7, sl
 8009804:	42b3      	cmp	r3, r6
 8009806:	b085      	sub	sp, #20
 8009808:	bfb8      	it	lt
 800980a:	3101      	addlt	r1, #1
 800980c:	f7ff fe8e 	bl	800952c <_Balloc>
 8009810:	b930      	cbnz	r0, 8009820 <__multiply+0x44>
 8009812:	4602      	mov	r2, r0
 8009814:	4b44      	ldr	r3, [pc, #272]	; (8009928 <__multiply+0x14c>)
 8009816:	4845      	ldr	r0, [pc, #276]	; (800992c <__multiply+0x150>)
 8009818:	f240 115d 	movw	r1, #349	; 0x15d
 800981c:	f000 fdd6 	bl	800a3cc <__assert_func>
 8009820:	f100 0514 	add.w	r5, r0, #20
 8009824:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009828:	462b      	mov	r3, r5
 800982a:	2200      	movs	r2, #0
 800982c:	4543      	cmp	r3, r8
 800982e:	d321      	bcc.n	8009874 <__multiply+0x98>
 8009830:	f104 0314 	add.w	r3, r4, #20
 8009834:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009838:	f109 0314 	add.w	r3, r9, #20
 800983c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009840:	9202      	str	r2, [sp, #8]
 8009842:	1b3a      	subs	r2, r7, r4
 8009844:	3a15      	subs	r2, #21
 8009846:	f022 0203 	bic.w	r2, r2, #3
 800984a:	3204      	adds	r2, #4
 800984c:	f104 0115 	add.w	r1, r4, #21
 8009850:	428f      	cmp	r7, r1
 8009852:	bf38      	it	cc
 8009854:	2204      	movcc	r2, #4
 8009856:	9201      	str	r2, [sp, #4]
 8009858:	9a02      	ldr	r2, [sp, #8]
 800985a:	9303      	str	r3, [sp, #12]
 800985c:	429a      	cmp	r2, r3
 800985e:	d80c      	bhi.n	800987a <__multiply+0x9e>
 8009860:	2e00      	cmp	r6, #0
 8009862:	dd03      	ble.n	800986c <__multiply+0x90>
 8009864:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009868:	2b00      	cmp	r3, #0
 800986a:	d05a      	beq.n	8009922 <__multiply+0x146>
 800986c:	6106      	str	r6, [r0, #16]
 800986e:	b005      	add	sp, #20
 8009870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009874:	f843 2b04 	str.w	r2, [r3], #4
 8009878:	e7d8      	b.n	800982c <__multiply+0x50>
 800987a:	f8b3 a000 	ldrh.w	sl, [r3]
 800987e:	f1ba 0f00 	cmp.w	sl, #0
 8009882:	d024      	beq.n	80098ce <__multiply+0xf2>
 8009884:	f104 0e14 	add.w	lr, r4, #20
 8009888:	46a9      	mov	r9, r5
 800988a:	f04f 0c00 	mov.w	ip, #0
 800988e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009892:	f8d9 1000 	ldr.w	r1, [r9]
 8009896:	fa1f fb82 	uxth.w	fp, r2
 800989a:	b289      	uxth	r1, r1
 800989c:	fb0a 110b 	mla	r1, sl, fp, r1
 80098a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80098a4:	f8d9 2000 	ldr.w	r2, [r9]
 80098a8:	4461      	add	r1, ip
 80098aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80098ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80098b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80098b6:	b289      	uxth	r1, r1
 80098b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80098bc:	4577      	cmp	r7, lr
 80098be:	f849 1b04 	str.w	r1, [r9], #4
 80098c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80098c6:	d8e2      	bhi.n	800988e <__multiply+0xb2>
 80098c8:	9a01      	ldr	r2, [sp, #4]
 80098ca:	f845 c002 	str.w	ip, [r5, r2]
 80098ce:	9a03      	ldr	r2, [sp, #12]
 80098d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80098d4:	3304      	adds	r3, #4
 80098d6:	f1b9 0f00 	cmp.w	r9, #0
 80098da:	d020      	beq.n	800991e <__multiply+0x142>
 80098dc:	6829      	ldr	r1, [r5, #0]
 80098de:	f104 0c14 	add.w	ip, r4, #20
 80098e2:	46ae      	mov	lr, r5
 80098e4:	f04f 0a00 	mov.w	sl, #0
 80098e8:	f8bc b000 	ldrh.w	fp, [ip]
 80098ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80098f0:	fb09 220b 	mla	r2, r9, fp, r2
 80098f4:	4492      	add	sl, r2
 80098f6:	b289      	uxth	r1, r1
 80098f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80098fc:	f84e 1b04 	str.w	r1, [lr], #4
 8009900:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009904:	f8be 1000 	ldrh.w	r1, [lr]
 8009908:	0c12      	lsrs	r2, r2, #16
 800990a:	fb09 1102 	mla	r1, r9, r2, r1
 800990e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009912:	4567      	cmp	r7, ip
 8009914:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009918:	d8e6      	bhi.n	80098e8 <__multiply+0x10c>
 800991a:	9a01      	ldr	r2, [sp, #4]
 800991c:	50a9      	str	r1, [r5, r2]
 800991e:	3504      	adds	r5, #4
 8009920:	e79a      	b.n	8009858 <__multiply+0x7c>
 8009922:	3e01      	subs	r6, #1
 8009924:	e79c      	b.n	8009860 <__multiply+0x84>
 8009926:	bf00      	nop
 8009928:	0800b9c0 	.word	0x0800b9c0
 800992c:	0800ba4c 	.word	0x0800ba4c

08009930 <__pow5mult>:
 8009930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009934:	4615      	mov	r5, r2
 8009936:	f012 0203 	ands.w	r2, r2, #3
 800993a:	4606      	mov	r6, r0
 800993c:	460f      	mov	r7, r1
 800993e:	d007      	beq.n	8009950 <__pow5mult+0x20>
 8009940:	4c25      	ldr	r4, [pc, #148]	; (80099d8 <__pow5mult+0xa8>)
 8009942:	3a01      	subs	r2, #1
 8009944:	2300      	movs	r3, #0
 8009946:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800994a:	f7ff fe51 	bl	80095f0 <__multadd>
 800994e:	4607      	mov	r7, r0
 8009950:	10ad      	asrs	r5, r5, #2
 8009952:	d03d      	beq.n	80099d0 <__pow5mult+0xa0>
 8009954:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009956:	b97c      	cbnz	r4, 8009978 <__pow5mult+0x48>
 8009958:	2010      	movs	r0, #16
 800995a:	f7ff fdbf 	bl	80094dc <malloc>
 800995e:	4602      	mov	r2, r0
 8009960:	6270      	str	r0, [r6, #36]	; 0x24
 8009962:	b928      	cbnz	r0, 8009970 <__pow5mult+0x40>
 8009964:	4b1d      	ldr	r3, [pc, #116]	; (80099dc <__pow5mult+0xac>)
 8009966:	481e      	ldr	r0, [pc, #120]	; (80099e0 <__pow5mult+0xb0>)
 8009968:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800996c:	f000 fd2e 	bl	800a3cc <__assert_func>
 8009970:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009974:	6004      	str	r4, [r0, #0]
 8009976:	60c4      	str	r4, [r0, #12]
 8009978:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800997c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009980:	b94c      	cbnz	r4, 8009996 <__pow5mult+0x66>
 8009982:	f240 2171 	movw	r1, #625	; 0x271
 8009986:	4630      	mov	r0, r6
 8009988:	f7ff ff12 	bl	80097b0 <__i2b>
 800998c:	2300      	movs	r3, #0
 800998e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009992:	4604      	mov	r4, r0
 8009994:	6003      	str	r3, [r0, #0]
 8009996:	f04f 0900 	mov.w	r9, #0
 800999a:	07eb      	lsls	r3, r5, #31
 800999c:	d50a      	bpl.n	80099b4 <__pow5mult+0x84>
 800999e:	4639      	mov	r1, r7
 80099a0:	4622      	mov	r2, r4
 80099a2:	4630      	mov	r0, r6
 80099a4:	f7ff ff1a 	bl	80097dc <__multiply>
 80099a8:	4639      	mov	r1, r7
 80099aa:	4680      	mov	r8, r0
 80099ac:	4630      	mov	r0, r6
 80099ae:	f7ff fdfd 	bl	80095ac <_Bfree>
 80099b2:	4647      	mov	r7, r8
 80099b4:	106d      	asrs	r5, r5, #1
 80099b6:	d00b      	beq.n	80099d0 <__pow5mult+0xa0>
 80099b8:	6820      	ldr	r0, [r4, #0]
 80099ba:	b938      	cbnz	r0, 80099cc <__pow5mult+0x9c>
 80099bc:	4622      	mov	r2, r4
 80099be:	4621      	mov	r1, r4
 80099c0:	4630      	mov	r0, r6
 80099c2:	f7ff ff0b 	bl	80097dc <__multiply>
 80099c6:	6020      	str	r0, [r4, #0]
 80099c8:	f8c0 9000 	str.w	r9, [r0]
 80099cc:	4604      	mov	r4, r0
 80099ce:	e7e4      	b.n	800999a <__pow5mult+0x6a>
 80099d0:	4638      	mov	r0, r7
 80099d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099d6:	bf00      	nop
 80099d8:	0800bb98 	.word	0x0800bb98
 80099dc:	0800b94e 	.word	0x0800b94e
 80099e0:	0800ba4c 	.word	0x0800ba4c

080099e4 <__lshift>:
 80099e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099e8:	460c      	mov	r4, r1
 80099ea:	6849      	ldr	r1, [r1, #4]
 80099ec:	6923      	ldr	r3, [r4, #16]
 80099ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80099f2:	68a3      	ldr	r3, [r4, #8]
 80099f4:	4607      	mov	r7, r0
 80099f6:	4691      	mov	r9, r2
 80099f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80099fc:	f108 0601 	add.w	r6, r8, #1
 8009a00:	42b3      	cmp	r3, r6
 8009a02:	db0b      	blt.n	8009a1c <__lshift+0x38>
 8009a04:	4638      	mov	r0, r7
 8009a06:	f7ff fd91 	bl	800952c <_Balloc>
 8009a0a:	4605      	mov	r5, r0
 8009a0c:	b948      	cbnz	r0, 8009a22 <__lshift+0x3e>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	4b2a      	ldr	r3, [pc, #168]	; (8009abc <__lshift+0xd8>)
 8009a12:	482b      	ldr	r0, [pc, #172]	; (8009ac0 <__lshift+0xdc>)
 8009a14:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009a18:	f000 fcd8 	bl	800a3cc <__assert_func>
 8009a1c:	3101      	adds	r1, #1
 8009a1e:	005b      	lsls	r3, r3, #1
 8009a20:	e7ee      	b.n	8009a00 <__lshift+0x1c>
 8009a22:	2300      	movs	r3, #0
 8009a24:	f100 0114 	add.w	r1, r0, #20
 8009a28:	f100 0210 	add.w	r2, r0, #16
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	4553      	cmp	r3, sl
 8009a30:	db37      	blt.n	8009aa2 <__lshift+0xbe>
 8009a32:	6920      	ldr	r0, [r4, #16]
 8009a34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a38:	f104 0314 	add.w	r3, r4, #20
 8009a3c:	f019 091f 	ands.w	r9, r9, #31
 8009a40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009a48:	d02f      	beq.n	8009aaa <__lshift+0xc6>
 8009a4a:	f1c9 0e20 	rsb	lr, r9, #32
 8009a4e:	468a      	mov	sl, r1
 8009a50:	f04f 0c00 	mov.w	ip, #0
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	fa02 f209 	lsl.w	r2, r2, r9
 8009a5a:	ea42 020c 	orr.w	r2, r2, ip
 8009a5e:	f84a 2b04 	str.w	r2, [sl], #4
 8009a62:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a66:	4298      	cmp	r0, r3
 8009a68:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009a6c:	d8f2      	bhi.n	8009a54 <__lshift+0x70>
 8009a6e:	1b03      	subs	r3, r0, r4
 8009a70:	3b15      	subs	r3, #21
 8009a72:	f023 0303 	bic.w	r3, r3, #3
 8009a76:	3304      	adds	r3, #4
 8009a78:	f104 0215 	add.w	r2, r4, #21
 8009a7c:	4290      	cmp	r0, r2
 8009a7e:	bf38      	it	cc
 8009a80:	2304      	movcc	r3, #4
 8009a82:	f841 c003 	str.w	ip, [r1, r3]
 8009a86:	f1bc 0f00 	cmp.w	ip, #0
 8009a8a:	d001      	beq.n	8009a90 <__lshift+0xac>
 8009a8c:	f108 0602 	add.w	r6, r8, #2
 8009a90:	3e01      	subs	r6, #1
 8009a92:	4638      	mov	r0, r7
 8009a94:	612e      	str	r6, [r5, #16]
 8009a96:	4621      	mov	r1, r4
 8009a98:	f7ff fd88 	bl	80095ac <_Bfree>
 8009a9c:	4628      	mov	r0, r5
 8009a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aa2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	e7c1      	b.n	8009a2e <__lshift+0x4a>
 8009aaa:	3904      	subs	r1, #4
 8009aac:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ab0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ab4:	4298      	cmp	r0, r3
 8009ab6:	d8f9      	bhi.n	8009aac <__lshift+0xc8>
 8009ab8:	e7ea      	b.n	8009a90 <__lshift+0xac>
 8009aba:	bf00      	nop
 8009abc:	0800b9c0 	.word	0x0800b9c0
 8009ac0:	0800ba4c 	.word	0x0800ba4c

08009ac4 <__mcmp>:
 8009ac4:	b530      	push	{r4, r5, lr}
 8009ac6:	6902      	ldr	r2, [r0, #16]
 8009ac8:	690c      	ldr	r4, [r1, #16]
 8009aca:	1b12      	subs	r2, r2, r4
 8009acc:	d10e      	bne.n	8009aec <__mcmp+0x28>
 8009ace:	f100 0314 	add.w	r3, r0, #20
 8009ad2:	3114      	adds	r1, #20
 8009ad4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ad8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009adc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ae0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ae4:	42a5      	cmp	r5, r4
 8009ae6:	d003      	beq.n	8009af0 <__mcmp+0x2c>
 8009ae8:	d305      	bcc.n	8009af6 <__mcmp+0x32>
 8009aea:	2201      	movs	r2, #1
 8009aec:	4610      	mov	r0, r2
 8009aee:	bd30      	pop	{r4, r5, pc}
 8009af0:	4283      	cmp	r3, r0
 8009af2:	d3f3      	bcc.n	8009adc <__mcmp+0x18>
 8009af4:	e7fa      	b.n	8009aec <__mcmp+0x28>
 8009af6:	f04f 32ff 	mov.w	r2, #4294967295
 8009afa:	e7f7      	b.n	8009aec <__mcmp+0x28>

08009afc <__mdiff>:
 8009afc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b00:	460c      	mov	r4, r1
 8009b02:	4606      	mov	r6, r0
 8009b04:	4611      	mov	r1, r2
 8009b06:	4620      	mov	r0, r4
 8009b08:	4690      	mov	r8, r2
 8009b0a:	f7ff ffdb 	bl	8009ac4 <__mcmp>
 8009b0e:	1e05      	subs	r5, r0, #0
 8009b10:	d110      	bne.n	8009b34 <__mdiff+0x38>
 8009b12:	4629      	mov	r1, r5
 8009b14:	4630      	mov	r0, r6
 8009b16:	f7ff fd09 	bl	800952c <_Balloc>
 8009b1a:	b930      	cbnz	r0, 8009b2a <__mdiff+0x2e>
 8009b1c:	4b3a      	ldr	r3, [pc, #232]	; (8009c08 <__mdiff+0x10c>)
 8009b1e:	4602      	mov	r2, r0
 8009b20:	f240 2132 	movw	r1, #562	; 0x232
 8009b24:	4839      	ldr	r0, [pc, #228]	; (8009c0c <__mdiff+0x110>)
 8009b26:	f000 fc51 	bl	800a3cc <__assert_func>
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b34:	bfa4      	itt	ge
 8009b36:	4643      	movge	r3, r8
 8009b38:	46a0      	movge	r8, r4
 8009b3a:	4630      	mov	r0, r6
 8009b3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009b40:	bfa6      	itte	ge
 8009b42:	461c      	movge	r4, r3
 8009b44:	2500      	movge	r5, #0
 8009b46:	2501      	movlt	r5, #1
 8009b48:	f7ff fcf0 	bl	800952c <_Balloc>
 8009b4c:	b920      	cbnz	r0, 8009b58 <__mdiff+0x5c>
 8009b4e:	4b2e      	ldr	r3, [pc, #184]	; (8009c08 <__mdiff+0x10c>)
 8009b50:	4602      	mov	r2, r0
 8009b52:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009b56:	e7e5      	b.n	8009b24 <__mdiff+0x28>
 8009b58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009b5c:	6926      	ldr	r6, [r4, #16]
 8009b5e:	60c5      	str	r5, [r0, #12]
 8009b60:	f104 0914 	add.w	r9, r4, #20
 8009b64:	f108 0514 	add.w	r5, r8, #20
 8009b68:	f100 0e14 	add.w	lr, r0, #20
 8009b6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009b70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009b74:	f108 0210 	add.w	r2, r8, #16
 8009b78:	46f2      	mov	sl, lr
 8009b7a:	2100      	movs	r1, #0
 8009b7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009b80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009b84:	fa1f f883 	uxth.w	r8, r3
 8009b88:	fa11 f18b 	uxtah	r1, r1, fp
 8009b8c:	0c1b      	lsrs	r3, r3, #16
 8009b8e:	eba1 0808 	sub.w	r8, r1, r8
 8009b92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009b96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009b9a:	fa1f f888 	uxth.w	r8, r8
 8009b9e:	1419      	asrs	r1, r3, #16
 8009ba0:	454e      	cmp	r6, r9
 8009ba2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009ba6:	f84a 3b04 	str.w	r3, [sl], #4
 8009baa:	d8e7      	bhi.n	8009b7c <__mdiff+0x80>
 8009bac:	1b33      	subs	r3, r6, r4
 8009bae:	3b15      	subs	r3, #21
 8009bb0:	f023 0303 	bic.w	r3, r3, #3
 8009bb4:	3304      	adds	r3, #4
 8009bb6:	3415      	adds	r4, #21
 8009bb8:	42a6      	cmp	r6, r4
 8009bba:	bf38      	it	cc
 8009bbc:	2304      	movcc	r3, #4
 8009bbe:	441d      	add	r5, r3
 8009bc0:	4473      	add	r3, lr
 8009bc2:	469e      	mov	lr, r3
 8009bc4:	462e      	mov	r6, r5
 8009bc6:	4566      	cmp	r6, ip
 8009bc8:	d30e      	bcc.n	8009be8 <__mdiff+0xec>
 8009bca:	f10c 0203 	add.w	r2, ip, #3
 8009bce:	1b52      	subs	r2, r2, r5
 8009bd0:	f022 0203 	bic.w	r2, r2, #3
 8009bd4:	3d03      	subs	r5, #3
 8009bd6:	45ac      	cmp	ip, r5
 8009bd8:	bf38      	it	cc
 8009bda:	2200      	movcc	r2, #0
 8009bdc:	441a      	add	r2, r3
 8009bde:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009be2:	b17b      	cbz	r3, 8009c04 <__mdiff+0x108>
 8009be4:	6107      	str	r7, [r0, #16]
 8009be6:	e7a3      	b.n	8009b30 <__mdiff+0x34>
 8009be8:	f856 8b04 	ldr.w	r8, [r6], #4
 8009bec:	fa11 f288 	uxtah	r2, r1, r8
 8009bf0:	1414      	asrs	r4, r2, #16
 8009bf2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009bf6:	b292      	uxth	r2, r2
 8009bf8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009bfc:	f84e 2b04 	str.w	r2, [lr], #4
 8009c00:	1421      	asrs	r1, r4, #16
 8009c02:	e7e0      	b.n	8009bc6 <__mdiff+0xca>
 8009c04:	3f01      	subs	r7, #1
 8009c06:	e7ea      	b.n	8009bde <__mdiff+0xe2>
 8009c08:	0800b9c0 	.word	0x0800b9c0
 8009c0c:	0800ba4c 	.word	0x0800ba4c

08009c10 <__ulp>:
 8009c10:	b082      	sub	sp, #8
 8009c12:	ed8d 0b00 	vstr	d0, [sp]
 8009c16:	9b01      	ldr	r3, [sp, #4]
 8009c18:	4912      	ldr	r1, [pc, #72]	; (8009c64 <__ulp+0x54>)
 8009c1a:	4019      	ands	r1, r3
 8009c1c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009c20:	2900      	cmp	r1, #0
 8009c22:	dd05      	ble.n	8009c30 <__ulp+0x20>
 8009c24:	2200      	movs	r2, #0
 8009c26:	460b      	mov	r3, r1
 8009c28:	ec43 2b10 	vmov	d0, r2, r3
 8009c2c:	b002      	add	sp, #8
 8009c2e:	4770      	bx	lr
 8009c30:	4249      	negs	r1, r1
 8009c32:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009c36:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009c3a:	f04f 0200 	mov.w	r2, #0
 8009c3e:	f04f 0300 	mov.w	r3, #0
 8009c42:	da04      	bge.n	8009c4e <__ulp+0x3e>
 8009c44:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009c48:	fa41 f300 	asr.w	r3, r1, r0
 8009c4c:	e7ec      	b.n	8009c28 <__ulp+0x18>
 8009c4e:	f1a0 0114 	sub.w	r1, r0, #20
 8009c52:	291e      	cmp	r1, #30
 8009c54:	bfda      	itte	le
 8009c56:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009c5a:	fa20 f101 	lsrle.w	r1, r0, r1
 8009c5e:	2101      	movgt	r1, #1
 8009c60:	460a      	mov	r2, r1
 8009c62:	e7e1      	b.n	8009c28 <__ulp+0x18>
 8009c64:	7ff00000 	.word	0x7ff00000

08009c68 <__b2d>:
 8009c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c6a:	6905      	ldr	r5, [r0, #16]
 8009c6c:	f100 0714 	add.w	r7, r0, #20
 8009c70:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009c74:	1f2e      	subs	r6, r5, #4
 8009c76:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	f7ff fd48 	bl	8009710 <__hi0bits>
 8009c80:	f1c0 0320 	rsb	r3, r0, #32
 8009c84:	280a      	cmp	r0, #10
 8009c86:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009d04 <__b2d+0x9c>
 8009c8a:	600b      	str	r3, [r1, #0]
 8009c8c:	dc14      	bgt.n	8009cb8 <__b2d+0x50>
 8009c8e:	f1c0 0e0b 	rsb	lr, r0, #11
 8009c92:	fa24 f10e 	lsr.w	r1, r4, lr
 8009c96:	42b7      	cmp	r7, r6
 8009c98:	ea41 030c 	orr.w	r3, r1, ip
 8009c9c:	bf34      	ite	cc
 8009c9e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009ca2:	2100      	movcs	r1, #0
 8009ca4:	3015      	adds	r0, #21
 8009ca6:	fa04 f000 	lsl.w	r0, r4, r0
 8009caa:	fa21 f10e 	lsr.w	r1, r1, lr
 8009cae:	ea40 0201 	orr.w	r2, r0, r1
 8009cb2:	ec43 2b10 	vmov	d0, r2, r3
 8009cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cb8:	42b7      	cmp	r7, r6
 8009cba:	bf3a      	itte	cc
 8009cbc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009cc0:	f1a5 0608 	subcc.w	r6, r5, #8
 8009cc4:	2100      	movcs	r1, #0
 8009cc6:	380b      	subs	r0, #11
 8009cc8:	d017      	beq.n	8009cfa <__b2d+0x92>
 8009cca:	f1c0 0c20 	rsb	ip, r0, #32
 8009cce:	fa04 f500 	lsl.w	r5, r4, r0
 8009cd2:	42be      	cmp	r6, r7
 8009cd4:	fa21 f40c 	lsr.w	r4, r1, ip
 8009cd8:	ea45 0504 	orr.w	r5, r5, r4
 8009cdc:	bf8c      	ite	hi
 8009cde:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009ce2:	2400      	movls	r4, #0
 8009ce4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009ce8:	fa01 f000 	lsl.w	r0, r1, r0
 8009cec:	fa24 f40c 	lsr.w	r4, r4, ip
 8009cf0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009cf4:	ea40 0204 	orr.w	r2, r0, r4
 8009cf8:	e7db      	b.n	8009cb2 <__b2d+0x4a>
 8009cfa:	ea44 030c 	orr.w	r3, r4, ip
 8009cfe:	460a      	mov	r2, r1
 8009d00:	e7d7      	b.n	8009cb2 <__b2d+0x4a>
 8009d02:	bf00      	nop
 8009d04:	3ff00000 	.word	0x3ff00000

08009d08 <__d2b>:
 8009d08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d0c:	4689      	mov	r9, r1
 8009d0e:	2101      	movs	r1, #1
 8009d10:	ec57 6b10 	vmov	r6, r7, d0
 8009d14:	4690      	mov	r8, r2
 8009d16:	f7ff fc09 	bl	800952c <_Balloc>
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	b930      	cbnz	r0, 8009d2c <__d2b+0x24>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	4b25      	ldr	r3, [pc, #148]	; (8009db8 <__d2b+0xb0>)
 8009d22:	4826      	ldr	r0, [pc, #152]	; (8009dbc <__d2b+0xb4>)
 8009d24:	f240 310a 	movw	r1, #778	; 0x30a
 8009d28:	f000 fb50 	bl	800a3cc <__assert_func>
 8009d2c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009d30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d34:	bb35      	cbnz	r5, 8009d84 <__d2b+0x7c>
 8009d36:	2e00      	cmp	r6, #0
 8009d38:	9301      	str	r3, [sp, #4]
 8009d3a:	d028      	beq.n	8009d8e <__d2b+0x86>
 8009d3c:	4668      	mov	r0, sp
 8009d3e:	9600      	str	r6, [sp, #0]
 8009d40:	f7ff fd06 	bl	8009750 <__lo0bits>
 8009d44:	9900      	ldr	r1, [sp, #0]
 8009d46:	b300      	cbz	r0, 8009d8a <__d2b+0x82>
 8009d48:	9a01      	ldr	r2, [sp, #4]
 8009d4a:	f1c0 0320 	rsb	r3, r0, #32
 8009d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d52:	430b      	orrs	r3, r1
 8009d54:	40c2      	lsrs	r2, r0
 8009d56:	6163      	str	r3, [r4, #20]
 8009d58:	9201      	str	r2, [sp, #4]
 8009d5a:	9b01      	ldr	r3, [sp, #4]
 8009d5c:	61a3      	str	r3, [r4, #24]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	bf14      	ite	ne
 8009d62:	2202      	movne	r2, #2
 8009d64:	2201      	moveq	r2, #1
 8009d66:	6122      	str	r2, [r4, #16]
 8009d68:	b1d5      	cbz	r5, 8009da0 <__d2b+0x98>
 8009d6a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009d6e:	4405      	add	r5, r0
 8009d70:	f8c9 5000 	str.w	r5, [r9]
 8009d74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d78:	f8c8 0000 	str.w	r0, [r8]
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	b003      	add	sp, #12
 8009d80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d88:	e7d5      	b.n	8009d36 <__d2b+0x2e>
 8009d8a:	6161      	str	r1, [r4, #20]
 8009d8c:	e7e5      	b.n	8009d5a <__d2b+0x52>
 8009d8e:	a801      	add	r0, sp, #4
 8009d90:	f7ff fcde 	bl	8009750 <__lo0bits>
 8009d94:	9b01      	ldr	r3, [sp, #4]
 8009d96:	6163      	str	r3, [r4, #20]
 8009d98:	2201      	movs	r2, #1
 8009d9a:	6122      	str	r2, [r4, #16]
 8009d9c:	3020      	adds	r0, #32
 8009d9e:	e7e3      	b.n	8009d68 <__d2b+0x60>
 8009da0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009da4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009da8:	f8c9 0000 	str.w	r0, [r9]
 8009dac:	6918      	ldr	r0, [r3, #16]
 8009dae:	f7ff fcaf 	bl	8009710 <__hi0bits>
 8009db2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009db6:	e7df      	b.n	8009d78 <__d2b+0x70>
 8009db8:	0800b9c0 	.word	0x0800b9c0
 8009dbc:	0800ba4c 	.word	0x0800ba4c

08009dc0 <__ratio>:
 8009dc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc4:	4688      	mov	r8, r1
 8009dc6:	4669      	mov	r1, sp
 8009dc8:	4681      	mov	r9, r0
 8009dca:	f7ff ff4d 	bl	8009c68 <__b2d>
 8009dce:	a901      	add	r1, sp, #4
 8009dd0:	4640      	mov	r0, r8
 8009dd2:	ec55 4b10 	vmov	r4, r5, d0
 8009dd6:	f7ff ff47 	bl	8009c68 <__b2d>
 8009dda:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009dde:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009de2:	eba3 0c02 	sub.w	ip, r3, r2
 8009de6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009dea:	1a9b      	subs	r3, r3, r2
 8009dec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009df0:	ec51 0b10 	vmov	r0, r1, d0
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	bfd6      	itet	le
 8009df8:	460a      	movle	r2, r1
 8009dfa:	462a      	movgt	r2, r5
 8009dfc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009e00:	468b      	mov	fp, r1
 8009e02:	462f      	mov	r7, r5
 8009e04:	bfd4      	ite	le
 8009e06:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009e0a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009e0e:	4620      	mov	r0, r4
 8009e10:	ee10 2a10 	vmov	r2, s0
 8009e14:	465b      	mov	r3, fp
 8009e16:	4639      	mov	r1, r7
 8009e18:	f7f6 fd20 	bl	800085c <__aeabi_ddiv>
 8009e1c:	ec41 0b10 	vmov	d0, r0, r1
 8009e20:	b003      	add	sp, #12
 8009e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e26 <__copybits>:
 8009e26:	3901      	subs	r1, #1
 8009e28:	b570      	push	{r4, r5, r6, lr}
 8009e2a:	1149      	asrs	r1, r1, #5
 8009e2c:	6914      	ldr	r4, [r2, #16]
 8009e2e:	3101      	adds	r1, #1
 8009e30:	f102 0314 	add.w	r3, r2, #20
 8009e34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009e38:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009e3c:	1f05      	subs	r5, r0, #4
 8009e3e:	42a3      	cmp	r3, r4
 8009e40:	d30c      	bcc.n	8009e5c <__copybits+0x36>
 8009e42:	1aa3      	subs	r3, r4, r2
 8009e44:	3b11      	subs	r3, #17
 8009e46:	f023 0303 	bic.w	r3, r3, #3
 8009e4a:	3211      	adds	r2, #17
 8009e4c:	42a2      	cmp	r2, r4
 8009e4e:	bf88      	it	hi
 8009e50:	2300      	movhi	r3, #0
 8009e52:	4418      	add	r0, r3
 8009e54:	2300      	movs	r3, #0
 8009e56:	4288      	cmp	r0, r1
 8009e58:	d305      	bcc.n	8009e66 <__copybits+0x40>
 8009e5a:	bd70      	pop	{r4, r5, r6, pc}
 8009e5c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009e60:	f845 6f04 	str.w	r6, [r5, #4]!
 8009e64:	e7eb      	b.n	8009e3e <__copybits+0x18>
 8009e66:	f840 3b04 	str.w	r3, [r0], #4
 8009e6a:	e7f4      	b.n	8009e56 <__copybits+0x30>

08009e6c <__any_on>:
 8009e6c:	f100 0214 	add.w	r2, r0, #20
 8009e70:	6900      	ldr	r0, [r0, #16]
 8009e72:	114b      	asrs	r3, r1, #5
 8009e74:	4298      	cmp	r0, r3
 8009e76:	b510      	push	{r4, lr}
 8009e78:	db11      	blt.n	8009e9e <__any_on+0x32>
 8009e7a:	dd0a      	ble.n	8009e92 <__any_on+0x26>
 8009e7c:	f011 011f 	ands.w	r1, r1, #31
 8009e80:	d007      	beq.n	8009e92 <__any_on+0x26>
 8009e82:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009e86:	fa24 f001 	lsr.w	r0, r4, r1
 8009e8a:	fa00 f101 	lsl.w	r1, r0, r1
 8009e8e:	428c      	cmp	r4, r1
 8009e90:	d10b      	bne.n	8009eaa <__any_on+0x3e>
 8009e92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d803      	bhi.n	8009ea2 <__any_on+0x36>
 8009e9a:	2000      	movs	r0, #0
 8009e9c:	bd10      	pop	{r4, pc}
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	e7f7      	b.n	8009e92 <__any_on+0x26>
 8009ea2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009ea6:	2900      	cmp	r1, #0
 8009ea8:	d0f5      	beq.n	8009e96 <__any_on+0x2a>
 8009eaa:	2001      	movs	r0, #1
 8009eac:	e7f6      	b.n	8009e9c <__any_on+0x30>

08009eae <_calloc_r>:
 8009eae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009eb0:	fba1 2402 	umull	r2, r4, r1, r2
 8009eb4:	b94c      	cbnz	r4, 8009eca <_calloc_r+0x1c>
 8009eb6:	4611      	mov	r1, r2
 8009eb8:	9201      	str	r2, [sp, #4]
 8009eba:	f000 f87b 	bl	8009fb4 <_malloc_r>
 8009ebe:	9a01      	ldr	r2, [sp, #4]
 8009ec0:	4605      	mov	r5, r0
 8009ec2:	b930      	cbnz	r0, 8009ed2 <_calloc_r+0x24>
 8009ec4:	4628      	mov	r0, r5
 8009ec6:	b003      	add	sp, #12
 8009ec8:	bd30      	pop	{r4, r5, pc}
 8009eca:	220c      	movs	r2, #12
 8009ecc:	6002      	str	r2, [r0, #0]
 8009ece:	2500      	movs	r5, #0
 8009ed0:	e7f8      	b.n	8009ec4 <_calloc_r+0x16>
 8009ed2:	4621      	mov	r1, r4
 8009ed4:	f7fc fbbe 	bl	8006654 <memset>
 8009ed8:	e7f4      	b.n	8009ec4 <_calloc_r+0x16>
	...

08009edc <_free_r>:
 8009edc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ede:	2900      	cmp	r1, #0
 8009ee0:	d044      	beq.n	8009f6c <_free_r+0x90>
 8009ee2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ee6:	9001      	str	r0, [sp, #4]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f1a1 0404 	sub.w	r4, r1, #4
 8009eee:	bfb8      	it	lt
 8009ef0:	18e4      	addlt	r4, r4, r3
 8009ef2:	f000 fab5 	bl	800a460 <__malloc_lock>
 8009ef6:	4a1e      	ldr	r2, [pc, #120]	; (8009f70 <_free_r+0x94>)
 8009ef8:	9801      	ldr	r0, [sp, #4]
 8009efa:	6813      	ldr	r3, [r2, #0]
 8009efc:	b933      	cbnz	r3, 8009f0c <_free_r+0x30>
 8009efe:	6063      	str	r3, [r4, #4]
 8009f00:	6014      	str	r4, [r2, #0]
 8009f02:	b003      	add	sp, #12
 8009f04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f08:	f000 bab0 	b.w	800a46c <__malloc_unlock>
 8009f0c:	42a3      	cmp	r3, r4
 8009f0e:	d908      	bls.n	8009f22 <_free_r+0x46>
 8009f10:	6825      	ldr	r5, [r4, #0]
 8009f12:	1961      	adds	r1, r4, r5
 8009f14:	428b      	cmp	r3, r1
 8009f16:	bf01      	itttt	eq
 8009f18:	6819      	ldreq	r1, [r3, #0]
 8009f1a:	685b      	ldreq	r3, [r3, #4]
 8009f1c:	1949      	addeq	r1, r1, r5
 8009f1e:	6021      	streq	r1, [r4, #0]
 8009f20:	e7ed      	b.n	8009efe <_free_r+0x22>
 8009f22:	461a      	mov	r2, r3
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	b10b      	cbz	r3, 8009f2c <_free_r+0x50>
 8009f28:	42a3      	cmp	r3, r4
 8009f2a:	d9fa      	bls.n	8009f22 <_free_r+0x46>
 8009f2c:	6811      	ldr	r1, [r2, #0]
 8009f2e:	1855      	adds	r5, r2, r1
 8009f30:	42a5      	cmp	r5, r4
 8009f32:	d10b      	bne.n	8009f4c <_free_r+0x70>
 8009f34:	6824      	ldr	r4, [r4, #0]
 8009f36:	4421      	add	r1, r4
 8009f38:	1854      	adds	r4, r2, r1
 8009f3a:	42a3      	cmp	r3, r4
 8009f3c:	6011      	str	r1, [r2, #0]
 8009f3e:	d1e0      	bne.n	8009f02 <_free_r+0x26>
 8009f40:	681c      	ldr	r4, [r3, #0]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	6053      	str	r3, [r2, #4]
 8009f46:	4421      	add	r1, r4
 8009f48:	6011      	str	r1, [r2, #0]
 8009f4a:	e7da      	b.n	8009f02 <_free_r+0x26>
 8009f4c:	d902      	bls.n	8009f54 <_free_r+0x78>
 8009f4e:	230c      	movs	r3, #12
 8009f50:	6003      	str	r3, [r0, #0]
 8009f52:	e7d6      	b.n	8009f02 <_free_r+0x26>
 8009f54:	6825      	ldr	r5, [r4, #0]
 8009f56:	1961      	adds	r1, r4, r5
 8009f58:	428b      	cmp	r3, r1
 8009f5a:	bf04      	itt	eq
 8009f5c:	6819      	ldreq	r1, [r3, #0]
 8009f5e:	685b      	ldreq	r3, [r3, #4]
 8009f60:	6063      	str	r3, [r4, #4]
 8009f62:	bf04      	itt	eq
 8009f64:	1949      	addeq	r1, r1, r5
 8009f66:	6021      	streq	r1, [r4, #0]
 8009f68:	6054      	str	r4, [r2, #4]
 8009f6a:	e7ca      	b.n	8009f02 <_free_r+0x26>
 8009f6c:	b003      	add	sp, #12
 8009f6e:	bd30      	pop	{r4, r5, pc}
 8009f70:	20000608 	.word	0x20000608

08009f74 <sbrk_aligned>:
 8009f74:	b570      	push	{r4, r5, r6, lr}
 8009f76:	4e0e      	ldr	r6, [pc, #56]	; (8009fb0 <sbrk_aligned+0x3c>)
 8009f78:	460c      	mov	r4, r1
 8009f7a:	6831      	ldr	r1, [r6, #0]
 8009f7c:	4605      	mov	r5, r0
 8009f7e:	b911      	cbnz	r1, 8009f86 <sbrk_aligned+0x12>
 8009f80:	f000 f9f2 	bl	800a368 <_sbrk_r>
 8009f84:	6030      	str	r0, [r6, #0]
 8009f86:	4621      	mov	r1, r4
 8009f88:	4628      	mov	r0, r5
 8009f8a:	f000 f9ed 	bl	800a368 <_sbrk_r>
 8009f8e:	1c43      	adds	r3, r0, #1
 8009f90:	d00a      	beq.n	8009fa8 <sbrk_aligned+0x34>
 8009f92:	1cc4      	adds	r4, r0, #3
 8009f94:	f024 0403 	bic.w	r4, r4, #3
 8009f98:	42a0      	cmp	r0, r4
 8009f9a:	d007      	beq.n	8009fac <sbrk_aligned+0x38>
 8009f9c:	1a21      	subs	r1, r4, r0
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	f000 f9e2 	bl	800a368 <_sbrk_r>
 8009fa4:	3001      	adds	r0, #1
 8009fa6:	d101      	bne.n	8009fac <sbrk_aligned+0x38>
 8009fa8:	f04f 34ff 	mov.w	r4, #4294967295
 8009fac:	4620      	mov	r0, r4
 8009fae:	bd70      	pop	{r4, r5, r6, pc}
 8009fb0:	2000060c 	.word	0x2000060c

08009fb4 <_malloc_r>:
 8009fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fb8:	1ccd      	adds	r5, r1, #3
 8009fba:	f025 0503 	bic.w	r5, r5, #3
 8009fbe:	3508      	adds	r5, #8
 8009fc0:	2d0c      	cmp	r5, #12
 8009fc2:	bf38      	it	cc
 8009fc4:	250c      	movcc	r5, #12
 8009fc6:	2d00      	cmp	r5, #0
 8009fc8:	4607      	mov	r7, r0
 8009fca:	db01      	blt.n	8009fd0 <_malloc_r+0x1c>
 8009fcc:	42a9      	cmp	r1, r5
 8009fce:	d905      	bls.n	8009fdc <_malloc_r+0x28>
 8009fd0:	230c      	movs	r3, #12
 8009fd2:	603b      	str	r3, [r7, #0]
 8009fd4:	2600      	movs	r6, #0
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fdc:	4e2e      	ldr	r6, [pc, #184]	; (800a098 <_malloc_r+0xe4>)
 8009fde:	f000 fa3f 	bl	800a460 <__malloc_lock>
 8009fe2:	6833      	ldr	r3, [r6, #0]
 8009fe4:	461c      	mov	r4, r3
 8009fe6:	bb34      	cbnz	r4, 800a036 <_malloc_r+0x82>
 8009fe8:	4629      	mov	r1, r5
 8009fea:	4638      	mov	r0, r7
 8009fec:	f7ff ffc2 	bl	8009f74 <sbrk_aligned>
 8009ff0:	1c43      	adds	r3, r0, #1
 8009ff2:	4604      	mov	r4, r0
 8009ff4:	d14d      	bne.n	800a092 <_malloc_r+0xde>
 8009ff6:	6834      	ldr	r4, [r6, #0]
 8009ff8:	4626      	mov	r6, r4
 8009ffa:	2e00      	cmp	r6, #0
 8009ffc:	d140      	bne.n	800a080 <_malloc_r+0xcc>
 8009ffe:	6823      	ldr	r3, [r4, #0]
 800a000:	4631      	mov	r1, r6
 800a002:	4638      	mov	r0, r7
 800a004:	eb04 0803 	add.w	r8, r4, r3
 800a008:	f000 f9ae 	bl	800a368 <_sbrk_r>
 800a00c:	4580      	cmp	r8, r0
 800a00e:	d13a      	bne.n	800a086 <_malloc_r+0xd2>
 800a010:	6821      	ldr	r1, [r4, #0]
 800a012:	3503      	adds	r5, #3
 800a014:	1a6d      	subs	r5, r5, r1
 800a016:	f025 0503 	bic.w	r5, r5, #3
 800a01a:	3508      	adds	r5, #8
 800a01c:	2d0c      	cmp	r5, #12
 800a01e:	bf38      	it	cc
 800a020:	250c      	movcc	r5, #12
 800a022:	4629      	mov	r1, r5
 800a024:	4638      	mov	r0, r7
 800a026:	f7ff ffa5 	bl	8009f74 <sbrk_aligned>
 800a02a:	3001      	adds	r0, #1
 800a02c:	d02b      	beq.n	800a086 <_malloc_r+0xd2>
 800a02e:	6823      	ldr	r3, [r4, #0]
 800a030:	442b      	add	r3, r5
 800a032:	6023      	str	r3, [r4, #0]
 800a034:	e00e      	b.n	800a054 <_malloc_r+0xa0>
 800a036:	6822      	ldr	r2, [r4, #0]
 800a038:	1b52      	subs	r2, r2, r5
 800a03a:	d41e      	bmi.n	800a07a <_malloc_r+0xc6>
 800a03c:	2a0b      	cmp	r2, #11
 800a03e:	d916      	bls.n	800a06e <_malloc_r+0xba>
 800a040:	1961      	adds	r1, r4, r5
 800a042:	42a3      	cmp	r3, r4
 800a044:	6025      	str	r5, [r4, #0]
 800a046:	bf18      	it	ne
 800a048:	6059      	strne	r1, [r3, #4]
 800a04a:	6863      	ldr	r3, [r4, #4]
 800a04c:	bf08      	it	eq
 800a04e:	6031      	streq	r1, [r6, #0]
 800a050:	5162      	str	r2, [r4, r5]
 800a052:	604b      	str	r3, [r1, #4]
 800a054:	4638      	mov	r0, r7
 800a056:	f104 060b 	add.w	r6, r4, #11
 800a05a:	f000 fa07 	bl	800a46c <__malloc_unlock>
 800a05e:	f026 0607 	bic.w	r6, r6, #7
 800a062:	1d23      	adds	r3, r4, #4
 800a064:	1af2      	subs	r2, r6, r3
 800a066:	d0b6      	beq.n	8009fd6 <_malloc_r+0x22>
 800a068:	1b9b      	subs	r3, r3, r6
 800a06a:	50a3      	str	r3, [r4, r2]
 800a06c:	e7b3      	b.n	8009fd6 <_malloc_r+0x22>
 800a06e:	6862      	ldr	r2, [r4, #4]
 800a070:	42a3      	cmp	r3, r4
 800a072:	bf0c      	ite	eq
 800a074:	6032      	streq	r2, [r6, #0]
 800a076:	605a      	strne	r2, [r3, #4]
 800a078:	e7ec      	b.n	800a054 <_malloc_r+0xa0>
 800a07a:	4623      	mov	r3, r4
 800a07c:	6864      	ldr	r4, [r4, #4]
 800a07e:	e7b2      	b.n	8009fe6 <_malloc_r+0x32>
 800a080:	4634      	mov	r4, r6
 800a082:	6876      	ldr	r6, [r6, #4]
 800a084:	e7b9      	b.n	8009ffa <_malloc_r+0x46>
 800a086:	230c      	movs	r3, #12
 800a088:	603b      	str	r3, [r7, #0]
 800a08a:	4638      	mov	r0, r7
 800a08c:	f000 f9ee 	bl	800a46c <__malloc_unlock>
 800a090:	e7a1      	b.n	8009fd6 <_malloc_r+0x22>
 800a092:	6025      	str	r5, [r4, #0]
 800a094:	e7de      	b.n	800a054 <_malloc_r+0xa0>
 800a096:	bf00      	nop
 800a098:	20000608 	.word	0x20000608

0800a09c <__ssputs_r>:
 800a09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a0:	688e      	ldr	r6, [r1, #8]
 800a0a2:	429e      	cmp	r6, r3
 800a0a4:	4682      	mov	sl, r0
 800a0a6:	460c      	mov	r4, r1
 800a0a8:	4690      	mov	r8, r2
 800a0aa:	461f      	mov	r7, r3
 800a0ac:	d838      	bhi.n	800a120 <__ssputs_r+0x84>
 800a0ae:	898a      	ldrh	r2, [r1, #12]
 800a0b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a0b4:	d032      	beq.n	800a11c <__ssputs_r+0x80>
 800a0b6:	6825      	ldr	r5, [r4, #0]
 800a0b8:	6909      	ldr	r1, [r1, #16]
 800a0ba:	eba5 0901 	sub.w	r9, r5, r1
 800a0be:	6965      	ldr	r5, [r4, #20]
 800a0c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	444b      	add	r3, r9
 800a0cc:	106d      	asrs	r5, r5, #1
 800a0ce:	429d      	cmp	r5, r3
 800a0d0:	bf38      	it	cc
 800a0d2:	461d      	movcc	r5, r3
 800a0d4:	0553      	lsls	r3, r2, #21
 800a0d6:	d531      	bpl.n	800a13c <__ssputs_r+0xa0>
 800a0d8:	4629      	mov	r1, r5
 800a0da:	f7ff ff6b 	bl	8009fb4 <_malloc_r>
 800a0de:	4606      	mov	r6, r0
 800a0e0:	b950      	cbnz	r0, 800a0f8 <__ssputs_r+0x5c>
 800a0e2:	230c      	movs	r3, #12
 800a0e4:	f8ca 3000 	str.w	r3, [sl]
 800a0e8:	89a3      	ldrh	r3, [r4, #12]
 800a0ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0ee:	81a3      	strh	r3, [r4, #12]
 800a0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0f8:	6921      	ldr	r1, [r4, #16]
 800a0fa:	464a      	mov	r2, r9
 800a0fc:	f7ff fa08 	bl	8009510 <memcpy>
 800a100:	89a3      	ldrh	r3, [r4, #12]
 800a102:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a10a:	81a3      	strh	r3, [r4, #12]
 800a10c:	6126      	str	r6, [r4, #16]
 800a10e:	6165      	str	r5, [r4, #20]
 800a110:	444e      	add	r6, r9
 800a112:	eba5 0509 	sub.w	r5, r5, r9
 800a116:	6026      	str	r6, [r4, #0]
 800a118:	60a5      	str	r5, [r4, #8]
 800a11a:	463e      	mov	r6, r7
 800a11c:	42be      	cmp	r6, r7
 800a11e:	d900      	bls.n	800a122 <__ssputs_r+0x86>
 800a120:	463e      	mov	r6, r7
 800a122:	6820      	ldr	r0, [r4, #0]
 800a124:	4632      	mov	r2, r6
 800a126:	4641      	mov	r1, r8
 800a128:	f000 f980 	bl	800a42c <memmove>
 800a12c:	68a3      	ldr	r3, [r4, #8]
 800a12e:	1b9b      	subs	r3, r3, r6
 800a130:	60a3      	str	r3, [r4, #8]
 800a132:	6823      	ldr	r3, [r4, #0]
 800a134:	4433      	add	r3, r6
 800a136:	6023      	str	r3, [r4, #0]
 800a138:	2000      	movs	r0, #0
 800a13a:	e7db      	b.n	800a0f4 <__ssputs_r+0x58>
 800a13c:	462a      	mov	r2, r5
 800a13e:	f000 f99b 	bl	800a478 <_realloc_r>
 800a142:	4606      	mov	r6, r0
 800a144:	2800      	cmp	r0, #0
 800a146:	d1e1      	bne.n	800a10c <__ssputs_r+0x70>
 800a148:	6921      	ldr	r1, [r4, #16]
 800a14a:	4650      	mov	r0, sl
 800a14c:	f7ff fec6 	bl	8009edc <_free_r>
 800a150:	e7c7      	b.n	800a0e2 <__ssputs_r+0x46>
	...

0800a154 <_svfiprintf_r>:
 800a154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a158:	4698      	mov	r8, r3
 800a15a:	898b      	ldrh	r3, [r1, #12]
 800a15c:	061b      	lsls	r3, r3, #24
 800a15e:	b09d      	sub	sp, #116	; 0x74
 800a160:	4607      	mov	r7, r0
 800a162:	460d      	mov	r5, r1
 800a164:	4614      	mov	r4, r2
 800a166:	d50e      	bpl.n	800a186 <_svfiprintf_r+0x32>
 800a168:	690b      	ldr	r3, [r1, #16]
 800a16a:	b963      	cbnz	r3, 800a186 <_svfiprintf_r+0x32>
 800a16c:	2140      	movs	r1, #64	; 0x40
 800a16e:	f7ff ff21 	bl	8009fb4 <_malloc_r>
 800a172:	6028      	str	r0, [r5, #0]
 800a174:	6128      	str	r0, [r5, #16]
 800a176:	b920      	cbnz	r0, 800a182 <_svfiprintf_r+0x2e>
 800a178:	230c      	movs	r3, #12
 800a17a:	603b      	str	r3, [r7, #0]
 800a17c:	f04f 30ff 	mov.w	r0, #4294967295
 800a180:	e0d1      	b.n	800a326 <_svfiprintf_r+0x1d2>
 800a182:	2340      	movs	r3, #64	; 0x40
 800a184:	616b      	str	r3, [r5, #20]
 800a186:	2300      	movs	r3, #0
 800a188:	9309      	str	r3, [sp, #36]	; 0x24
 800a18a:	2320      	movs	r3, #32
 800a18c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a190:	f8cd 800c 	str.w	r8, [sp, #12]
 800a194:	2330      	movs	r3, #48	; 0x30
 800a196:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a340 <_svfiprintf_r+0x1ec>
 800a19a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a19e:	f04f 0901 	mov.w	r9, #1
 800a1a2:	4623      	mov	r3, r4
 800a1a4:	469a      	mov	sl, r3
 800a1a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1aa:	b10a      	cbz	r2, 800a1b0 <_svfiprintf_r+0x5c>
 800a1ac:	2a25      	cmp	r2, #37	; 0x25
 800a1ae:	d1f9      	bne.n	800a1a4 <_svfiprintf_r+0x50>
 800a1b0:	ebba 0b04 	subs.w	fp, sl, r4
 800a1b4:	d00b      	beq.n	800a1ce <_svfiprintf_r+0x7a>
 800a1b6:	465b      	mov	r3, fp
 800a1b8:	4622      	mov	r2, r4
 800a1ba:	4629      	mov	r1, r5
 800a1bc:	4638      	mov	r0, r7
 800a1be:	f7ff ff6d 	bl	800a09c <__ssputs_r>
 800a1c2:	3001      	adds	r0, #1
 800a1c4:	f000 80aa 	beq.w	800a31c <_svfiprintf_r+0x1c8>
 800a1c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1ca:	445a      	add	r2, fp
 800a1cc:	9209      	str	r2, [sp, #36]	; 0x24
 800a1ce:	f89a 3000 	ldrb.w	r3, [sl]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	f000 80a2 	beq.w	800a31c <_svfiprintf_r+0x1c8>
 800a1d8:	2300      	movs	r3, #0
 800a1da:	f04f 32ff 	mov.w	r2, #4294967295
 800a1de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1e2:	f10a 0a01 	add.w	sl, sl, #1
 800a1e6:	9304      	str	r3, [sp, #16]
 800a1e8:	9307      	str	r3, [sp, #28]
 800a1ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1ee:	931a      	str	r3, [sp, #104]	; 0x68
 800a1f0:	4654      	mov	r4, sl
 800a1f2:	2205      	movs	r2, #5
 800a1f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1f8:	4851      	ldr	r0, [pc, #324]	; (800a340 <_svfiprintf_r+0x1ec>)
 800a1fa:	f7f5 fff9 	bl	80001f0 <memchr>
 800a1fe:	9a04      	ldr	r2, [sp, #16]
 800a200:	b9d8      	cbnz	r0, 800a23a <_svfiprintf_r+0xe6>
 800a202:	06d0      	lsls	r0, r2, #27
 800a204:	bf44      	itt	mi
 800a206:	2320      	movmi	r3, #32
 800a208:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a20c:	0711      	lsls	r1, r2, #28
 800a20e:	bf44      	itt	mi
 800a210:	232b      	movmi	r3, #43	; 0x2b
 800a212:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a216:	f89a 3000 	ldrb.w	r3, [sl]
 800a21a:	2b2a      	cmp	r3, #42	; 0x2a
 800a21c:	d015      	beq.n	800a24a <_svfiprintf_r+0xf6>
 800a21e:	9a07      	ldr	r2, [sp, #28]
 800a220:	4654      	mov	r4, sl
 800a222:	2000      	movs	r0, #0
 800a224:	f04f 0c0a 	mov.w	ip, #10
 800a228:	4621      	mov	r1, r4
 800a22a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a22e:	3b30      	subs	r3, #48	; 0x30
 800a230:	2b09      	cmp	r3, #9
 800a232:	d94e      	bls.n	800a2d2 <_svfiprintf_r+0x17e>
 800a234:	b1b0      	cbz	r0, 800a264 <_svfiprintf_r+0x110>
 800a236:	9207      	str	r2, [sp, #28]
 800a238:	e014      	b.n	800a264 <_svfiprintf_r+0x110>
 800a23a:	eba0 0308 	sub.w	r3, r0, r8
 800a23e:	fa09 f303 	lsl.w	r3, r9, r3
 800a242:	4313      	orrs	r3, r2
 800a244:	9304      	str	r3, [sp, #16]
 800a246:	46a2      	mov	sl, r4
 800a248:	e7d2      	b.n	800a1f0 <_svfiprintf_r+0x9c>
 800a24a:	9b03      	ldr	r3, [sp, #12]
 800a24c:	1d19      	adds	r1, r3, #4
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	9103      	str	r1, [sp, #12]
 800a252:	2b00      	cmp	r3, #0
 800a254:	bfbb      	ittet	lt
 800a256:	425b      	neglt	r3, r3
 800a258:	f042 0202 	orrlt.w	r2, r2, #2
 800a25c:	9307      	strge	r3, [sp, #28]
 800a25e:	9307      	strlt	r3, [sp, #28]
 800a260:	bfb8      	it	lt
 800a262:	9204      	strlt	r2, [sp, #16]
 800a264:	7823      	ldrb	r3, [r4, #0]
 800a266:	2b2e      	cmp	r3, #46	; 0x2e
 800a268:	d10c      	bne.n	800a284 <_svfiprintf_r+0x130>
 800a26a:	7863      	ldrb	r3, [r4, #1]
 800a26c:	2b2a      	cmp	r3, #42	; 0x2a
 800a26e:	d135      	bne.n	800a2dc <_svfiprintf_r+0x188>
 800a270:	9b03      	ldr	r3, [sp, #12]
 800a272:	1d1a      	adds	r2, r3, #4
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	9203      	str	r2, [sp, #12]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	bfb8      	it	lt
 800a27c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a280:	3402      	adds	r4, #2
 800a282:	9305      	str	r3, [sp, #20]
 800a284:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a350 <_svfiprintf_r+0x1fc>
 800a288:	7821      	ldrb	r1, [r4, #0]
 800a28a:	2203      	movs	r2, #3
 800a28c:	4650      	mov	r0, sl
 800a28e:	f7f5 ffaf 	bl	80001f0 <memchr>
 800a292:	b140      	cbz	r0, 800a2a6 <_svfiprintf_r+0x152>
 800a294:	2340      	movs	r3, #64	; 0x40
 800a296:	eba0 000a 	sub.w	r0, r0, sl
 800a29a:	fa03 f000 	lsl.w	r0, r3, r0
 800a29e:	9b04      	ldr	r3, [sp, #16]
 800a2a0:	4303      	orrs	r3, r0
 800a2a2:	3401      	adds	r4, #1
 800a2a4:	9304      	str	r3, [sp, #16]
 800a2a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2aa:	4826      	ldr	r0, [pc, #152]	; (800a344 <_svfiprintf_r+0x1f0>)
 800a2ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2b0:	2206      	movs	r2, #6
 800a2b2:	f7f5 ff9d 	bl	80001f0 <memchr>
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	d038      	beq.n	800a32c <_svfiprintf_r+0x1d8>
 800a2ba:	4b23      	ldr	r3, [pc, #140]	; (800a348 <_svfiprintf_r+0x1f4>)
 800a2bc:	bb1b      	cbnz	r3, 800a306 <_svfiprintf_r+0x1b2>
 800a2be:	9b03      	ldr	r3, [sp, #12]
 800a2c0:	3307      	adds	r3, #7
 800a2c2:	f023 0307 	bic.w	r3, r3, #7
 800a2c6:	3308      	adds	r3, #8
 800a2c8:	9303      	str	r3, [sp, #12]
 800a2ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2cc:	4433      	add	r3, r6
 800a2ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a2d0:	e767      	b.n	800a1a2 <_svfiprintf_r+0x4e>
 800a2d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2d6:	460c      	mov	r4, r1
 800a2d8:	2001      	movs	r0, #1
 800a2da:	e7a5      	b.n	800a228 <_svfiprintf_r+0xd4>
 800a2dc:	2300      	movs	r3, #0
 800a2de:	3401      	adds	r4, #1
 800a2e0:	9305      	str	r3, [sp, #20]
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	f04f 0c0a 	mov.w	ip, #10
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2ee:	3a30      	subs	r2, #48	; 0x30
 800a2f0:	2a09      	cmp	r2, #9
 800a2f2:	d903      	bls.n	800a2fc <_svfiprintf_r+0x1a8>
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d0c5      	beq.n	800a284 <_svfiprintf_r+0x130>
 800a2f8:	9105      	str	r1, [sp, #20]
 800a2fa:	e7c3      	b.n	800a284 <_svfiprintf_r+0x130>
 800a2fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a300:	4604      	mov	r4, r0
 800a302:	2301      	movs	r3, #1
 800a304:	e7f0      	b.n	800a2e8 <_svfiprintf_r+0x194>
 800a306:	ab03      	add	r3, sp, #12
 800a308:	9300      	str	r3, [sp, #0]
 800a30a:	462a      	mov	r2, r5
 800a30c:	4b0f      	ldr	r3, [pc, #60]	; (800a34c <_svfiprintf_r+0x1f8>)
 800a30e:	a904      	add	r1, sp, #16
 800a310:	4638      	mov	r0, r7
 800a312:	f7fc fa47 	bl	80067a4 <_printf_float>
 800a316:	1c42      	adds	r2, r0, #1
 800a318:	4606      	mov	r6, r0
 800a31a:	d1d6      	bne.n	800a2ca <_svfiprintf_r+0x176>
 800a31c:	89ab      	ldrh	r3, [r5, #12]
 800a31e:	065b      	lsls	r3, r3, #25
 800a320:	f53f af2c 	bmi.w	800a17c <_svfiprintf_r+0x28>
 800a324:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a326:	b01d      	add	sp, #116	; 0x74
 800a328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a32c:	ab03      	add	r3, sp, #12
 800a32e:	9300      	str	r3, [sp, #0]
 800a330:	462a      	mov	r2, r5
 800a332:	4b06      	ldr	r3, [pc, #24]	; (800a34c <_svfiprintf_r+0x1f8>)
 800a334:	a904      	add	r1, sp, #16
 800a336:	4638      	mov	r0, r7
 800a338:	f7fc fcd8 	bl	8006cec <_printf_i>
 800a33c:	e7eb      	b.n	800a316 <_svfiprintf_r+0x1c2>
 800a33e:	bf00      	nop
 800a340:	0800bba4 	.word	0x0800bba4
 800a344:	0800bbae 	.word	0x0800bbae
 800a348:	080067a5 	.word	0x080067a5
 800a34c:	0800a09d 	.word	0x0800a09d
 800a350:	0800bbaa 	.word	0x0800bbaa
 800a354:	00000000 	.word	0x00000000

0800a358 <nan>:
 800a358:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a360 <nan+0x8>
 800a35c:	4770      	bx	lr
 800a35e:	bf00      	nop
 800a360:	00000000 	.word	0x00000000
 800a364:	7ff80000 	.word	0x7ff80000

0800a368 <_sbrk_r>:
 800a368:	b538      	push	{r3, r4, r5, lr}
 800a36a:	4d06      	ldr	r5, [pc, #24]	; (800a384 <_sbrk_r+0x1c>)
 800a36c:	2300      	movs	r3, #0
 800a36e:	4604      	mov	r4, r0
 800a370:	4608      	mov	r0, r1
 800a372:	602b      	str	r3, [r5, #0]
 800a374:	f7f8 fc14 	bl	8002ba0 <_sbrk>
 800a378:	1c43      	adds	r3, r0, #1
 800a37a:	d102      	bne.n	800a382 <_sbrk_r+0x1a>
 800a37c:	682b      	ldr	r3, [r5, #0]
 800a37e:	b103      	cbz	r3, 800a382 <_sbrk_r+0x1a>
 800a380:	6023      	str	r3, [r4, #0]
 800a382:	bd38      	pop	{r3, r4, r5, pc}
 800a384:	20000610 	.word	0x20000610

0800a388 <strncmp>:
 800a388:	b510      	push	{r4, lr}
 800a38a:	b17a      	cbz	r2, 800a3ac <strncmp+0x24>
 800a38c:	4603      	mov	r3, r0
 800a38e:	3901      	subs	r1, #1
 800a390:	1884      	adds	r4, r0, r2
 800a392:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a396:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a39a:	4290      	cmp	r0, r2
 800a39c:	d101      	bne.n	800a3a2 <strncmp+0x1a>
 800a39e:	42a3      	cmp	r3, r4
 800a3a0:	d101      	bne.n	800a3a6 <strncmp+0x1e>
 800a3a2:	1a80      	subs	r0, r0, r2
 800a3a4:	bd10      	pop	{r4, pc}
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	d1f3      	bne.n	800a392 <strncmp+0xa>
 800a3aa:	e7fa      	b.n	800a3a2 <strncmp+0x1a>
 800a3ac:	4610      	mov	r0, r2
 800a3ae:	e7f9      	b.n	800a3a4 <strncmp+0x1c>

0800a3b0 <__ascii_wctomb>:
 800a3b0:	b149      	cbz	r1, 800a3c6 <__ascii_wctomb+0x16>
 800a3b2:	2aff      	cmp	r2, #255	; 0xff
 800a3b4:	bf85      	ittet	hi
 800a3b6:	238a      	movhi	r3, #138	; 0x8a
 800a3b8:	6003      	strhi	r3, [r0, #0]
 800a3ba:	700a      	strbls	r2, [r1, #0]
 800a3bc:	f04f 30ff 	movhi.w	r0, #4294967295
 800a3c0:	bf98      	it	ls
 800a3c2:	2001      	movls	r0, #1
 800a3c4:	4770      	bx	lr
 800a3c6:	4608      	mov	r0, r1
 800a3c8:	4770      	bx	lr
	...

0800a3cc <__assert_func>:
 800a3cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3ce:	4614      	mov	r4, r2
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	4b09      	ldr	r3, [pc, #36]	; (800a3f8 <__assert_func+0x2c>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4605      	mov	r5, r0
 800a3d8:	68d8      	ldr	r0, [r3, #12]
 800a3da:	b14c      	cbz	r4, 800a3f0 <__assert_func+0x24>
 800a3dc:	4b07      	ldr	r3, [pc, #28]	; (800a3fc <__assert_func+0x30>)
 800a3de:	9100      	str	r1, [sp, #0]
 800a3e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a3e4:	4906      	ldr	r1, [pc, #24]	; (800a400 <__assert_func+0x34>)
 800a3e6:	462b      	mov	r3, r5
 800a3e8:	f000 f80e 	bl	800a408 <fiprintf>
 800a3ec:	f000 fa8c 	bl	800a908 <abort>
 800a3f0:	4b04      	ldr	r3, [pc, #16]	; (800a404 <__assert_func+0x38>)
 800a3f2:	461c      	mov	r4, r3
 800a3f4:	e7f3      	b.n	800a3de <__assert_func+0x12>
 800a3f6:	bf00      	nop
 800a3f8:	200000b4 	.word	0x200000b4
 800a3fc:	0800bbb5 	.word	0x0800bbb5
 800a400:	0800bbc2 	.word	0x0800bbc2
 800a404:	0800bbf0 	.word	0x0800bbf0

0800a408 <fiprintf>:
 800a408:	b40e      	push	{r1, r2, r3}
 800a40a:	b503      	push	{r0, r1, lr}
 800a40c:	4601      	mov	r1, r0
 800a40e:	ab03      	add	r3, sp, #12
 800a410:	4805      	ldr	r0, [pc, #20]	; (800a428 <fiprintf+0x20>)
 800a412:	f853 2b04 	ldr.w	r2, [r3], #4
 800a416:	6800      	ldr	r0, [r0, #0]
 800a418:	9301      	str	r3, [sp, #4]
 800a41a:	f000 f885 	bl	800a528 <_vfiprintf_r>
 800a41e:	b002      	add	sp, #8
 800a420:	f85d eb04 	ldr.w	lr, [sp], #4
 800a424:	b003      	add	sp, #12
 800a426:	4770      	bx	lr
 800a428:	200000b4 	.word	0x200000b4

0800a42c <memmove>:
 800a42c:	4288      	cmp	r0, r1
 800a42e:	b510      	push	{r4, lr}
 800a430:	eb01 0402 	add.w	r4, r1, r2
 800a434:	d902      	bls.n	800a43c <memmove+0x10>
 800a436:	4284      	cmp	r4, r0
 800a438:	4623      	mov	r3, r4
 800a43a:	d807      	bhi.n	800a44c <memmove+0x20>
 800a43c:	1e43      	subs	r3, r0, #1
 800a43e:	42a1      	cmp	r1, r4
 800a440:	d008      	beq.n	800a454 <memmove+0x28>
 800a442:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a446:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a44a:	e7f8      	b.n	800a43e <memmove+0x12>
 800a44c:	4402      	add	r2, r0
 800a44e:	4601      	mov	r1, r0
 800a450:	428a      	cmp	r2, r1
 800a452:	d100      	bne.n	800a456 <memmove+0x2a>
 800a454:	bd10      	pop	{r4, pc}
 800a456:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a45a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a45e:	e7f7      	b.n	800a450 <memmove+0x24>

0800a460 <__malloc_lock>:
 800a460:	4801      	ldr	r0, [pc, #4]	; (800a468 <__malloc_lock+0x8>)
 800a462:	f000 bc11 	b.w	800ac88 <__retarget_lock_acquire_recursive>
 800a466:	bf00      	nop
 800a468:	20000614 	.word	0x20000614

0800a46c <__malloc_unlock>:
 800a46c:	4801      	ldr	r0, [pc, #4]	; (800a474 <__malloc_unlock+0x8>)
 800a46e:	f000 bc0c 	b.w	800ac8a <__retarget_lock_release_recursive>
 800a472:	bf00      	nop
 800a474:	20000614 	.word	0x20000614

0800a478 <_realloc_r>:
 800a478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a47c:	4680      	mov	r8, r0
 800a47e:	4614      	mov	r4, r2
 800a480:	460e      	mov	r6, r1
 800a482:	b921      	cbnz	r1, 800a48e <_realloc_r+0x16>
 800a484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a488:	4611      	mov	r1, r2
 800a48a:	f7ff bd93 	b.w	8009fb4 <_malloc_r>
 800a48e:	b92a      	cbnz	r2, 800a49c <_realloc_r+0x24>
 800a490:	f7ff fd24 	bl	8009edc <_free_r>
 800a494:	4625      	mov	r5, r4
 800a496:	4628      	mov	r0, r5
 800a498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a49c:	f000 fc5c 	bl	800ad58 <_malloc_usable_size_r>
 800a4a0:	4284      	cmp	r4, r0
 800a4a2:	4607      	mov	r7, r0
 800a4a4:	d802      	bhi.n	800a4ac <_realloc_r+0x34>
 800a4a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a4aa:	d812      	bhi.n	800a4d2 <_realloc_r+0x5a>
 800a4ac:	4621      	mov	r1, r4
 800a4ae:	4640      	mov	r0, r8
 800a4b0:	f7ff fd80 	bl	8009fb4 <_malloc_r>
 800a4b4:	4605      	mov	r5, r0
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	d0ed      	beq.n	800a496 <_realloc_r+0x1e>
 800a4ba:	42bc      	cmp	r4, r7
 800a4bc:	4622      	mov	r2, r4
 800a4be:	4631      	mov	r1, r6
 800a4c0:	bf28      	it	cs
 800a4c2:	463a      	movcs	r2, r7
 800a4c4:	f7ff f824 	bl	8009510 <memcpy>
 800a4c8:	4631      	mov	r1, r6
 800a4ca:	4640      	mov	r0, r8
 800a4cc:	f7ff fd06 	bl	8009edc <_free_r>
 800a4d0:	e7e1      	b.n	800a496 <_realloc_r+0x1e>
 800a4d2:	4635      	mov	r5, r6
 800a4d4:	e7df      	b.n	800a496 <_realloc_r+0x1e>

0800a4d6 <__sfputc_r>:
 800a4d6:	6893      	ldr	r3, [r2, #8]
 800a4d8:	3b01      	subs	r3, #1
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	b410      	push	{r4}
 800a4de:	6093      	str	r3, [r2, #8]
 800a4e0:	da08      	bge.n	800a4f4 <__sfputc_r+0x1e>
 800a4e2:	6994      	ldr	r4, [r2, #24]
 800a4e4:	42a3      	cmp	r3, r4
 800a4e6:	db01      	blt.n	800a4ec <__sfputc_r+0x16>
 800a4e8:	290a      	cmp	r1, #10
 800a4ea:	d103      	bne.n	800a4f4 <__sfputc_r+0x1e>
 800a4ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4f0:	f000 b94a 	b.w	800a788 <__swbuf_r>
 800a4f4:	6813      	ldr	r3, [r2, #0]
 800a4f6:	1c58      	adds	r0, r3, #1
 800a4f8:	6010      	str	r0, [r2, #0]
 800a4fa:	7019      	strb	r1, [r3, #0]
 800a4fc:	4608      	mov	r0, r1
 800a4fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <__sfputs_r>:
 800a504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a506:	4606      	mov	r6, r0
 800a508:	460f      	mov	r7, r1
 800a50a:	4614      	mov	r4, r2
 800a50c:	18d5      	adds	r5, r2, r3
 800a50e:	42ac      	cmp	r4, r5
 800a510:	d101      	bne.n	800a516 <__sfputs_r+0x12>
 800a512:	2000      	movs	r0, #0
 800a514:	e007      	b.n	800a526 <__sfputs_r+0x22>
 800a516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a51a:	463a      	mov	r2, r7
 800a51c:	4630      	mov	r0, r6
 800a51e:	f7ff ffda 	bl	800a4d6 <__sfputc_r>
 800a522:	1c43      	adds	r3, r0, #1
 800a524:	d1f3      	bne.n	800a50e <__sfputs_r+0xa>
 800a526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a528 <_vfiprintf_r>:
 800a528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a52c:	460d      	mov	r5, r1
 800a52e:	b09d      	sub	sp, #116	; 0x74
 800a530:	4614      	mov	r4, r2
 800a532:	4698      	mov	r8, r3
 800a534:	4606      	mov	r6, r0
 800a536:	b118      	cbz	r0, 800a540 <_vfiprintf_r+0x18>
 800a538:	6983      	ldr	r3, [r0, #24]
 800a53a:	b90b      	cbnz	r3, 800a540 <_vfiprintf_r+0x18>
 800a53c:	f000 fb06 	bl	800ab4c <__sinit>
 800a540:	4b89      	ldr	r3, [pc, #548]	; (800a768 <_vfiprintf_r+0x240>)
 800a542:	429d      	cmp	r5, r3
 800a544:	d11b      	bne.n	800a57e <_vfiprintf_r+0x56>
 800a546:	6875      	ldr	r5, [r6, #4]
 800a548:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a54a:	07d9      	lsls	r1, r3, #31
 800a54c:	d405      	bmi.n	800a55a <_vfiprintf_r+0x32>
 800a54e:	89ab      	ldrh	r3, [r5, #12]
 800a550:	059a      	lsls	r2, r3, #22
 800a552:	d402      	bmi.n	800a55a <_vfiprintf_r+0x32>
 800a554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a556:	f000 fb97 	bl	800ac88 <__retarget_lock_acquire_recursive>
 800a55a:	89ab      	ldrh	r3, [r5, #12]
 800a55c:	071b      	lsls	r3, r3, #28
 800a55e:	d501      	bpl.n	800a564 <_vfiprintf_r+0x3c>
 800a560:	692b      	ldr	r3, [r5, #16]
 800a562:	b9eb      	cbnz	r3, 800a5a0 <_vfiprintf_r+0x78>
 800a564:	4629      	mov	r1, r5
 800a566:	4630      	mov	r0, r6
 800a568:	f000 f960 	bl	800a82c <__swsetup_r>
 800a56c:	b1c0      	cbz	r0, 800a5a0 <_vfiprintf_r+0x78>
 800a56e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a570:	07dc      	lsls	r4, r3, #31
 800a572:	d50e      	bpl.n	800a592 <_vfiprintf_r+0x6a>
 800a574:	f04f 30ff 	mov.w	r0, #4294967295
 800a578:	b01d      	add	sp, #116	; 0x74
 800a57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a57e:	4b7b      	ldr	r3, [pc, #492]	; (800a76c <_vfiprintf_r+0x244>)
 800a580:	429d      	cmp	r5, r3
 800a582:	d101      	bne.n	800a588 <_vfiprintf_r+0x60>
 800a584:	68b5      	ldr	r5, [r6, #8]
 800a586:	e7df      	b.n	800a548 <_vfiprintf_r+0x20>
 800a588:	4b79      	ldr	r3, [pc, #484]	; (800a770 <_vfiprintf_r+0x248>)
 800a58a:	429d      	cmp	r5, r3
 800a58c:	bf08      	it	eq
 800a58e:	68f5      	ldreq	r5, [r6, #12]
 800a590:	e7da      	b.n	800a548 <_vfiprintf_r+0x20>
 800a592:	89ab      	ldrh	r3, [r5, #12]
 800a594:	0598      	lsls	r0, r3, #22
 800a596:	d4ed      	bmi.n	800a574 <_vfiprintf_r+0x4c>
 800a598:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a59a:	f000 fb76 	bl	800ac8a <__retarget_lock_release_recursive>
 800a59e:	e7e9      	b.n	800a574 <_vfiprintf_r+0x4c>
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a5a4:	2320      	movs	r3, #32
 800a5a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5ae:	2330      	movs	r3, #48	; 0x30
 800a5b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a774 <_vfiprintf_r+0x24c>
 800a5b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5b8:	f04f 0901 	mov.w	r9, #1
 800a5bc:	4623      	mov	r3, r4
 800a5be:	469a      	mov	sl, r3
 800a5c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5c4:	b10a      	cbz	r2, 800a5ca <_vfiprintf_r+0xa2>
 800a5c6:	2a25      	cmp	r2, #37	; 0x25
 800a5c8:	d1f9      	bne.n	800a5be <_vfiprintf_r+0x96>
 800a5ca:	ebba 0b04 	subs.w	fp, sl, r4
 800a5ce:	d00b      	beq.n	800a5e8 <_vfiprintf_r+0xc0>
 800a5d0:	465b      	mov	r3, fp
 800a5d2:	4622      	mov	r2, r4
 800a5d4:	4629      	mov	r1, r5
 800a5d6:	4630      	mov	r0, r6
 800a5d8:	f7ff ff94 	bl	800a504 <__sfputs_r>
 800a5dc:	3001      	adds	r0, #1
 800a5de:	f000 80aa 	beq.w	800a736 <_vfiprintf_r+0x20e>
 800a5e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5e4:	445a      	add	r2, fp
 800a5e6:	9209      	str	r2, [sp, #36]	; 0x24
 800a5e8:	f89a 3000 	ldrb.w	r3, [sl]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f000 80a2 	beq.w	800a736 <_vfiprintf_r+0x20e>
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a5f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5fc:	f10a 0a01 	add.w	sl, sl, #1
 800a600:	9304      	str	r3, [sp, #16]
 800a602:	9307      	str	r3, [sp, #28]
 800a604:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a608:	931a      	str	r3, [sp, #104]	; 0x68
 800a60a:	4654      	mov	r4, sl
 800a60c:	2205      	movs	r2, #5
 800a60e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a612:	4858      	ldr	r0, [pc, #352]	; (800a774 <_vfiprintf_r+0x24c>)
 800a614:	f7f5 fdec 	bl	80001f0 <memchr>
 800a618:	9a04      	ldr	r2, [sp, #16]
 800a61a:	b9d8      	cbnz	r0, 800a654 <_vfiprintf_r+0x12c>
 800a61c:	06d1      	lsls	r1, r2, #27
 800a61e:	bf44      	itt	mi
 800a620:	2320      	movmi	r3, #32
 800a622:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a626:	0713      	lsls	r3, r2, #28
 800a628:	bf44      	itt	mi
 800a62a:	232b      	movmi	r3, #43	; 0x2b
 800a62c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a630:	f89a 3000 	ldrb.w	r3, [sl]
 800a634:	2b2a      	cmp	r3, #42	; 0x2a
 800a636:	d015      	beq.n	800a664 <_vfiprintf_r+0x13c>
 800a638:	9a07      	ldr	r2, [sp, #28]
 800a63a:	4654      	mov	r4, sl
 800a63c:	2000      	movs	r0, #0
 800a63e:	f04f 0c0a 	mov.w	ip, #10
 800a642:	4621      	mov	r1, r4
 800a644:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a648:	3b30      	subs	r3, #48	; 0x30
 800a64a:	2b09      	cmp	r3, #9
 800a64c:	d94e      	bls.n	800a6ec <_vfiprintf_r+0x1c4>
 800a64e:	b1b0      	cbz	r0, 800a67e <_vfiprintf_r+0x156>
 800a650:	9207      	str	r2, [sp, #28]
 800a652:	e014      	b.n	800a67e <_vfiprintf_r+0x156>
 800a654:	eba0 0308 	sub.w	r3, r0, r8
 800a658:	fa09 f303 	lsl.w	r3, r9, r3
 800a65c:	4313      	orrs	r3, r2
 800a65e:	9304      	str	r3, [sp, #16]
 800a660:	46a2      	mov	sl, r4
 800a662:	e7d2      	b.n	800a60a <_vfiprintf_r+0xe2>
 800a664:	9b03      	ldr	r3, [sp, #12]
 800a666:	1d19      	adds	r1, r3, #4
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	9103      	str	r1, [sp, #12]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	bfbb      	ittet	lt
 800a670:	425b      	neglt	r3, r3
 800a672:	f042 0202 	orrlt.w	r2, r2, #2
 800a676:	9307      	strge	r3, [sp, #28]
 800a678:	9307      	strlt	r3, [sp, #28]
 800a67a:	bfb8      	it	lt
 800a67c:	9204      	strlt	r2, [sp, #16]
 800a67e:	7823      	ldrb	r3, [r4, #0]
 800a680:	2b2e      	cmp	r3, #46	; 0x2e
 800a682:	d10c      	bne.n	800a69e <_vfiprintf_r+0x176>
 800a684:	7863      	ldrb	r3, [r4, #1]
 800a686:	2b2a      	cmp	r3, #42	; 0x2a
 800a688:	d135      	bne.n	800a6f6 <_vfiprintf_r+0x1ce>
 800a68a:	9b03      	ldr	r3, [sp, #12]
 800a68c:	1d1a      	adds	r2, r3, #4
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	9203      	str	r2, [sp, #12]
 800a692:	2b00      	cmp	r3, #0
 800a694:	bfb8      	it	lt
 800a696:	f04f 33ff 	movlt.w	r3, #4294967295
 800a69a:	3402      	adds	r4, #2
 800a69c:	9305      	str	r3, [sp, #20]
 800a69e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a784 <_vfiprintf_r+0x25c>
 800a6a2:	7821      	ldrb	r1, [r4, #0]
 800a6a4:	2203      	movs	r2, #3
 800a6a6:	4650      	mov	r0, sl
 800a6a8:	f7f5 fda2 	bl	80001f0 <memchr>
 800a6ac:	b140      	cbz	r0, 800a6c0 <_vfiprintf_r+0x198>
 800a6ae:	2340      	movs	r3, #64	; 0x40
 800a6b0:	eba0 000a 	sub.w	r0, r0, sl
 800a6b4:	fa03 f000 	lsl.w	r0, r3, r0
 800a6b8:	9b04      	ldr	r3, [sp, #16]
 800a6ba:	4303      	orrs	r3, r0
 800a6bc:	3401      	adds	r4, #1
 800a6be:	9304      	str	r3, [sp, #16]
 800a6c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6c4:	482c      	ldr	r0, [pc, #176]	; (800a778 <_vfiprintf_r+0x250>)
 800a6c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6ca:	2206      	movs	r2, #6
 800a6cc:	f7f5 fd90 	bl	80001f0 <memchr>
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	d03f      	beq.n	800a754 <_vfiprintf_r+0x22c>
 800a6d4:	4b29      	ldr	r3, [pc, #164]	; (800a77c <_vfiprintf_r+0x254>)
 800a6d6:	bb1b      	cbnz	r3, 800a720 <_vfiprintf_r+0x1f8>
 800a6d8:	9b03      	ldr	r3, [sp, #12]
 800a6da:	3307      	adds	r3, #7
 800a6dc:	f023 0307 	bic.w	r3, r3, #7
 800a6e0:	3308      	adds	r3, #8
 800a6e2:	9303      	str	r3, [sp, #12]
 800a6e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6e6:	443b      	add	r3, r7
 800a6e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ea:	e767      	b.n	800a5bc <_vfiprintf_r+0x94>
 800a6ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6f0:	460c      	mov	r4, r1
 800a6f2:	2001      	movs	r0, #1
 800a6f4:	e7a5      	b.n	800a642 <_vfiprintf_r+0x11a>
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	3401      	adds	r4, #1
 800a6fa:	9305      	str	r3, [sp, #20]
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	f04f 0c0a 	mov.w	ip, #10
 800a702:	4620      	mov	r0, r4
 800a704:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a708:	3a30      	subs	r2, #48	; 0x30
 800a70a:	2a09      	cmp	r2, #9
 800a70c:	d903      	bls.n	800a716 <_vfiprintf_r+0x1ee>
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d0c5      	beq.n	800a69e <_vfiprintf_r+0x176>
 800a712:	9105      	str	r1, [sp, #20]
 800a714:	e7c3      	b.n	800a69e <_vfiprintf_r+0x176>
 800a716:	fb0c 2101 	mla	r1, ip, r1, r2
 800a71a:	4604      	mov	r4, r0
 800a71c:	2301      	movs	r3, #1
 800a71e:	e7f0      	b.n	800a702 <_vfiprintf_r+0x1da>
 800a720:	ab03      	add	r3, sp, #12
 800a722:	9300      	str	r3, [sp, #0]
 800a724:	462a      	mov	r2, r5
 800a726:	4b16      	ldr	r3, [pc, #88]	; (800a780 <_vfiprintf_r+0x258>)
 800a728:	a904      	add	r1, sp, #16
 800a72a:	4630      	mov	r0, r6
 800a72c:	f7fc f83a 	bl	80067a4 <_printf_float>
 800a730:	4607      	mov	r7, r0
 800a732:	1c78      	adds	r0, r7, #1
 800a734:	d1d6      	bne.n	800a6e4 <_vfiprintf_r+0x1bc>
 800a736:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a738:	07d9      	lsls	r1, r3, #31
 800a73a:	d405      	bmi.n	800a748 <_vfiprintf_r+0x220>
 800a73c:	89ab      	ldrh	r3, [r5, #12]
 800a73e:	059a      	lsls	r2, r3, #22
 800a740:	d402      	bmi.n	800a748 <_vfiprintf_r+0x220>
 800a742:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a744:	f000 faa1 	bl	800ac8a <__retarget_lock_release_recursive>
 800a748:	89ab      	ldrh	r3, [r5, #12]
 800a74a:	065b      	lsls	r3, r3, #25
 800a74c:	f53f af12 	bmi.w	800a574 <_vfiprintf_r+0x4c>
 800a750:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a752:	e711      	b.n	800a578 <_vfiprintf_r+0x50>
 800a754:	ab03      	add	r3, sp, #12
 800a756:	9300      	str	r3, [sp, #0]
 800a758:	462a      	mov	r2, r5
 800a75a:	4b09      	ldr	r3, [pc, #36]	; (800a780 <_vfiprintf_r+0x258>)
 800a75c:	a904      	add	r1, sp, #16
 800a75e:	4630      	mov	r0, r6
 800a760:	f7fc fac4 	bl	8006cec <_printf_i>
 800a764:	e7e4      	b.n	800a730 <_vfiprintf_r+0x208>
 800a766:	bf00      	nop
 800a768:	0800bc14 	.word	0x0800bc14
 800a76c:	0800bc34 	.word	0x0800bc34
 800a770:	0800bbf4 	.word	0x0800bbf4
 800a774:	0800bba4 	.word	0x0800bba4
 800a778:	0800bbae 	.word	0x0800bbae
 800a77c:	080067a5 	.word	0x080067a5
 800a780:	0800a505 	.word	0x0800a505
 800a784:	0800bbaa 	.word	0x0800bbaa

0800a788 <__swbuf_r>:
 800a788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a78a:	460e      	mov	r6, r1
 800a78c:	4614      	mov	r4, r2
 800a78e:	4605      	mov	r5, r0
 800a790:	b118      	cbz	r0, 800a79a <__swbuf_r+0x12>
 800a792:	6983      	ldr	r3, [r0, #24]
 800a794:	b90b      	cbnz	r3, 800a79a <__swbuf_r+0x12>
 800a796:	f000 f9d9 	bl	800ab4c <__sinit>
 800a79a:	4b21      	ldr	r3, [pc, #132]	; (800a820 <__swbuf_r+0x98>)
 800a79c:	429c      	cmp	r4, r3
 800a79e:	d12b      	bne.n	800a7f8 <__swbuf_r+0x70>
 800a7a0:	686c      	ldr	r4, [r5, #4]
 800a7a2:	69a3      	ldr	r3, [r4, #24]
 800a7a4:	60a3      	str	r3, [r4, #8]
 800a7a6:	89a3      	ldrh	r3, [r4, #12]
 800a7a8:	071a      	lsls	r2, r3, #28
 800a7aa:	d52f      	bpl.n	800a80c <__swbuf_r+0x84>
 800a7ac:	6923      	ldr	r3, [r4, #16]
 800a7ae:	b36b      	cbz	r3, 800a80c <__swbuf_r+0x84>
 800a7b0:	6923      	ldr	r3, [r4, #16]
 800a7b2:	6820      	ldr	r0, [r4, #0]
 800a7b4:	1ac0      	subs	r0, r0, r3
 800a7b6:	6963      	ldr	r3, [r4, #20]
 800a7b8:	b2f6      	uxtb	r6, r6
 800a7ba:	4283      	cmp	r3, r0
 800a7bc:	4637      	mov	r7, r6
 800a7be:	dc04      	bgt.n	800a7ca <__swbuf_r+0x42>
 800a7c0:	4621      	mov	r1, r4
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	f000 f92e 	bl	800aa24 <_fflush_r>
 800a7c8:	bb30      	cbnz	r0, 800a818 <__swbuf_r+0x90>
 800a7ca:	68a3      	ldr	r3, [r4, #8]
 800a7cc:	3b01      	subs	r3, #1
 800a7ce:	60a3      	str	r3, [r4, #8]
 800a7d0:	6823      	ldr	r3, [r4, #0]
 800a7d2:	1c5a      	adds	r2, r3, #1
 800a7d4:	6022      	str	r2, [r4, #0]
 800a7d6:	701e      	strb	r6, [r3, #0]
 800a7d8:	6963      	ldr	r3, [r4, #20]
 800a7da:	3001      	adds	r0, #1
 800a7dc:	4283      	cmp	r3, r0
 800a7de:	d004      	beq.n	800a7ea <__swbuf_r+0x62>
 800a7e0:	89a3      	ldrh	r3, [r4, #12]
 800a7e2:	07db      	lsls	r3, r3, #31
 800a7e4:	d506      	bpl.n	800a7f4 <__swbuf_r+0x6c>
 800a7e6:	2e0a      	cmp	r6, #10
 800a7e8:	d104      	bne.n	800a7f4 <__swbuf_r+0x6c>
 800a7ea:	4621      	mov	r1, r4
 800a7ec:	4628      	mov	r0, r5
 800a7ee:	f000 f919 	bl	800aa24 <_fflush_r>
 800a7f2:	b988      	cbnz	r0, 800a818 <__swbuf_r+0x90>
 800a7f4:	4638      	mov	r0, r7
 800a7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7f8:	4b0a      	ldr	r3, [pc, #40]	; (800a824 <__swbuf_r+0x9c>)
 800a7fa:	429c      	cmp	r4, r3
 800a7fc:	d101      	bne.n	800a802 <__swbuf_r+0x7a>
 800a7fe:	68ac      	ldr	r4, [r5, #8]
 800a800:	e7cf      	b.n	800a7a2 <__swbuf_r+0x1a>
 800a802:	4b09      	ldr	r3, [pc, #36]	; (800a828 <__swbuf_r+0xa0>)
 800a804:	429c      	cmp	r4, r3
 800a806:	bf08      	it	eq
 800a808:	68ec      	ldreq	r4, [r5, #12]
 800a80a:	e7ca      	b.n	800a7a2 <__swbuf_r+0x1a>
 800a80c:	4621      	mov	r1, r4
 800a80e:	4628      	mov	r0, r5
 800a810:	f000 f80c 	bl	800a82c <__swsetup_r>
 800a814:	2800      	cmp	r0, #0
 800a816:	d0cb      	beq.n	800a7b0 <__swbuf_r+0x28>
 800a818:	f04f 37ff 	mov.w	r7, #4294967295
 800a81c:	e7ea      	b.n	800a7f4 <__swbuf_r+0x6c>
 800a81e:	bf00      	nop
 800a820:	0800bc14 	.word	0x0800bc14
 800a824:	0800bc34 	.word	0x0800bc34
 800a828:	0800bbf4 	.word	0x0800bbf4

0800a82c <__swsetup_r>:
 800a82c:	4b32      	ldr	r3, [pc, #200]	; (800a8f8 <__swsetup_r+0xcc>)
 800a82e:	b570      	push	{r4, r5, r6, lr}
 800a830:	681d      	ldr	r5, [r3, #0]
 800a832:	4606      	mov	r6, r0
 800a834:	460c      	mov	r4, r1
 800a836:	b125      	cbz	r5, 800a842 <__swsetup_r+0x16>
 800a838:	69ab      	ldr	r3, [r5, #24]
 800a83a:	b913      	cbnz	r3, 800a842 <__swsetup_r+0x16>
 800a83c:	4628      	mov	r0, r5
 800a83e:	f000 f985 	bl	800ab4c <__sinit>
 800a842:	4b2e      	ldr	r3, [pc, #184]	; (800a8fc <__swsetup_r+0xd0>)
 800a844:	429c      	cmp	r4, r3
 800a846:	d10f      	bne.n	800a868 <__swsetup_r+0x3c>
 800a848:	686c      	ldr	r4, [r5, #4]
 800a84a:	89a3      	ldrh	r3, [r4, #12]
 800a84c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a850:	0719      	lsls	r1, r3, #28
 800a852:	d42c      	bmi.n	800a8ae <__swsetup_r+0x82>
 800a854:	06dd      	lsls	r5, r3, #27
 800a856:	d411      	bmi.n	800a87c <__swsetup_r+0x50>
 800a858:	2309      	movs	r3, #9
 800a85a:	6033      	str	r3, [r6, #0]
 800a85c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a860:	81a3      	strh	r3, [r4, #12]
 800a862:	f04f 30ff 	mov.w	r0, #4294967295
 800a866:	e03e      	b.n	800a8e6 <__swsetup_r+0xba>
 800a868:	4b25      	ldr	r3, [pc, #148]	; (800a900 <__swsetup_r+0xd4>)
 800a86a:	429c      	cmp	r4, r3
 800a86c:	d101      	bne.n	800a872 <__swsetup_r+0x46>
 800a86e:	68ac      	ldr	r4, [r5, #8]
 800a870:	e7eb      	b.n	800a84a <__swsetup_r+0x1e>
 800a872:	4b24      	ldr	r3, [pc, #144]	; (800a904 <__swsetup_r+0xd8>)
 800a874:	429c      	cmp	r4, r3
 800a876:	bf08      	it	eq
 800a878:	68ec      	ldreq	r4, [r5, #12]
 800a87a:	e7e6      	b.n	800a84a <__swsetup_r+0x1e>
 800a87c:	0758      	lsls	r0, r3, #29
 800a87e:	d512      	bpl.n	800a8a6 <__swsetup_r+0x7a>
 800a880:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a882:	b141      	cbz	r1, 800a896 <__swsetup_r+0x6a>
 800a884:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a888:	4299      	cmp	r1, r3
 800a88a:	d002      	beq.n	800a892 <__swsetup_r+0x66>
 800a88c:	4630      	mov	r0, r6
 800a88e:	f7ff fb25 	bl	8009edc <_free_r>
 800a892:	2300      	movs	r3, #0
 800a894:	6363      	str	r3, [r4, #52]	; 0x34
 800a896:	89a3      	ldrh	r3, [r4, #12]
 800a898:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a89c:	81a3      	strh	r3, [r4, #12]
 800a89e:	2300      	movs	r3, #0
 800a8a0:	6063      	str	r3, [r4, #4]
 800a8a2:	6923      	ldr	r3, [r4, #16]
 800a8a4:	6023      	str	r3, [r4, #0]
 800a8a6:	89a3      	ldrh	r3, [r4, #12]
 800a8a8:	f043 0308 	orr.w	r3, r3, #8
 800a8ac:	81a3      	strh	r3, [r4, #12]
 800a8ae:	6923      	ldr	r3, [r4, #16]
 800a8b0:	b94b      	cbnz	r3, 800a8c6 <__swsetup_r+0x9a>
 800a8b2:	89a3      	ldrh	r3, [r4, #12]
 800a8b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a8b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8bc:	d003      	beq.n	800a8c6 <__swsetup_r+0x9a>
 800a8be:	4621      	mov	r1, r4
 800a8c0:	4630      	mov	r0, r6
 800a8c2:	f000 fa09 	bl	800acd8 <__smakebuf_r>
 800a8c6:	89a0      	ldrh	r0, [r4, #12]
 800a8c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8cc:	f010 0301 	ands.w	r3, r0, #1
 800a8d0:	d00a      	beq.n	800a8e8 <__swsetup_r+0xbc>
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	60a3      	str	r3, [r4, #8]
 800a8d6:	6963      	ldr	r3, [r4, #20]
 800a8d8:	425b      	negs	r3, r3
 800a8da:	61a3      	str	r3, [r4, #24]
 800a8dc:	6923      	ldr	r3, [r4, #16]
 800a8de:	b943      	cbnz	r3, 800a8f2 <__swsetup_r+0xc6>
 800a8e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a8e4:	d1ba      	bne.n	800a85c <__swsetup_r+0x30>
 800a8e6:	bd70      	pop	{r4, r5, r6, pc}
 800a8e8:	0781      	lsls	r1, r0, #30
 800a8ea:	bf58      	it	pl
 800a8ec:	6963      	ldrpl	r3, [r4, #20]
 800a8ee:	60a3      	str	r3, [r4, #8]
 800a8f0:	e7f4      	b.n	800a8dc <__swsetup_r+0xb0>
 800a8f2:	2000      	movs	r0, #0
 800a8f4:	e7f7      	b.n	800a8e6 <__swsetup_r+0xba>
 800a8f6:	bf00      	nop
 800a8f8:	200000b4 	.word	0x200000b4
 800a8fc:	0800bc14 	.word	0x0800bc14
 800a900:	0800bc34 	.word	0x0800bc34
 800a904:	0800bbf4 	.word	0x0800bbf4

0800a908 <abort>:
 800a908:	b508      	push	{r3, lr}
 800a90a:	2006      	movs	r0, #6
 800a90c:	f000 fa54 	bl	800adb8 <raise>
 800a910:	2001      	movs	r0, #1
 800a912:	f7f8 f8cd 	bl	8002ab0 <_exit>
	...

0800a918 <__sflush_r>:
 800a918:	898a      	ldrh	r2, [r1, #12]
 800a91a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a91e:	4605      	mov	r5, r0
 800a920:	0710      	lsls	r0, r2, #28
 800a922:	460c      	mov	r4, r1
 800a924:	d458      	bmi.n	800a9d8 <__sflush_r+0xc0>
 800a926:	684b      	ldr	r3, [r1, #4]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	dc05      	bgt.n	800a938 <__sflush_r+0x20>
 800a92c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a92e:	2b00      	cmp	r3, #0
 800a930:	dc02      	bgt.n	800a938 <__sflush_r+0x20>
 800a932:	2000      	movs	r0, #0
 800a934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a938:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a93a:	2e00      	cmp	r6, #0
 800a93c:	d0f9      	beq.n	800a932 <__sflush_r+0x1a>
 800a93e:	2300      	movs	r3, #0
 800a940:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a944:	682f      	ldr	r7, [r5, #0]
 800a946:	602b      	str	r3, [r5, #0]
 800a948:	d032      	beq.n	800a9b0 <__sflush_r+0x98>
 800a94a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a94c:	89a3      	ldrh	r3, [r4, #12]
 800a94e:	075a      	lsls	r2, r3, #29
 800a950:	d505      	bpl.n	800a95e <__sflush_r+0x46>
 800a952:	6863      	ldr	r3, [r4, #4]
 800a954:	1ac0      	subs	r0, r0, r3
 800a956:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a958:	b10b      	cbz	r3, 800a95e <__sflush_r+0x46>
 800a95a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a95c:	1ac0      	subs	r0, r0, r3
 800a95e:	2300      	movs	r3, #0
 800a960:	4602      	mov	r2, r0
 800a962:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a964:	6a21      	ldr	r1, [r4, #32]
 800a966:	4628      	mov	r0, r5
 800a968:	47b0      	blx	r6
 800a96a:	1c43      	adds	r3, r0, #1
 800a96c:	89a3      	ldrh	r3, [r4, #12]
 800a96e:	d106      	bne.n	800a97e <__sflush_r+0x66>
 800a970:	6829      	ldr	r1, [r5, #0]
 800a972:	291d      	cmp	r1, #29
 800a974:	d82c      	bhi.n	800a9d0 <__sflush_r+0xb8>
 800a976:	4a2a      	ldr	r2, [pc, #168]	; (800aa20 <__sflush_r+0x108>)
 800a978:	40ca      	lsrs	r2, r1
 800a97a:	07d6      	lsls	r6, r2, #31
 800a97c:	d528      	bpl.n	800a9d0 <__sflush_r+0xb8>
 800a97e:	2200      	movs	r2, #0
 800a980:	6062      	str	r2, [r4, #4]
 800a982:	04d9      	lsls	r1, r3, #19
 800a984:	6922      	ldr	r2, [r4, #16]
 800a986:	6022      	str	r2, [r4, #0]
 800a988:	d504      	bpl.n	800a994 <__sflush_r+0x7c>
 800a98a:	1c42      	adds	r2, r0, #1
 800a98c:	d101      	bne.n	800a992 <__sflush_r+0x7a>
 800a98e:	682b      	ldr	r3, [r5, #0]
 800a990:	b903      	cbnz	r3, 800a994 <__sflush_r+0x7c>
 800a992:	6560      	str	r0, [r4, #84]	; 0x54
 800a994:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a996:	602f      	str	r7, [r5, #0]
 800a998:	2900      	cmp	r1, #0
 800a99a:	d0ca      	beq.n	800a932 <__sflush_r+0x1a>
 800a99c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9a0:	4299      	cmp	r1, r3
 800a9a2:	d002      	beq.n	800a9aa <__sflush_r+0x92>
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	f7ff fa99 	bl	8009edc <_free_r>
 800a9aa:	2000      	movs	r0, #0
 800a9ac:	6360      	str	r0, [r4, #52]	; 0x34
 800a9ae:	e7c1      	b.n	800a934 <__sflush_r+0x1c>
 800a9b0:	6a21      	ldr	r1, [r4, #32]
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	4628      	mov	r0, r5
 800a9b6:	47b0      	blx	r6
 800a9b8:	1c41      	adds	r1, r0, #1
 800a9ba:	d1c7      	bne.n	800a94c <__sflush_r+0x34>
 800a9bc:	682b      	ldr	r3, [r5, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d0c4      	beq.n	800a94c <__sflush_r+0x34>
 800a9c2:	2b1d      	cmp	r3, #29
 800a9c4:	d001      	beq.n	800a9ca <__sflush_r+0xb2>
 800a9c6:	2b16      	cmp	r3, #22
 800a9c8:	d101      	bne.n	800a9ce <__sflush_r+0xb6>
 800a9ca:	602f      	str	r7, [r5, #0]
 800a9cc:	e7b1      	b.n	800a932 <__sflush_r+0x1a>
 800a9ce:	89a3      	ldrh	r3, [r4, #12]
 800a9d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9d4:	81a3      	strh	r3, [r4, #12]
 800a9d6:	e7ad      	b.n	800a934 <__sflush_r+0x1c>
 800a9d8:	690f      	ldr	r7, [r1, #16]
 800a9da:	2f00      	cmp	r7, #0
 800a9dc:	d0a9      	beq.n	800a932 <__sflush_r+0x1a>
 800a9de:	0793      	lsls	r3, r2, #30
 800a9e0:	680e      	ldr	r6, [r1, #0]
 800a9e2:	bf08      	it	eq
 800a9e4:	694b      	ldreq	r3, [r1, #20]
 800a9e6:	600f      	str	r7, [r1, #0]
 800a9e8:	bf18      	it	ne
 800a9ea:	2300      	movne	r3, #0
 800a9ec:	eba6 0807 	sub.w	r8, r6, r7
 800a9f0:	608b      	str	r3, [r1, #8]
 800a9f2:	f1b8 0f00 	cmp.w	r8, #0
 800a9f6:	dd9c      	ble.n	800a932 <__sflush_r+0x1a>
 800a9f8:	6a21      	ldr	r1, [r4, #32]
 800a9fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a9fc:	4643      	mov	r3, r8
 800a9fe:	463a      	mov	r2, r7
 800aa00:	4628      	mov	r0, r5
 800aa02:	47b0      	blx	r6
 800aa04:	2800      	cmp	r0, #0
 800aa06:	dc06      	bgt.n	800aa16 <__sflush_r+0xfe>
 800aa08:	89a3      	ldrh	r3, [r4, #12]
 800aa0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa0e:	81a3      	strh	r3, [r4, #12]
 800aa10:	f04f 30ff 	mov.w	r0, #4294967295
 800aa14:	e78e      	b.n	800a934 <__sflush_r+0x1c>
 800aa16:	4407      	add	r7, r0
 800aa18:	eba8 0800 	sub.w	r8, r8, r0
 800aa1c:	e7e9      	b.n	800a9f2 <__sflush_r+0xda>
 800aa1e:	bf00      	nop
 800aa20:	20400001 	.word	0x20400001

0800aa24 <_fflush_r>:
 800aa24:	b538      	push	{r3, r4, r5, lr}
 800aa26:	690b      	ldr	r3, [r1, #16]
 800aa28:	4605      	mov	r5, r0
 800aa2a:	460c      	mov	r4, r1
 800aa2c:	b913      	cbnz	r3, 800aa34 <_fflush_r+0x10>
 800aa2e:	2500      	movs	r5, #0
 800aa30:	4628      	mov	r0, r5
 800aa32:	bd38      	pop	{r3, r4, r5, pc}
 800aa34:	b118      	cbz	r0, 800aa3e <_fflush_r+0x1a>
 800aa36:	6983      	ldr	r3, [r0, #24]
 800aa38:	b90b      	cbnz	r3, 800aa3e <_fflush_r+0x1a>
 800aa3a:	f000 f887 	bl	800ab4c <__sinit>
 800aa3e:	4b14      	ldr	r3, [pc, #80]	; (800aa90 <_fflush_r+0x6c>)
 800aa40:	429c      	cmp	r4, r3
 800aa42:	d11b      	bne.n	800aa7c <_fflush_r+0x58>
 800aa44:	686c      	ldr	r4, [r5, #4]
 800aa46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d0ef      	beq.n	800aa2e <_fflush_r+0xa>
 800aa4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa50:	07d0      	lsls	r0, r2, #31
 800aa52:	d404      	bmi.n	800aa5e <_fflush_r+0x3a>
 800aa54:	0599      	lsls	r1, r3, #22
 800aa56:	d402      	bmi.n	800aa5e <_fflush_r+0x3a>
 800aa58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa5a:	f000 f915 	bl	800ac88 <__retarget_lock_acquire_recursive>
 800aa5e:	4628      	mov	r0, r5
 800aa60:	4621      	mov	r1, r4
 800aa62:	f7ff ff59 	bl	800a918 <__sflush_r>
 800aa66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa68:	07da      	lsls	r2, r3, #31
 800aa6a:	4605      	mov	r5, r0
 800aa6c:	d4e0      	bmi.n	800aa30 <_fflush_r+0xc>
 800aa6e:	89a3      	ldrh	r3, [r4, #12]
 800aa70:	059b      	lsls	r3, r3, #22
 800aa72:	d4dd      	bmi.n	800aa30 <_fflush_r+0xc>
 800aa74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa76:	f000 f908 	bl	800ac8a <__retarget_lock_release_recursive>
 800aa7a:	e7d9      	b.n	800aa30 <_fflush_r+0xc>
 800aa7c:	4b05      	ldr	r3, [pc, #20]	; (800aa94 <_fflush_r+0x70>)
 800aa7e:	429c      	cmp	r4, r3
 800aa80:	d101      	bne.n	800aa86 <_fflush_r+0x62>
 800aa82:	68ac      	ldr	r4, [r5, #8]
 800aa84:	e7df      	b.n	800aa46 <_fflush_r+0x22>
 800aa86:	4b04      	ldr	r3, [pc, #16]	; (800aa98 <_fflush_r+0x74>)
 800aa88:	429c      	cmp	r4, r3
 800aa8a:	bf08      	it	eq
 800aa8c:	68ec      	ldreq	r4, [r5, #12]
 800aa8e:	e7da      	b.n	800aa46 <_fflush_r+0x22>
 800aa90:	0800bc14 	.word	0x0800bc14
 800aa94:	0800bc34 	.word	0x0800bc34
 800aa98:	0800bbf4 	.word	0x0800bbf4

0800aa9c <std>:
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	b510      	push	{r4, lr}
 800aaa0:	4604      	mov	r4, r0
 800aaa2:	e9c0 3300 	strd	r3, r3, [r0]
 800aaa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aaaa:	6083      	str	r3, [r0, #8]
 800aaac:	8181      	strh	r1, [r0, #12]
 800aaae:	6643      	str	r3, [r0, #100]	; 0x64
 800aab0:	81c2      	strh	r2, [r0, #14]
 800aab2:	6183      	str	r3, [r0, #24]
 800aab4:	4619      	mov	r1, r3
 800aab6:	2208      	movs	r2, #8
 800aab8:	305c      	adds	r0, #92	; 0x5c
 800aaba:	f7fb fdcb 	bl	8006654 <memset>
 800aabe:	4b05      	ldr	r3, [pc, #20]	; (800aad4 <std+0x38>)
 800aac0:	6263      	str	r3, [r4, #36]	; 0x24
 800aac2:	4b05      	ldr	r3, [pc, #20]	; (800aad8 <std+0x3c>)
 800aac4:	62a3      	str	r3, [r4, #40]	; 0x28
 800aac6:	4b05      	ldr	r3, [pc, #20]	; (800aadc <std+0x40>)
 800aac8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aaca:	4b05      	ldr	r3, [pc, #20]	; (800aae0 <std+0x44>)
 800aacc:	6224      	str	r4, [r4, #32]
 800aace:	6323      	str	r3, [r4, #48]	; 0x30
 800aad0:	bd10      	pop	{r4, pc}
 800aad2:	bf00      	nop
 800aad4:	0800adf1 	.word	0x0800adf1
 800aad8:	0800ae13 	.word	0x0800ae13
 800aadc:	0800ae4b 	.word	0x0800ae4b
 800aae0:	0800ae6f 	.word	0x0800ae6f

0800aae4 <_cleanup_r>:
 800aae4:	4901      	ldr	r1, [pc, #4]	; (800aaec <_cleanup_r+0x8>)
 800aae6:	f000 b8af 	b.w	800ac48 <_fwalk_reent>
 800aaea:	bf00      	nop
 800aaec:	0800aa25 	.word	0x0800aa25

0800aaf0 <__sfmoreglue>:
 800aaf0:	b570      	push	{r4, r5, r6, lr}
 800aaf2:	2268      	movs	r2, #104	; 0x68
 800aaf4:	1e4d      	subs	r5, r1, #1
 800aaf6:	4355      	muls	r5, r2
 800aaf8:	460e      	mov	r6, r1
 800aafa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aafe:	f7ff fa59 	bl	8009fb4 <_malloc_r>
 800ab02:	4604      	mov	r4, r0
 800ab04:	b140      	cbz	r0, 800ab18 <__sfmoreglue+0x28>
 800ab06:	2100      	movs	r1, #0
 800ab08:	e9c0 1600 	strd	r1, r6, [r0]
 800ab0c:	300c      	adds	r0, #12
 800ab0e:	60a0      	str	r0, [r4, #8]
 800ab10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ab14:	f7fb fd9e 	bl	8006654 <memset>
 800ab18:	4620      	mov	r0, r4
 800ab1a:	bd70      	pop	{r4, r5, r6, pc}

0800ab1c <__sfp_lock_acquire>:
 800ab1c:	4801      	ldr	r0, [pc, #4]	; (800ab24 <__sfp_lock_acquire+0x8>)
 800ab1e:	f000 b8b3 	b.w	800ac88 <__retarget_lock_acquire_recursive>
 800ab22:	bf00      	nop
 800ab24:	20000615 	.word	0x20000615

0800ab28 <__sfp_lock_release>:
 800ab28:	4801      	ldr	r0, [pc, #4]	; (800ab30 <__sfp_lock_release+0x8>)
 800ab2a:	f000 b8ae 	b.w	800ac8a <__retarget_lock_release_recursive>
 800ab2e:	bf00      	nop
 800ab30:	20000615 	.word	0x20000615

0800ab34 <__sinit_lock_acquire>:
 800ab34:	4801      	ldr	r0, [pc, #4]	; (800ab3c <__sinit_lock_acquire+0x8>)
 800ab36:	f000 b8a7 	b.w	800ac88 <__retarget_lock_acquire_recursive>
 800ab3a:	bf00      	nop
 800ab3c:	20000616 	.word	0x20000616

0800ab40 <__sinit_lock_release>:
 800ab40:	4801      	ldr	r0, [pc, #4]	; (800ab48 <__sinit_lock_release+0x8>)
 800ab42:	f000 b8a2 	b.w	800ac8a <__retarget_lock_release_recursive>
 800ab46:	bf00      	nop
 800ab48:	20000616 	.word	0x20000616

0800ab4c <__sinit>:
 800ab4c:	b510      	push	{r4, lr}
 800ab4e:	4604      	mov	r4, r0
 800ab50:	f7ff fff0 	bl	800ab34 <__sinit_lock_acquire>
 800ab54:	69a3      	ldr	r3, [r4, #24]
 800ab56:	b11b      	cbz	r3, 800ab60 <__sinit+0x14>
 800ab58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab5c:	f7ff bff0 	b.w	800ab40 <__sinit_lock_release>
 800ab60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab64:	6523      	str	r3, [r4, #80]	; 0x50
 800ab66:	4b13      	ldr	r3, [pc, #76]	; (800abb4 <__sinit+0x68>)
 800ab68:	4a13      	ldr	r2, [pc, #76]	; (800abb8 <__sinit+0x6c>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab6e:	42a3      	cmp	r3, r4
 800ab70:	bf04      	itt	eq
 800ab72:	2301      	moveq	r3, #1
 800ab74:	61a3      	streq	r3, [r4, #24]
 800ab76:	4620      	mov	r0, r4
 800ab78:	f000 f820 	bl	800abbc <__sfp>
 800ab7c:	6060      	str	r0, [r4, #4]
 800ab7e:	4620      	mov	r0, r4
 800ab80:	f000 f81c 	bl	800abbc <__sfp>
 800ab84:	60a0      	str	r0, [r4, #8]
 800ab86:	4620      	mov	r0, r4
 800ab88:	f000 f818 	bl	800abbc <__sfp>
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	60e0      	str	r0, [r4, #12]
 800ab90:	2104      	movs	r1, #4
 800ab92:	6860      	ldr	r0, [r4, #4]
 800ab94:	f7ff ff82 	bl	800aa9c <std>
 800ab98:	68a0      	ldr	r0, [r4, #8]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	2109      	movs	r1, #9
 800ab9e:	f7ff ff7d 	bl	800aa9c <std>
 800aba2:	68e0      	ldr	r0, [r4, #12]
 800aba4:	2202      	movs	r2, #2
 800aba6:	2112      	movs	r1, #18
 800aba8:	f7ff ff78 	bl	800aa9c <std>
 800abac:	2301      	movs	r3, #1
 800abae:	61a3      	str	r3, [r4, #24]
 800abb0:	e7d2      	b.n	800ab58 <__sinit+0xc>
 800abb2:	bf00      	nop
 800abb4:	0800b7ac 	.word	0x0800b7ac
 800abb8:	0800aae5 	.word	0x0800aae5

0800abbc <__sfp>:
 800abbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abbe:	4607      	mov	r7, r0
 800abc0:	f7ff ffac 	bl	800ab1c <__sfp_lock_acquire>
 800abc4:	4b1e      	ldr	r3, [pc, #120]	; (800ac40 <__sfp+0x84>)
 800abc6:	681e      	ldr	r6, [r3, #0]
 800abc8:	69b3      	ldr	r3, [r6, #24]
 800abca:	b913      	cbnz	r3, 800abd2 <__sfp+0x16>
 800abcc:	4630      	mov	r0, r6
 800abce:	f7ff ffbd 	bl	800ab4c <__sinit>
 800abd2:	3648      	adds	r6, #72	; 0x48
 800abd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800abd8:	3b01      	subs	r3, #1
 800abda:	d503      	bpl.n	800abe4 <__sfp+0x28>
 800abdc:	6833      	ldr	r3, [r6, #0]
 800abde:	b30b      	cbz	r3, 800ac24 <__sfp+0x68>
 800abe0:	6836      	ldr	r6, [r6, #0]
 800abe2:	e7f7      	b.n	800abd4 <__sfp+0x18>
 800abe4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800abe8:	b9d5      	cbnz	r5, 800ac20 <__sfp+0x64>
 800abea:	4b16      	ldr	r3, [pc, #88]	; (800ac44 <__sfp+0x88>)
 800abec:	60e3      	str	r3, [r4, #12]
 800abee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800abf2:	6665      	str	r5, [r4, #100]	; 0x64
 800abf4:	f000 f847 	bl	800ac86 <__retarget_lock_init_recursive>
 800abf8:	f7ff ff96 	bl	800ab28 <__sfp_lock_release>
 800abfc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ac00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ac04:	6025      	str	r5, [r4, #0]
 800ac06:	61a5      	str	r5, [r4, #24]
 800ac08:	2208      	movs	r2, #8
 800ac0a:	4629      	mov	r1, r5
 800ac0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ac10:	f7fb fd20 	bl	8006654 <memset>
 800ac14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ac18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac20:	3468      	adds	r4, #104	; 0x68
 800ac22:	e7d9      	b.n	800abd8 <__sfp+0x1c>
 800ac24:	2104      	movs	r1, #4
 800ac26:	4638      	mov	r0, r7
 800ac28:	f7ff ff62 	bl	800aaf0 <__sfmoreglue>
 800ac2c:	4604      	mov	r4, r0
 800ac2e:	6030      	str	r0, [r6, #0]
 800ac30:	2800      	cmp	r0, #0
 800ac32:	d1d5      	bne.n	800abe0 <__sfp+0x24>
 800ac34:	f7ff ff78 	bl	800ab28 <__sfp_lock_release>
 800ac38:	230c      	movs	r3, #12
 800ac3a:	603b      	str	r3, [r7, #0]
 800ac3c:	e7ee      	b.n	800ac1c <__sfp+0x60>
 800ac3e:	bf00      	nop
 800ac40:	0800b7ac 	.word	0x0800b7ac
 800ac44:	ffff0001 	.word	0xffff0001

0800ac48 <_fwalk_reent>:
 800ac48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac4c:	4606      	mov	r6, r0
 800ac4e:	4688      	mov	r8, r1
 800ac50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac54:	2700      	movs	r7, #0
 800ac56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac5a:	f1b9 0901 	subs.w	r9, r9, #1
 800ac5e:	d505      	bpl.n	800ac6c <_fwalk_reent+0x24>
 800ac60:	6824      	ldr	r4, [r4, #0]
 800ac62:	2c00      	cmp	r4, #0
 800ac64:	d1f7      	bne.n	800ac56 <_fwalk_reent+0xe>
 800ac66:	4638      	mov	r0, r7
 800ac68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac6c:	89ab      	ldrh	r3, [r5, #12]
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d907      	bls.n	800ac82 <_fwalk_reent+0x3a>
 800ac72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac76:	3301      	adds	r3, #1
 800ac78:	d003      	beq.n	800ac82 <_fwalk_reent+0x3a>
 800ac7a:	4629      	mov	r1, r5
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	47c0      	blx	r8
 800ac80:	4307      	orrs	r7, r0
 800ac82:	3568      	adds	r5, #104	; 0x68
 800ac84:	e7e9      	b.n	800ac5a <_fwalk_reent+0x12>

0800ac86 <__retarget_lock_init_recursive>:
 800ac86:	4770      	bx	lr

0800ac88 <__retarget_lock_acquire_recursive>:
 800ac88:	4770      	bx	lr

0800ac8a <__retarget_lock_release_recursive>:
 800ac8a:	4770      	bx	lr

0800ac8c <__swhatbuf_r>:
 800ac8c:	b570      	push	{r4, r5, r6, lr}
 800ac8e:	460e      	mov	r6, r1
 800ac90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac94:	2900      	cmp	r1, #0
 800ac96:	b096      	sub	sp, #88	; 0x58
 800ac98:	4614      	mov	r4, r2
 800ac9a:	461d      	mov	r5, r3
 800ac9c:	da08      	bge.n	800acb0 <__swhatbuf_r+0x24>
 800ac9e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aca2:	2200      	movs	r2, #0
 800aca4:	602a      	str	r2, [r5, #0]
 800aca6:	061a      	lsls	r2, r3, #24
 800aca8:	d410      	bmi.n	800accc <__swhatbuf_r+0x40>
 800acaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acae:	e00e      	b.n	800acce <__swhatbuf_r+0x42>
 800acb0:	466a      	mov	r2, sp
 800acb2:	f000 f903 	bl	800aebc <_fstat_r>
 800acb6:	2800      	cmp	r0, #0
 800acb8:	dbf1      	blt.n	800ac9e <__swhatbuf_r+0x12>
 800acba:	9a01      	ldr	r2, [sp, #4]
 800acbc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800acc0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800acc4:	425a      	negs	r2, r3
 800acc6:	415a      	adcs	r2, r3
 800acc8:	602a      	str	r2, [r5, #0]
 800acca:	e7ee      	b.n	800acaa <__swhatbuf_r+0x1e>
 800accc:	2340      	movs	r3, #64	; 0x40
 800acce:	2000      	movs	r0, #0
 800acd0:	6023      	str	r3, [r4, #0]
 800acd2:	b016      	add	sp, #88	; 0x58
 800acd4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800acd8 <__smakebuf_r>:
 800acd8:	898b      	ldrh	r3, [r1, #12]
 800acda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800acdc:	079d      	lsls	r5, r3, #30
 800acde:	4606      	mov	r6, r0
 800ace0:	460c      	mov	r4, r1
 800ace2:	d507      	bpl.n	800acf4 <__smakebuf_r+0x1c>
 800ace4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ace8:	6023      	str	r3, [r4, #0]
 800acea:	6123      	str	r3, [r4, #16]
 800acec:	2301      	movs	r3, #1
 800acee:	6163      	str	r3, [r4, #20]
 800acf0:	b002      	add	sp, #8
 800acf2:	bd70      	pop	{r4, r5, r6, pc}
 800acf4:	ab01      	add	r3, sp, #4
 800acf6:	466a      	mov	r2, sp
 800acf8:	f7ff ffc8 	bl	800ac8c <__swhatbuf_r>
 800acfc:	9900      	ldr	r1, [sp, #0]
 800acfe:	4605      	mov	r5, r0
 800ad00:	4630      	mov	r0, r6
 800ad02:	f7ff f957 	bl	8009fb4 <_malloc_r>
 800ad06:	b948      	cbnz	r0, 800ad1c <__smakebuf_r+0x44>
 800ad08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad0c:	059a      	lsls	r2, r3, #22
 800ad0e:	d4ef      	bmi.n	800acf0 <__smakebuf_r+0x18>
 800ad10:	f023 0303 	bic.w	r3, r3, #3
 800ad14:	f043 0302 	orr.w	r3, r3, #2
 800ad18:	81a3      	strh	r3, [r4, #12]
 800ad1a:	e7e3      	b.n	800ace4 <__smakebuf_r+0xc>
 800ad1c:	4b0d      	ldr	r3, [pc, #52]	; (800ad54 <__smakebuf_r+0x7c>)
 800ad1e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ad20:	89a3      	ldrh	r3, [r4, #12]
 800ad22:	6020      	str	r0, [r4, #0]
 800ad24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad28:	81a3      	strh	r3, [r4, #12]
 800ad2a:	9b00      	ldr	r3, [sp, #0]
 800ad2c:	6163      	str	r3, [r4, #20]
 800ad2e:	9b01      	ldr	r3, [sp, #4]
 800ad30:	6120      	str	r0, [r4, #16]
 800ad32:	b15b      	cbz	r3, 800ad4c <__smakebuf_r+0x74>
 800ad34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad38:	4630      	mov	r0, r6
 800ad3a:	f000 f8d1 	bl	800aee0 <_isatty_r>
 800ad3e:	b128      	cbz	r0, 800ad4c <__smakebuf_r+0x74>
 800ad40:	89a3      	ldrh	r3, [r4, #12]
 800ad42:	f023 0303 	bic.w	r3, r3, #3
 800ad46:	f043 0301 	orr.w	r3, r3, #1
 800ad4a:	81a3      	strh	r3, [r4, #12]
 800ad4c:	89a0      	ldrh	r0, [r4, #12]
 800ad4e:	4305      	orrs	r5, r0
 800ad50:	81a5      	strh	r5, [r4, #12]
 800ad52:	e7cd      	b.n	800acf0 <__smakebuf_r+0x18>
 800ad54:	0800aae5 	.word	0x0800aae5

0800ad58 <_malloc_usable_size_r>:
 800ad58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad5c:	1f18      	subs	r0, r3, #4
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	bfbc      	itt	lt
 800ad62:	580b      	ldrlt	r3, [r1, r0]
 800ad64:	18c0      	addlt	r0, r0, r3
 800ad66:	4770      	bx	lr

0800ad68 <_raise_r>:
 800ad68:	291f      	cmp	r1, #31
 800ad6a:	b538      	push	{r3, r4, r5, lr}
 800ad6c:	4604      	mov	r4, r0
 800ad6e:	460d      	mov	r5, r1
 800ad70:	d904      	bls.n	800ad7c <_raise_r+0x14>
 800ad72:	2316      	movs	r3, #22
 800ad74:	6003      	str	r3, [r0, #0]
 800ad76:	f04f 30ff 	mov.w	r0, #4294967295
 800ad7a:	bd38      	pop	{r3, r4, r5, pc}
 800ad7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ad7e:	b112      	cbz	r2, 800ad86 <_raise_r+0x1e>
 800ad80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad84:	b94b      	cbnz	r3, 800ad9a <_raise_r+0x32>
 800ad86:	4620      	mov	r0, r4
 800ad88:	f000 f830 	bl	800adec <_getpid_r>
 800ad8c:	462a      	mov	r2, r5
 800ad8e:	4601      	mov	r1, r0
 800ad90:	4620      	mov	r0, r4
 800ad92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad96:	f000 b817 	b.w	800adc8 <_kill_r>
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	d00a      	beq.n	800adb4 <_raise_r+0x4c>
 800ad9e:	1c59      	adds	r1, r3, #1
 800ada0:	d103      	bne.n	800adaa <_raise_r+0x42>
 800ada2:	2316      	movs	r3, #22
 800ada4:	6003      	str	r3, [r0, #0]
 800ada6:	2001      	movs	r0, #1
 800ada8:	e7e7      	b.n	800ad7a <_raise_r+0x12>
 800adaa:	2400      	movs	r4, #0
 800adac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800adb0:	4628      	mov	r0, r5
 800adb2:	4798      	blx	r3
 800adb4:	2000      	movs	r0, #0
 800adb6:	e7e0      	b.n	800ad7a <_raise_r+0x12>

0800adb8 <raise>:
 800adb8:	4b02      	ldr	r3, [pc, #8]	; (800adc4 <raise+0xc>)
 800adba:	4601      	mov	r1, r0
 800adbc:	6818      	ldr	r0, [r3, #0]
 800adbe:	f7ff bfd3 	b.w	800ad68 <_raise_r>
 800adc2:	bf00      	nop
 800adc4:	200000b4 	.word	0x200000b4

0800adc8 <_kill_r>:
 800adc8:	b538      	push	{r3, r4, r5, lr}
 800adca:	4d07      	ldr	r5, [pc, #28]	; (800ade8 <_kill_r+0x20>)
 800adcc:	2300      	movs	r3, #0
 800adce:	4604      	mov	r4, r0
 800add0:	4608      	mov	r0, r1
 800add2:	4611      	mov	r1, r2
 800add4:	602b      	str	r3, [r5, #0]
 800add6:	f7f7 fe5b 	bl	8002a90 <_kill>
 800adda:	1c43      	adds	r3, r0, #1
 800addc:	d102      	bne.n	800ade4 <_kill_r+0x1c>
 800adde:	682b      	ldr	r3, [r5, #0]
 800ade0:	b103      	cbz	r3, 800ade4 <_kill_r+0x1c>
 800ade2:	6023      	str	r3, [r4, #0]
 800ade4:	bd38      	pop	{r3, r4, r5, pc}
 800ade6:	bf00      	nop
 800ade8:	20000610 	.word	0x20000610

0800adec <_getpid_r>:
 800adec:	f7f7 be48 	b.w	8002a80 <_getpid>

0800adf0 <__sread>:
 800adf0:	b510      	push	{r4, lr}
 800adf2:	460c      	mov	r4, r1
 800adf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adf8:	f000 f894 	bl	800af24 <_read_r>
 800adfc:	2800      	cmp	r0, #0
 800adfe:	bfab      	itete	ge
 800ae00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae02:	89a3      	ldrhlt	r3, [r4, #12]
 800ae04:	181b      	addge	r3, r3, r0
 800ae06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae0a:	bfac      	ite	ge
 800ae0c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae0e:	81a3      	strhlt	r3, [r4, #12]
 800ae10:	bd10      	pop	{r4, pc}

0800ae12 <__swrite>:
 800ae12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae16:	461f      	mov	r7, r3
 800ae18:	898b      	ldrh	r3, [r1, #12]
 800ae1a:	05db      	lsls	r3, r3, #23
 800ae1c:	4605      	mov	r5, r0
 800ae1e:	460c      	mov	r4, r1
 800ae20:	4616      	mov	r6, r2
 800ae22:	d505      	bpl.n	800ae30 <__swrite+0x1e>
 800ae24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae28:	2302      	movs	r3, #2
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f000 f868 	bl	800af00 <_lseek_r>
 800ae30:	89a3      	ldrh	r3, [r4, #12]
 800ae32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae3a:	81a3      	strh	r3, [r4, #12]
 800ae3c:	4632      	mov	r2, r6
 800ae3e:	463b      	mov	r3, r7
 800ae40:	4628      	mov	r0, r5
 800ae42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae46:	f000 b817 	b.w	800ae78 <_write_r>

0800ae4a <__sseek>:
 800ae4a:	b510      	push	{r4, lr}
 800ae4c:	460c      	mov	r4, r1
 800ae4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae52:	f000 f855 	bl	800af00 <_lseek_r>
 800ae56:	1c43      	adds	r3, r0, #1
 800ae58:	89a3      	ldrh	r3, [r4, #12]
 800ae5a:	bf15      	itete	ne
 800ae5c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae66:	81a3      	strheq	r3, [r4, #12]
 800ae68:	bf18      	it	ne
 800ae6a:	81a3      	strhne	r3, [r4, #12]
 800ae6c:	bd10      	pop	{r4, pc}

0800ae6e <__sclose>:
 800ae6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae72:	f000 b813 	b.w	800ae9c <_close_r>
	...

0800ae78 <_write_r>:
 800ae78:	b538      	push	{r3, r4, r5, lr}
 800ae7a:	4d07      	ldr	r5, [pc, #28]	; (800ae98 <_write_r+0x20>)
 800ae7c:	4604      	mov	r4, r0
 800ae7e:	4608      	mov	r0, r1
 800ae80:	4611      	mov	r1, r2
 800ae82:	2200      	movs	r2, #0
 800ae84:	602a      	str	r2, [r5, #0]
 800ae86:	461a      	mov	r2, r3
 800ae88:	f7f7 fe39 	bl	8002afe <_write>
 800ae8c:	1c43      	adds	r3, r0, #1
 800ae8e:	d102      	bne.n	800ae96 <_write_r+0x1e>
 800ae90:	682b      	ldr	r3, [r5, #0]
 800ae92:	b103      	cbz	r3, 800ae96 <_write_r+0x1e>
 800ae94:	6023      	str	r3, [r4, #0]
 800ae96:	bd38      	pop	{r3, r4, r5, pc}
 800ae98:	20000610 	.word	0x20000610

0800ae9c <_close_r>:
 800ae9c:	b538      	push	{r3, r4, r5, lr}
 800ae9e:	4d06      	ldr	r5, [pc, #24]	; (800aeb8 <_close_r+0x1c>)
 800aea0:	2300      	movs	r3, #0
 800aea2:	4604      	mov	r4, r0
 800aea4:	4608      	mov	r0, r1
 800aea6:	602b      	str	r3, [r5, #0]
 800aea8:	f7f7 fe45 	bl	8002b36 <_close>
 800aeac:	1c43      	adds	r3, r0, #1
 800aeae:	d102      	bne.n	800aeb6 <_close_r+0x1a>
 800aeb0:	682b      	ldr	r3, [r5, #0]
 800aeb2:	b103      	cbz	r3, 800aeb6 <_close_r+0x1a>
 800aeb4:	6023      	str	r3, [r4, #0]
 800aeb6:	bd38      	pop	{r3, r4, r5, pc}
 800aeb8:	20000610 	.word	0x20000610

0800aebc <_fstat_r>:
 800aebc:	b538      	push	{r3, r4, r5, lr}
 800aebe:	4d07      	ldr	r5, [pc, #28]	; (800aedc <_fstat_r+0x20>)
 800aec0:	2300      	movs	r3, #0
 800aec2:	4604      	mov	r4, r0
 800aec4:	4608      	mov	r0, r1
 800aec6:	4611      	mov	r1, r2
 800aec8:	602b      	str	r3, [r5, #0]
 800aeca:	f7f7 fe40 	bl	8002b4e <_fstat>
 800aece:	1c43      	adds	r3, r0, #1
 800aed0:	d102      	bne.n	800aed8 <_fstat_r+0x1c>
 800aed2:	682b      	ldr	r3, [r5, #0]
 800aed4:	b103      	cbz	r3, 800aed8 <_fstat_r+0x1c>
 800aed6:	6023      	str	r3, [r4, #0]
 800aed8:	bd38      	pop	{r3, r4, r5, pc}
 800aeda:	bf00      	nop
 800aedc:	20000610 	.word	0x20000610

0800aee0 <_isatty_r>:
 800aee0:	b538      	push	{r3, r4, r5, lr}
 800aee2:	4d06      	ldr	r5, [pc, #24]	; (800aefc <_isatty_r+0x1c>)
 800aee4:	2300      	movs	r3, #0
 800aee6:	4604      	mov	r4, r0
 800aee8:	4608      	mov	r0, r1
 800aeea:	602b      	str	r3, [r5, #0]
 800aeec:	f7f7 fe3f 	bl	8002b6e <_isatty>
 800aef0:	1c43      	adds	r3, r0, #1
 800aef2:	d102      	bne.n	800aefa <_isatty_r+0x1a>
 800aef4:	682b      	ldr	r3, [r5, #0]
 800aef6:	b103      	cbz	r3, 800aefa <_isatty_r+0x1a>
 800aef8:	6023      	str	r3, [r4, #0]
 800aefa:	bd38      	pop	{r3, r4, r5, pc}
 800aefc:	20000610 	.word	0x20000610

0800af00 <_lseek_r>:
 800af00:	b538      	push	{r3, r4, r5, lr}
 800af02:	4d07      	ldr	r5, [pc, #28]	; (800af20 <_lseek_r+0x20>)
 800af04:	4604      	mov	r4, r0
 800af06:	4608      	mov	r0, r1
 800af08:	4611      	mov	r1, r2
 800af0a:	2200      	movs	r2, #0
 800af0c:	602a      	str	r2, [r5, #0]
 800af0e:	461a      	mov	r2, r3
 800af10:	f7f7 fe38 	bl	8002b84 <_lseek>
 800af14:	1c43      	adds	r3, r0, #1
 800af16:	d102      	bne.n	800af1e <_lseek_r+0x1e>
 800af18:	682b      	ldr	r3, [r5, #0]
 800af1a:	b103      	cbz	r3, 800af1e <_lseek_r+0x1e>
 800af1c:	6023      	str	r3, [r4, #0]
 800af1e:	bd38      	pop	{r3, r4, r5, pc}
 800af20:	20000610 	.word	0x20000610

0800af24 <_read_r>:
 800af24:	b538      	push	{r3, r4, r5, lr}
 800af26:	4d07      	ldr	r5, [pc, #28]	; (800af44 <_read_r+0x20>)
 800af28:	4604      	mov	r4, r0
 800af2a:	4608      	mov	r0, r1
 800af2c:	4611      	mov	r1, r2
 800af2e:	2200      	movs	r2, #0
 800af30:	602a      	str	r2, [r5, #0]
 800af32:	461a      	mov	r2, r3
 800af34:	f7f7 fdc6 	bl	8002ac4 <_read>
 800af38:	1c43      	adds	r3, r0, #1
 800af3a:	d102      	bne.n	800af42 <_read_r+0x1e>
 800af3c:	682b      	ldr	r3, [r5, #0]
 800af3e:	b103      	cbz	r3, 800af42 <_read_r+0x1e>
 800af40:	6023      	str	r3, [r4, #0]
 800af42:	bd38      	pop	{r3, r4, r5, pc}
 800af44:	20000610 	.word	0x20000610

0800af48 <atan>:
 800af48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af4c:	ec55 4b10 	vmov	r4, r5, d0
 800af50:	4bc3      	ldr	r3, [pc, #780]	; (800b260 <atan+0x318>)
 800af52:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800af56:	429e      	cmp	r6, r3
 800af58:	46ab      	mov	fp, r5
 800af5a:	dd18      	ble.n	800af8e <atan+0x46>
 800af5c:	4bc1      	ldr	r3, [pc, #772]	; (800b264 <atan+0x31c>)
 800af5e:	429e      	cmp	r6, r3
 800af60:	dc01      	bgt.n	800af66 <atan+0x1e>
 800af62:	d109      	bne.n	800af78 <atan+0x30>
 800af64:	b144      	cbz	r4, 800af78 <atan+0x30>
 800af66:	4622      	mov	r2, r4
 800af68:	462b      	mov	r3, r5
 800af6a:	4620      	mov	r0, r4
 800af6c:	4629      	mov	r1, r5
 800af6e:	f7f5 f995 	bl	800029c <__adddf3>
 800af72:	4604      	mov	r4, r0
 800af74:	460d      	mov	r5, r1
 800af76:	e006      	b.n	800af86 <atan+0x3e>
 800af78:	f1bb 0f00 	cmp.w	fp, #0
 800af7c:	f300 8131 	bgt.w	800b1e2 <atan+0x29a>
 800af80:	a59b      	add	r5, pc, #620	; (adr r5, 800b1f0 <atan+0x2a8>)
 800af82:	e9d5 4500 	ldrd	r4, r5, [r5]
 800af86:	ec45 4b10 	vmov	d0, r4, r5
 800af8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af8e:	4bb6      	ldr	r3, [pc, #728]	; (800b268 <atan+0x320>)
 800af90:	429e      	cmp	r6, r3
 800af92:	dc14      	bgt.n	800afbe <atan+0x76>
 800af94:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800af98:	429e      	cmp	r6, r3
 800af9a:	dc0d      	bgt.n	800afb8 <atan+0x70>
 800af9c:	a396      	add	r3, pc, #600	; (adr r3, 800b1f8 <atan+0x2b0>)
 800af9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa2:	ee10 0a10 	vmov	r0, s0
 800afa6:	4629      	mov	r1, r5
 800afa8:	f7f5 f978 	bl	800029c <__adddf3>
 800afac:	4baf      	ldr	r3, [pc, #700]	; (800b26c <atan+0x324>)
 800afae:	2200      	movs	r2, #0
 800afb0:	f7f5 fdba 	bl	8000b28 <__aeabi_dcmpgt>
 800afb4:	2800      	cmp	r0, #0
 800afb6:	d1e6      	bne.n	800af86 <atan+0x3e>
 800afb8:	f04f 3aff 	mov.w	sl, #4294967295
 800afbc:	e02b      	b.n	800b016 <atan+0xce>
 800afbe:	f000 f963 	bl	800b288 <fabs>
 800afc2:	4bab      	ldr	r3, [pc, #684]	; (800b270 <atan+0x328>)
 800afc4:	429e      	cmp	r6, r3
 800afc6:	ec55 4b10 	vmov	r4, r5, d0
 800afca:	f300 80bf 	bgt.w	800b14c <atan+0x204>
 800afce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800afd2:	429e      	cmp	r6, r3
 800afd4:	f300 80a0 	bgt.w	800b118 <atan+0x1d0>
 800afd8:	ee10 2a10 	vmov	r2, s0
 800afdc:	ee10 0a10 	vmov	r0, s0
 800afe0:	462b      	mov	r3, r5
 800afe2:	4629      	mov	r1, r5
 800afe4:	f7f5 f95a 	bl	800029c <__adddf3>
 800afe8:	4ba0      	ldr	r3, [pc, #640]	; (800b26c <atan+0x324>)
 800afea:	2200      	movs	r2, #0
 800afec:	f7f5 f954 	bl	8000298 <__aeabi_dsub>
 800aff0:	2200      	movs	r2, #0
 800aff2:	4606      	mov	r6, r0
 800aff4:	460f      	mov	r7, r1
 800aff6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800affa:	4620      	mov	r0, r4
 800affc:	4629      	mov	r1, r5
 800affe:	f7f5 f94d 	bl	800029c <__adddf3>
 800b002:	4602      	mov	r2, r0
 800b004:	460b      	mov	r3, r1
 800b006:	4630      	mov	r0, r6
 800b008:	4639      	mov	r1, r7
 800b00a:	f7f5 fc27 	bl	800085c <__aeabi_ddiv>
 800b00e:	f04f 0a00 	mov.w	sl, #0
 800b012:	4604      	mov	r4, r0
 800b014:	460d      	mov	r5, r1
 800b016:	4622      	mov	r2, r4
 800b018:	462b      	mov	r3, r5
 800b01a:	4620      	mov	r0, r4
 800b01c:	4629      	mov	r1, r5
 800b01e:	f7f5 faf3 	bl	8000608 <__aeabi_dmul>
 800b022:	4602      	mov	r2, r0
 800b024:	460b      	mov	r3, r1
 800b026:	4680      	mov	r8, r0
 800b028:	4689      	mov	r9, r1
 800b02a:	f7f5 faed 	bl	8000608 <__aeabi_dmul>
 800b02e:	a374      	add	r3, pc, #464	; (adr r3, 800b200 <atan+0x2b8>)
 800b030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b034:	4606      	mov	r6, r0
 800b036:	460f      	mov	r7, r1
 800b038:	f7f5 fae6 	bl	8000608 <__aeabi_dmul>
 800b03c:	a372      	add	r3, pc, #456	; (adr r3, 800b208 <atan+0x2c0>)
 800b03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b042:	f7f5 f92b 	bl	800029c <__adddf3>
 800b046:	4632      	mov	r2, r6
 800b048:	463b      	mov	r3, r7
 800b04a:	f7f5 fadd 	bl	8000608 <__aeabi_dmul>
 800b04e:	a370      	add	r3, pc, #448	; (adr r3, 800b210 <atan+0x2c8>)
 800b050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b054:	f7f5 f922 	bl	800029c <__adddf3>
 800b058:	4632      	mov	r2, r6
 800b05a:	463b      	mov	r3, r7
 800b05c:	f7f5 fad4 	bl	8000608 <__aeabi_dmul>
 800b060:	a36d      	add	r3, pc, #436	; (adr r3, 800b218 <atan+0x2d0>)
 800b062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b066:	f7f5 f919 	bl	800029c <__adddf3>
 800b06a:	4632      	mov	r2, r6
 800b06c:	463b      	mov	r3, r7
 800b06e:	f7f5 facb 	bl	8000608 <__aeabi_dmul>
 800b072:	a36b      	add	r3, pc, #428	; (adr r3, 800b220 <atan+0x2d8>)
 800b074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b078:	f7f5 f910 	bl	800029c <__adddf3>
 800b07c:	4632      	mov	r2, r6
 800b07e:	463b      	mov	r3, r7
 800b080:	f7f5 fac2 	bl	8000608 <__aeabi_dmul>
 800b084:	a368      	add	r3, pc, #416	; (adr r3, 800b228 <atan+0x2e0>)
 800b086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08a:	f7f5 f907 	bl	800029c <__adddf3>
 800b08e:	4642      	mov	r2, r8
 800b090:	464b      	mov	r3, r9
 800b092:	f7f5 fab9 	bl	8000608 <__aeabi_dmul>
 800b096:	a366      	add	r3, pc, #408	; (adr r3, 800b230 <atan+0x2e8>)
 800b098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b09c:	4680      	mov	r8, r0
 800b09e:	4689      	mov	r9, r1
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	4639      	mov	r1, r7
 800b0a4:	f7f5 fab0 	bl	8000608 <__aeabi_dmul>
 800b0a8:	a363      	add	r3, pc, #396	; (adr r3, 800b238 <atan+0x2f0>)
 800b0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ae:	f7f5 f8f3 	bl	8000298 <__aeabi_dsub>
 800b0b2:	4632      	mov	r2, r6
 800b0b4:	463b      	mov	r3, r7
 800b0b6:	f7f5 faa7 	bl	8000608 <__aeabi_dmul>
 800b0ba:	a361      	add	r3, pc, #388	; (adr r3, 800b240 <atan+0x2f8>)
 800b0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c0:	f7f5 f8ea 	bl	8000298 <__aeabi_dsub>
 800b0c4:	4632      	mov	r2, r6
 800b0c6:	463b      	mov	r3, r7
 800b0c8:	f7f5 fa9e 	bl	8000608 <__aeabi_dmul>
 800b0cc:	a35e      	add	r3, pc, #376	; (adr r3, 800b248 <atan+0x300>)
 800b0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d2:	f7f5 f8e1 	bl	8000298 <__aeabi_dsub>
 800b0d6:	4632      	mov	r2, r6
 800b0d8:	463b      	mov	r3, r7
 800b0da:	f7f5 fa95 	bl	8000608 <__aeabi_dmul>
 800b0de:	a35c      	add	r3, pc, #368	; (adr r3, 800b250 <atan+0x308>)
 800b0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e4:	f7f5 f8d8 	bl	8000298 <__aeabi_dsub>
 800b0e8:	4632      	mov	r2, r6
 800b0ea:	463b      	mov	r3, r7
 800b0ec:	f7f5 fa8c 	bl	8000608 <__aeabi_dmul>
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	4640      	mov	r0, r8
 800b0f6:	4649      	mov	r1, r9
 800b0f8:	f7f5 f8d0 	bl	800029c <__adddf3>
 800b0fc:	4622      	mov	r2, r4
 800b0fe:	462b      	mov	r3, r5
 800b100:	f7f5 fa82 	bl	8000608 <__aeabi_dmul>
 800b104:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b108:	4602      	mov	r2, r0
 800b10a:	460b      	mov	r3, r1
 800b10c:	d14b      	bne.n	800b1a6 <atan+0x25e>
 800b10e:	4620      	mov	r0, r4
 800b110:	4629      	mov	r1, r5
 800b112:	f7f5 f8c1 	bl	8000298 <__aeabi_dsub>
 800b116:	e72c      	b.n	800af72 <atan+0x2a>
 800b118:	ee10 0a10 	vmov	r0, s0
 800b11c:	4b53      	ldr	r3, [pc, #332]	; (800b26c <atan+0x324>)
 800b11e:	2200      	movs	r2, #0
 800b120:	4629      	mov	r1, r5
 800b122:	f7f5 f8b9 	bl	8000298 <__aeabi_dsub>
 800b126:	4b51      	ldr	r3, [pc, #324]	; (800b26c <atan+0x324>)
 800b128:	4606      	mov	r6, r0
 800b12a:	460f      	mov	r7, r1
 800b12c:	2200      	movs	r2, #0
 800b12e:	4620      	mov	r0, r4
 800b130:	4629      	mov	r1, r5
 800b132:	f7f5 f8b3 	bl	800029c <__adddf3>
 800b136:	4602      	mov	r2, r0
 800b138:	460b      	mov	r3, r1
 800b13a:	4630      	mov	r0, r6
 800b13c:	4639      	mov	r1, r7
 800b13e:	f7f5 fb8d 	bl	800085c <__aeabi_ddiv>
 800b142:	f04f 0a01 	mov.w	sl, #1
 800b146:	4604      	mov	r4, r0
 800b148:	460d      	mov	r5, r1
 800b14a:	e764      	b.n	800b016 <atan+0xce>
 800b14c:	4b49      	ldr	r3, [pc, #292]	; (800b274 <atan+0x32c>)
 800b14e:	429e      	cmp	r6, r3
 800b150:	da1d      	bge.n	800b18e <atan+0x246>
 800b152:	ee10 0a10 	vmov	r0, s0
 800b156:	4b48      	ldr	r3, [pc, #288]	; (800b278 <atan+0x330>)
 800b158:	2200      	movs	r2, #0
 800b15a:	4629      	mov	r1, r5
 800b15c:	f7f5 f89c 	bl	8000298 <__aeabi_dsub>
 800b160:	4b45      	ldr	r3, [pc, #276]	; (800b278 <atan+0x330>)
 800b162:	4606      	mov	r6, r0
 800b164:	460f      	mov	r7, r1
 800b166:	2200      	movs	r2, #0
 800b168:	4620      	mov	r0, r4
 800b16a:	4629      	mov	r1, r5
 800b16c:	f7f5 fa4c 	bl	8000608 <__aeabi_dmul>
 800b170:	4b3e      	ldr	r3, [pc, #248]	; (800b26c <atan+0x324>)
 800b172:	2200      	movs	r2, #0
 800b174:	f7f5 f892 	bl	800029c <__adddf3>
 800b178:	4602      	mov	r2, r0
 800b17a:	460b      	mov	r3, r1
 800b17c:	4630      	mov	r0, r6
 800b17e:	4639      	mov	r1, r7
 800b180:	f7f5 fb6c 	bl	800085c <__aeabi_ddiv>
 800b184:	f04f 0a02 	mov.w	sl, #2
 800b188:	4604      	mov	r4, r0
 800b18a:	460d      	mov	r5, r1
 800b18c:	e743      	b.n	800b016 <atan+0xce>
 800b18e:	462b      	mov	r3, r5
 800b190:	ee10 2a10 	vmov	r2, s0
 800b194:	4939      	ldr	r1, [pc, #228]	; (800b27c <atan+0x334>)
 800b196:	2000      	movs	r0, #0
 800b198:	f7f5 fb60 	bl	800085c <__aeabi_ddiv>
 800b19c:	f04f 0a03 	mov.w	sl, #3
 800b1a0:	4604      	mov	r4, r0
 800b1a2:	460d      	mov	r5, r1
 800b1a4:	e737      	b.n	800b016 <atan+0xce>
 800b1a6:	4b36      	ldr	r3, [pc, #216]	; (800b280 <atan+0x338>)
 800b1a8:	4e36      	ldr	r6, [pc, #216]	; (800b284 <atan+0x33c>)
 800b1aa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b1ae:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b1b2:	e9da 2300 	ldrd	r2, r3, [sl]
 800b1b6:	f7f5 f86f 	bl	8000298 <__aeabi_dsub>
 800b1ba:	4622      	mov	r2, r4
 800b1bc:	462b      	mov	r3, r5
 800b1be:	f7f5 f86b 	bl	8000298 <__aeabi_dsub>
 800b1c2:	4602      	mov	r2, r0
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b1ca:	f7f5 f865 	bl	8000298 <__aeabi_dsub>
 800b1ce:	f1bb 0f00 	cmp.w	fp, #0
 800b1d2:	4604      	mov	r4, r0
 800b1d4:	460d      	mov	r5, r1
 800b1d6:	f6bf aed6 	bge.w	800af86 <atan+0x3e>
 800b1da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1de:	461d      	mov	r5, r3
 800b1e0:	e6d1      	b.n	800af86 <atan+0x3e>
 800b1e2:	a51d      	add	r5, pc, #116	; (adr r5, 800b258 <atan+0x310>)
 800b1e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b1e8:	e6cd      	b.n	800af86 <atan+0x3e>
 800b1ea:	bf00      	nop
 800b1ec:	f3af 8000 	nop.w
 800b1f0:	54442d18 	.word	0x54442d18
 800b1f4:	bff921fb 	.word	0xbff921fb
 800b1f8:	8800759c 	.word	0x8800759c
 800b1fc:	7e37e43c 	.word	0x7e37e43c
 800b200:	e322da11 	.word	0xe322da11
 800b204:	3f90ad3a 	.word	0x3f90ad3a
 800b208:	24760deb 	.word	0x24760deb
 800b20c:	3fa97b4b 	.word	0x3fa97b4b
 800b210:	a0d03d51 	.word	0xa0d03d51
 800b214:	3fb10d66 	.word	0x3fb10d66
 800b218:	c54c206e 	.word	0xc54c206e
 800b21c:	3fb745cd 	.word	0x3fb745cd
 800b220:	920083ff 	.word	0x920083ff
 800b224:	3fc24924 	.word	0x3fc24924
 800b228:	5555550d 	.word	0x5555550d
 800b22c:	3fd55555 	.word	0x3fd55555
 800b230:	2c6a6c2f 	.word	0x2c6a6c2f
 800b234:	bfa2b444 	.word	0xbfa2b444
 800b238:	52defd9a 	.word	0x52defd9a
 800b23c:	3fadde2d 	.word	0x3fadde2d
 800b240:	af749a6d 	.word	0xaf749a6d
 800b244:	3fb3b0f2 	.word	0x3fb3b0f2
 800b248:	fe231671 	.word	0xfe231671
 800b24c:	3fbc71c6 	.word	0x3fbc71c6
 800b250:	9998ebc4 	.word	0x9998ebc4
 800b254:	3fc99999 	.word	0x3fc99999
 800b258:	54442d18 	.word	0x54442d18
 800b25c:	3ff921fb 	.word	0x3ff921fb
 800b260:	440fffff 	.word	0x440fffff
 800b264:	7ff00000 	.word	0x7ff00000
 800b268:	3fdbffff 	.word	0x3fdbffff
 800b26c:	3ff00000 	.word	0x3ff00000
 800b270:	3ff2ffff 	.word	0x3ff2ffff
 800b274:	40038000 	.word	0x40038000
 800b278:	3ff80000 	.word	0x3ff80000
 800b27c:	bff00000 	.word	0xbff00000
 800b280:	0800bc78 	.word	0x0800bc78
 800b284:	0800bc58 	.word	0x0800bc58

0800b288 <fabs>:
 800b288:	ec51 0b10 	vmov	r0, r1, d0
 800b28c:	ee10 2a10 	vmov	r2, s0
 800b290:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b294:	ec43 2b10 	vmov	d0, r2, r3
 800b298:	4770      	bx	lr

0800b29a <atan2>:
 800b29a:	f000 b82d 	b.w	800b2f8 <__ieee754_atan2>

0800b29e <sqrt>:
 800b29e:	b538      	push	{r3, r4, r5, lr}
 800b2a0:	ed2d 8b02 	vpush	{d8}
 800b2a4:	ec55 4b10 	vmov	r4, r5, d0
 800b2a8:	f000 f8f0 	bl	800b48c <__ieee754_sqrt>
 800b2ac:	4622      	mov	r2, r4
 800b2ae:	462b      	mov	r3, r5
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	4629      	mov	r1, r5
 800b2b4:	eeb0 8a40 	vmov.f32	s16, s0
 800b2b8:	eef0 8a60 	vmov.f32	s17, s1
 800b2bc:	f7f5 fc3e 	bl	8000b3c <__aeabi_dcmpun>
 800b2c0:	b990      	cbnz	r0, 800b2e8 <sqrt+0x4a>
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	4629      	mov	r1, r5
 800b2ca:	f7f5 fc0f 	bl	8000aec <__aeabi_dcmplt>
 800b2ce:	b158      	cbz	r0, 800b2e8 <sqrt+0x4a>
 800b2d0:	f7fb f996 	bl	8006600 <__errno>
 800b2d4:	2321      	movs	r3, #33	; 0x21
 800b2d6:	6003      	str	r3, [r0, #0]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	2300      	movs	r3, #0
 800b2dc:	4610      	mov	r0, r2
 800b2de:	4619      	mov	r1, r3
 800b2e0:	f7f5 fabc 	bl	800085c <__aeabi_ddiv>
 800b2e4:	ec41 0b18 	vmov	d8, r0, r1
 800b2e8:	eeb0 0a48 	vmov.f32	s0, s16
 800b2ec:	eef0 0a68 	vmov.f32	s1, s17
 800b2f0:	ecbd 8b02 	vpop	{d8}
 800b2f4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b2f8 <__ieee754_atan2>:
 800b2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2fc:	ec57 6b11 	vmov	r6, r7, d1
 800b300:	4273      	negs	r3, r6
 800b302:	f8df e184 	ldr.w	lr, [pc, #388]	; 800b488 <__ieee754_atan2+0x190>
 800b306:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b30a:	4333      	orrs	r3, r6
 800b30c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b310:	4573      	cmp	r3, lr
 800b312:	ec51 0b10 	vmov	r0, r1, d0
 800b316:	ee11 8a10 	vmov	r8, s2
 800b31a:	d80a      	bhi.n	800b332 <__ieee754_atan2+0x3a>
 800b31c:	4244      	negs	r4, r0
 800b31e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b322:	4304      	orrs	r4, r0
 800b324:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b328:	4574      	cmp	r4, lr
 800b32a:	ee10 9a10 	vmov	r9, s0
 800b32e:	468c      	mov	ip, r1
 800b330:	d907      	bls.n	800b342 <__ieee754_atan2+0x4a>
 800b332:	4632      	mov	r2, r6
 800b334:	463b      	mov	r3, r7
 800b336:	f7f4 ffb1 	bl	800029c <__adddf3>
 800b33a:	ec41 0b10 	vmov	d0, r0, r1
 800b33e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b342:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b346:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b34a:	4334      	orrs	r4, r6
 800b34c:	d103      	bne.n	800b356 <__ieee754_atan2+0x5e>
 800b34e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b352:	f7ff bdf9 	b.w	800af48 <atan>
 800b356:	17bc      	asrs	r4, r7, #30
 800b358:	f004 0402 	and.w	r4, r4, #2
 800b35c:	ea53 0909 	orrs.w	r9, r3, r9
 800b360:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b364:	d107      	bne.n	800b376 <__ieee754_atan2+0x7e>
 800b366:	2c02      	cmp	r4, #2
 800b368:	d060      	beq.n	800b42c <__ieee754_atan2+0x134>
 800b36a:	2c03      	cmp	r4, #3
 800b36c:	d1e5      	bne.n	800b33a <__ieee754_atan2+0x42>
 800b36e:	a142      	add	r1, pc, #264	; (adr r1, 800b478 <__ieee754_atan2+0x180>)
 800b370:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b374:	e7e1      	b.n	800b33a <__ieee754_atan2+0x42>
 800b376:	ea52 0808 	orrs.w	r8, r2, r8
 800b37a:	d106      	bne.n	800b38a <__ieee754_atan2+0x92>
 800b37c:	f1bc 0f00 	cmp.w	ip, #0
 800b380:	da5f      	bge.n	800b442 <__ieee754_atan2+0x14a>
 800b382:	a13f      	add	r1, pc, #252	; (adr r1, 800b480 <__ieee754_atan2+0x188>)
 800b384:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b388:	e7d7      	b.n	800b33a <__ieee754_atan2+0x42>
 800b38a:	4572      	cmp	r2, lr
 800b38c:	d10f      	bne.n	800b3ae <__ieee754_atan2+0xb6>
 800b38e:	4293      	cmp	r3, r2
 800b390:	f104 34ff 	add.w	r4, r4, #4294967295
 800b394:	d107      	bne.n	800b3a6 <__ieee754_atan2+0xae>
 800b396:	2c02      	cmp	r4, #2
 800b398:	d84c      	bhi.n	800b434 <__ieee754_atan2+0x13c>
 800b39a:	4b35      	ldr	r3, [pc, #212]	; (800b470 <__ieee754_atan2+0x178>)
 800b39c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b3a0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b3a4:	e7c9      	b.n	800b33a <__ieee754_atan2+0x42>
 800b3a6:	2c02      	cmp	r4, #2
 800b3a8:	d848      	bhi.n	800b43c <__ieee754_atan2+0x144>
 800b3aa:	4b32      	ldr	r3, [pc, #200]	; (800b474 <__ieee754_atan2+0x17c>)
 800b3ac:	e7f6      	b.n	800b39c <__ieee754_atan2+0xa4>
 800b3ae:	4573      	cmp	r3, lr
 800b3b0:	d0e4      	beq.n	800b37c <__ieee754_atan2+0x84>
 800b3b2:	1a9b      	subs	r3, r3, r2
 800b3b4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b3b8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b3bc:	da1e      	bge.n	800b3fc <__ieee754_atan2+0x104>
 800b3be:	2f00      	cmp	r7, #0
 800b3c0:	da01      	bge.n	800b3c6 <__ieee754_atan2+0xce>
 800b3c2:	323c      	adds	r2, #60	; 0x3c
 800b3c4:	db1e      	blt.n	800b404 <__ieee754_atan2+0x10c>
 800b3c6:	4632      	mov	r2, r6
 800b3c8:	463b      	mov	r3, r7
 800b3ca:	f7f5 fa47 	bl	800085c <__aeabi_ddiv>
 800b3ce:	ec41 0b10 	vmov	d0, r0, r1
 800b3d2:	f7ff ff59 	bl	800b288 <fabs>
 800b3d6:	f7ff fdb7 	bl	800af48 <atan>
 800b3da:	ec51 0b10 	vmov	r0, r1, d0
 800b3de:	2c01      	cmp	r4, #1
 800b3e0:	d013      	beq.n	800b40a <__ieee754_atan2+0x112>
 800b3e2:	2c02      	cmp	r4, #2
 800b3e4:	d015      	beq.n	800b412 <__ieee754_atan2+0x11a>
 800b3e6:	2c00      	cmp	r4, #0
 800b3e8:	d0a7      	beq.n	800b33a <__ieee754_atan2+0x42>
 800b3ea:	a319      	add	r3, pc, #100	; (adr r3, 800b450 <__ieee754_atan2+0x158>)
 800b3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f0:	f7f4 ff52 	bl	8000298 <__aeabi_dsub>
 800b3f4:	a318      	add	r3, pc, #96	; (adr r3, 800b458 <__ieee754_atan2+0x160>)
 800b3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fa:	e014      	b.n	800b426 <__ieee754_atan2+0x12e>
 800b3fc:	a118      	add	r1, pc, #96	; (adr r1, 800b460 <__ieee754_atan2+0x168>)
 800b3fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b402:	e7ec      	b.n	800b3de <__ieee754_atan2+0xe6>
 800b404:	2000      	movs	r0, #0
 800b406:	2100      	movs	r1, #0
 800b408:	e7e9      	b.n	800b3de <__ieee754_atan2+0xe6>
 800b40a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b40e:	4619      	mov	r1, r3
 800b410:	e793      	b.n	800b33a <__ieee754_atan2+0x42>
 800b412:	a30f      	add	r3, pc, #60	; (adr r3, 800b450 <__ieee754_atan2+0x158>)
 800b414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b418:	f7f4 ff3e 	bl	8000298 <__aeabi_dsub>
 800b41c:	4602      	mov	r2, r0
 800b41e:	460b      	mov	r3, r1
 800b420:	a10d      	add	r1, pc, #52	; (adr r1, 800b458 <__ieee754_atan2+0x160>)
 800b422:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b426:	f7f4 ff37 	bl	8000298 <__aeabi_dsub>
 800b42a:	e786      	b.n	800b33a <__ieee754_atan2+0x42>
 800b42c:	a10a      	add	r1, pc, #40	; (adr r1, 800b458 <__ieee754_atan2+0x160>)
 800b42e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b432:	e782      	b.n	800b33a <__ieee754_atan2+0x42>
 800b434:	a10c      	add	r1, pc, #48	; (adr r1, 800b468 <__ieee754_atan2+0x170>)
 800b436:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b43a:	e77e      	b.n	800b33a <__ieee754_atan2+0x42>
 800b43c:	2000      	movs	r0, #0
 800b43e:	2100      	movs	r1, #0
 800b440:	e77b      	b.n	800b33a <__ieee754_atan2+0x42>
 800b442:	a107      	add	r1, pc, #28	; (adr r1, 800b460 <__ieee754_atan2+0x168>)
 800b444:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b448:	e777      	b.n	800b33a <__ieee754_atan2+0x42>
 800b44a:	bf00      	nop
 800b44c:	f3af 8000 	nop.w
 800b450:	33145c07 	.word	0x33145c07
 800b454:	3ca1a626 	.word	0x3ca1a626
 800b458:	54442d18 	.word	0x54442d18
 800b45c:	400921fb 	.word	0x400921fb
 800b460:	54442d18 	.word	0x54442d18
 800b464:	3ff921fb 	.word	0x3ff921fb
 800b468:	54442d18 	.word	0x54442d18
 800b46c:	3fe921fb 	.word	0x3fe921fb
 800b470:	0800bc98 	.word	0x0800bc98
 800b474:	0800bcb0 	.word	0x0800bcb0
 800b478:	54442d18 	.word	0x54442d18
 800b47c:	c00921fb 	.word	0xc00921fb
 800b480:	54442d18 	.word	0x54442d18
 800b484:	bff921fb 	.word	0xbff921fb
 800b488:	7ff00000 	.word	0x7ff00000

0800b48c <__ieee754_sqrt>:
 800b48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b490:	ec55 4b10 	vmov	r4, r5, d0
 800b494:	4e55      	ldr	r6, [pc, #340]	; (800b5ec <__ieee754_sqrt+0x160>)
 800b496:	43ae      	bics	r6, r5
 800b498:	ee10 0a10 	vmov	r0, s0
 800b49c:	ee10 3a10 	vmov	r3, s0
 800b4a0:	462a      	mov	r2, r5
 800b4a2:	4629      	mov	r1, r5
 800b4a4:	d110      	bne.n	800b4c8 <__ieee754_sqrt+0x3c>
 800b4a6:	ee10 2a10 	vmov	r2, s0
 800b4aa:	462b      	mov	r3, r5
 800b4ac:	f7f5 f8ac 	bl	8000608 <__aeabi_dmul>
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	4629      	mov	r1, r5
 800b4b8:	f7f4 fef0 	bl	800029c <__adddf3>
 800b4bc:	4604      	mov	r4, r0
 800b4be:	460d      	mov	r5, r1
 800b4c0:	ec45 4b10 	vmov	d0, r4, r5
 800b4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4c8:	2d00      	cmp	r5, #0
 800b4ca:	dc10      	bgt.n	800b4ee <__ieee754_sqrt+0x62>
 800b4cc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b4d0:	4330      	orrs	r0, r6
 800b4d2:	d0f5      	beq.n	800b4c0 <__ieee754_sqrt+0x34>
 800b4d4:	b15d      	cbz	r5, 800b4ee <__ieee754_sqrt+0x62>
 800b4d6:	ee10 2a10 	vmov	r2, s0
 800b4da:	462b      	mov	r3, r5
 800b4dc:	ee10 0a10 	vmov	r0, s0
 800b4e0:	f7f4 feda 	bl	8000298 <__aeabi_dsub>
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	f7f5 f9b8 	bl	800085c <__aeabi_ddiv>
 800b4ec:	e7e6      	b.n	800b4bc <__ieee754_sqrt+0x30>
 800b4ee:	1512      	asrs	r2, r2, #20
 800b4f0:	d074      	beq.n	800b5dc <__ieee754_sqrt+0x150>
 800b4f2:	07d4      	lsls	r4, r2, #31
 800b4f4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b4f8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b4fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b500:	bf5e      	ittt	pl
 800b502:	0fda      	lsrpl	r2, r3, #31
 800b504:	005b      	lslpl	r3, r3, #1
 800b506:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b50a:	2400      	movs	r4, #0
 800b50c:	0fda      	lsrs	r2, r3, #31
 800b50e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b512:	107f      	asrs	r7, r7, #1
 800b514:	005b      	lsls	r3, r3, #1
 800b516:	2516      	movs	r5, #22
 800b518:	4620      	mov	r0, r4
 800b51a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b51e:	1886      	adds	r6, r0, r2
 800b520:	428e      	cmp	r6, r1
 800b522:	bfde      	ittt	le
 800b524:	1b89      	suble	r1, r1, r6
 800b526:	18b0      	addle	r0, r6, r2
 800b528:	18a4      	addle	r4, r4, r2
 800b52a:	0049      	lsls	r1, r1, #1
 800b52c:	3d01      	subs	r5, #1
 800b52e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b532:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b536:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b53a:	d1f0      	bne.n	800b51e <__ieee754_sqrt+0x92>
 800b53c:	462a      	mov	r2, r5
 800b53e:	f04f 0e20 	mov.w	lr, #32
 800b542:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b546:	4281      	cmp	r1, r0
 800b548:	eb06 0c05 	add.w	ip, r6, r5
 800b54c:	dc02      	bgt.n	800b554 <__ieee754_sqrt+0xc8>
 800b54e:	d113      	bne.n	800b578 <__ieee754_sqrt+0xec>
 800b550:	459c      	cmp	ip, r3
 800b552:	d811      	bhi.n	800b578 <__ieee754_sqrt+0xec>
 800b554:	f1bc 0f00 	cmp.w	ip, #0
 800b558:	eb0c 0506 	add.w	r5, ip, r6
 800b55c:	da43      	bge.n	800b5e6 <__ieee754_sqrt+0x15a>
 800b55e:	2d00      	cmp	r5, #0
 800b560:	db41      	blt.n	800b5e6 <__ieee754_sqrt+0x15a>
 800b562:	f100 0801 	add.w	r8, r0, #1
 800b566:	1a09      	subs	r1, r1, r0
 800b568:	459c      	cmp	ip, r3
 800b56a:	bf88      	it	hi
 800b56c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b570:	eba3 030c 	sub.w	r3, r3, ip
 800b574:	4432      	add	r2, r6
 800b576:	4640      	mov	r0, r8
 800b578:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b57c:	f1be 0e01 	subs.w	lr, lr, #1
 800b580:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b584:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b588:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b58c:	d1db      	bne.n	800b546 <__ieee754_sqrt+0xba>
 800b58e:	430b      	orrs	r3, r1
 800b590:	d006      	beq.n	800b5a0 <__ieee754_sqrt+0x114>
 800b592:	1c50      	adds	r0, r2, #1
 800b594:	bf13      	iteet	ne
 800b596:	3201      	addne	r2, #1
 800b598:	3401      	addeq	r4, #1
 800b59a:	4672      	moveq	r2, lr
 800b59c:	f022 0201 	bicne.w	r2, r2, #1
 800b5a0:	1063      	asrs	r3, r4, #1
 800b5a2:	0852      	lsrs	r2, r2, #1
 800b5a4:	07e1      	lsls	r1, r4, #31
 800b5a6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b5aa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b5ae:	bf48      	it	mi
 800b5b0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b5b4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b5b8:	4614      	mov	r4, r2
 800b5ba:	e781      	b.n	800b4c0 <__ieee754_sqrt+0x34>
 800b5bc:	0ad9      	lsrs	r1, r3, #11
 800b5be:	3815      	subs	r0, #21
 800b5c0:	055b      	lsls	r3, r3, #21
 800b5c2:	2900      	cmp	r1, #0
 800b5c4:	d0fa      	beq.n	800b5bc <__ieee754_sqrt+0x130>
 800b5c6:	02cd      	lsls	r5, r1, #11
 800b5c8:	d50a      	bpl.n	800b5e0 <__ieee754_sqrt+0x154>
 800b5ca:	f1c2 0420 	rsb	r4, r2, #32
 800b5ce:	fa23 f404 	lsr.w	r4, r3, r4
 800b5d2:	1e55      	subs	r5, r2, #1
 800b5d4:	4093      	lsls	r3, r2
 800b5d6:	4321      	orrs	r1, r4
 800b5d8:	1b42      	subs	r2, r0, r5
 800b5da:	e78a      	b.n	800b4f2 <__ieee754_sqrt+0x66>
 800b5dc:	4610      	mov	r0, r2
 800b5de:	e7f0      	b.n	800b5c2 <__ieee754_sqrt+0x136>
 800b5e0:	0049      	lsls	r1, r1, #1
 800b5e2:	3201      	adds	r2, #1
 800b5e4:	e7ef      	b.n	800b5c6 <__ieee754_sqrt+0x13a>
 800b5e6:	4680      	mov	r8, r0
 800b5e8:	e7bd      	b.n	800b566 <__ieee754_sqrt+0xda>
 800b5ea:	bf00      	nop
 800b5ec:	7ff00000 	.word	0x7ff00000

0800b5f0 <_init>:
 800b5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5f2:	bf00      	nop
 800b5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5f6:	bc08      	pop	{r3}
 800b5f8:	469e      	mov	lr, r3
 800b5fa:	4770      	bx	lr

0800b5fc <_fini>:
 800b5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fe:	bf00      	nop
 800b600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b602:	bc08      	pop	{r3}
 800b604:	469e      	mov	lr, r3
 800b606:	4770      	bx	lr
